#line 2 "compiler/EaseaLex.cpp"

#line 4 "compiler/EaseaLex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 426
#define YY_END_OF_BUFFER 427
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1428] =
    {   0,
      225,  225,  227,  227,  253,  253,   28,   28,  427,    2,
      425,  426,  418,  426,    1,    2,  425,  426,  425,  426,
      235,  425,  426,  237,  418,  426,    1,  425,  426,  425,
      426,  425,  426,  251,  425,  426,  252,  425,  426,  252,
      425,  426,  252,  425,  426,  425,  426,  252,  425,  426,
      252,  425,  426,  252,  425,  426,  252,  425,  426,  252,
      425,  426,  252,  425,  426,  252,  425,  426,  235,  425,
      426,  236,  237,  418,  426,  425,  426,  148,  425,  426,
      148,  418,  426,    1,  148,  425,  426,  148,  425,  426,
      148,  425,  426,  148,  425,  426,  148,  425,  426,  226,

      425,  426,  226,  418,  426,    1,  226,  425,  426,  225,
      226,  425,  426,  230,  425,  426,  227,  230,  425,  426,
      230,  418,  426,    1,  230,  425,  426,  230,  425,  426,
      230,  425,  426,  229,  230,  425,  426,  153,  425,  426,
      154,  418,  426,    1,  153,  425,  426,  153,  425,  426,
      156,  425,  426,  157,  418,  426,    1,  156,  425,  426,
      156,  425,  426,  162,  425,  426,  163,  418,  426,    1,
      162,  425,  426,  162,  425,  426,  181,  425,  426,  181,
      418,  426,    1,  181,  425,  426,  181,  425,  426,  150,
      425,  426,  151,  418,  426,    1,  150,  425,  426,  150,

      425,  426,   23,  425,  426,   24,  418,  426,    1,   23,
      425,  426,   23,  425,  426,  224,  425,  426,  224,  425,
      426,  224,  418,  426,    1,  224,  425,  426,  182,  224,
      425,  426,  224,  425,  426,  224,  425,  426,  224,  425,
      426,  224,  425,  426,  224,  425,  426,  224,  425,  426,
      224,  425,  426,  224,  425,  426,  224,  425,  426,  224,
      425,  426,  220,  224,  425,  426,  224,  425,  426,  224,
      425,  426,  224,  425,  426,  224,  425,  426,  224,  425,
      426,  224,  425,  426,  224,  425,  426,  224,  425,  426,
      260,  425,  426,  260,  418,  426,    1,  260,  425,  426,

      260,  425,  426,  262,  425,  426,  263,  418,  426,    1,
      262,  425,  426,  262,  425,  426,  265,  425,  426,  266,
      418,  426,    1,  265,  425,  426,  265,  425,  426,  268,
      425,  426,  269,  418,  426,    1,  268,  425,  426,  268,
      425,  426,  271,  425,  426,  272,  418,  426,    1,  271,
      425,  426,  271,  425,  426,  165,  425,  426,  166,  418,
      426,    1,  165,  425,  426,  165,  425,  426,  255,  425,
      426,  255,  418,  426,    1,  255,  425,  426,  255,  425,
      426,  374,  425,  426,  374,  418,  426,    1,  374,  425,
      426,  338,  374,  425,  426,  374,  425,  426,  374,  425,

      426,  372,  374,  425,  426,  374,  425,  426,  374,  425,
      426,  374,  425,  426,  374,  425,  426,  374,  425,  426,
      374,  425,  426,  374,  425,  426,  374,  425,  426,  374,
      425,  426,  374,  425,  426,  374,  425,  426,  374,  425,
      426,  374,  425,  426,  374,  425,  426,  374,  425,  426,
      374,  425,  426,  327,  425,  426,  327,  418,  426,    1,
      327,  425,  426,  278,  327,  425,  426,  327,  425,  426,
      327,  425,  426,  324,  327,  425,  426,  327,  425,  426,
      327,  425,  426,  327,  425,  426,  327,  425,  426,  327,
      425,  426,  327,  425,  426,  327,  425,  426,  327,  425,

      426,  281,  327,  425,  426,  327,  425,  426,  327,  425,
      426,  327,  425,  426,  327,  425,  426,  327,  425,  426,
      327,  425,  426,  327,  425,  426,  327,  425,  426,  327,
      425,  426,  327,  425,  426,  376,  425,  426,  376,  418,
      426,    1,  376,  425,  426,  376,  425,  426,  381,  425,
      426,  383,  418,  426,  425,  426,  425,  426,  415,  425,
      426,  416,  425,  426,  416,  425,  426,  416,  425,  426,
      416,  425,  426,  416,  425,  426,  416,  425,  426,  416,
      425,  426,  416,  425,  426,  416,  425,  426,  416,  425,
      426,  416,  425,  426,  416,  425,  426,  416,  425,  426,

      416,  425,  426,  416,  425,  426,  425,  426,  416,  425,
      426,  416,  425,  426,  416,  425,  426,  381,  425,  426,
      382,  383,  418,  426,  425,  426,  159,  425,  426,  160,
      418,  426,    1,  159,  425,  426,  159,  425,  426,  177,
      425,  426,  176,  418,  426,    1,  177,  425,  426,  177,
      425,  426,  253,  425,  426,  253,  418,  426,    1,  253,
      425,  426,  258,  425,  426,  258,  418,  426,    1,  258,
      425,  426,  258,  425,  426,  179,  425,  426,  179,  418,
      426,    1,  179,  425,  426,  179,  425,  426,  174,  425,
      426,  173,  418,  426,    1,  174,  425,  426,  174,  425,

      426,  168,  425,  426,  168,  418,  426,    1,  168,  425,
      426,  168,  425,  426,  171,  425,  426,  172,  418,  426,
        1,  171,  425,  426,  171,  425,  426,   29,  425,  426,
       29,  418,  426,  425,  426,   31,  425,  426,  425,  426,
       28,  425,  426,   30,  425,  426,   25,  425,  426,  425,
      426,   32,  425,  426,   38,  425,  426,   37,  418,  426,
        1,   38,  425,  426,   38,  425,  426,   38,  425,  426,
       33,   38,  425,  426,   34,   38,  425,  426,   48,  425,
      426,   56,  418,  426,    1,   48,  425,  426,   48,  425,
      426,   48,  425,  426,   48,  425,  426,   48,  425,  426,

      250,  231,  250,  251,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  236,  231,  225,  227,  229,
      228,  228,  183,  328,  339,  334,  335,  328,  273,  279,
      273,  414,  377,  414,  415,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  382,  377,  253,   27,   28,   25,  231,  250,  250,
      252,  252,  252,  252,  252,  252,  252,  242,  252,  252,
      252,  231,  232,  228,  228,  328,  328,  329,  273,  326,
      273,  274,  377,  414,  414,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      377,  378,   26,   36,  250,  233,  250,  252,  252,  252,
      247,  238,  252,  245,  252,  252,  252,  252,  252,  233,
      228,  228,  223,  209,  331,  373,  362,  331,  275,  323,
      316,  275,  414,  379,  414,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  417,  379,
      257,   22,   47,  252,  252,  252,  252,  252,  244,  252,
      252,  252,  234,    4,    5,   76,  222,  208,  330,  361,

      330,  332,  322,  315,  276,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  380,   52,  240,  252,  252,
      252,  252,  243,  252,  252,  241,  252,   68,   74,   79,
      210,  213,  185,  212,  363,  337,  342,  366,  367,  365,
      371,  332,  317,  277,  284,  319,  416,  416,  416,  388,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,   49,   57,  252,  252,  239,  252,  246,
      252,    8,  122,  215,  198,  355,  368,  369,  305,  416,
      416,  416,  388,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,   35,   55,  252,  249,    9,   75,  127,
        6,  112,  131,  115,  114,    7,  215,16578,16579,16576,
    16577,16573,  186,16571,  196,  211,  348,  343,  344,  364,
      300,  302,  296,  298,  290,  285,  286,  318,  416,  416,
      406,  416,  416,  411,  416,  416,  416,  416,  416,  416,
      416,   53,   54,  252,  126,  124,  110,  109,  100,16572,
      206,  207,  204,  205,  201,  199,16575,  346,  358,  356,
      352,  336,  288,  313,  314,  311,  312,  308,  306,  294,
      416,  416,  416,  411,  416,  416,  416,  416,  416,   50,
       51,  252,  113,   69,  128,  116,  200, 8386, 8387, 8384,

     8385, 8381, 8379,  203,16574,  357,  349,  345,  360,  350,
      307,  301,  303,  297,  299,  291,  287,  310,  292,  416,
      416,  248,  252,  129,  111,  135,  102,  123,  125,  155,
     8380,  218, 8383,  202,  221,  347,  333,  353,  359,  289,
      295,  309,  321,  409,  395,  385,   63,   73,  120,   64,
      134,  121,  106,  104,  133, 8382,  219,  351,  293,  280,
      409,  422,  395,  394,  413,  385,  147,  217,  387,  394,
      413,   67,  117,   70,   66,  108,  119,  118,  180,  216,
      387,   72,   77,   85,    3,  214,  370,  320,  407,  393,
       71,  139,  140,  407,  421,  393,  386,  399,  400,  158,

      178,   65,   84,   86,   87,   12,   10,  105,  103,  145,
    16568,  340,  282,  386,  399,  400,   20,  136,  138,  101,
      197,  354,  304,  398,  390,  402,   90,   82,  107,  143,
      152, 8376,  341,  283,  398,  390,  389,  402,   91,   62,
       95,  130,  410,  389,  404,   61,   19,   18,   16,   97,
      419,  420,  391,  424,  410,  423,  404,   60,   88,   89,
       81,   17,   80,   58,  132,  144,  264,  254,  392,  405,
      412,  391,  384,   40,   42,   39,   78,   96,  325,  392,
      405,  412,  384,  256,  137,   92,  141,  146,  261,  267,
      270,  375,  396,  397,  401,   11,  142,  396,  397,  401,

      149,  259,  403,   41,   43,  403,   98,   83,   21,  170,
       93,   44,   94,   59,   13,   99,  164,   15,  161,   45,
      408,  408,   46,  167,  175,   14,  169
    } ;

static yyconst flex_int16_t yy_accept[3443] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,   10,
       13,   15,   19,   21,   24,   27,   30,   32,   34,   37,
       40,   43,   46,   48,   51,   54,   57,   60,   63,   66,
       69,   72,   76,   78,   81,   84,   88,   91,   94,   97,

      100,  103,  106,  110,  114,  117,  121,  124,  128,  131,
      134,  138,  141,  144,  148,  151,  154,  157,  161,  164,
      167,  170,  174,  177,  180,  183,  187,  190,  193,  196,
      200,  203,  206,  209,  213,  216,  219,  222,  225,  229,
      233,  236,  239,  242,  245,  248,  251,  254,  257,  260,
      263,  267,  270,  273,  276,  279,  282,  285,  288,  291,
      294,  297,  301,  304,  307,  310,  314,  317,  320,  323,
      327,  330,  333,  336,  340,  343,  346,  349,  353,  356,
      359,  362,  366,  369,  372,  375,  379,  382,  385,  388,
      392,  396,  399,  402,  406,  409,  412,  415,  418,  421,

      424,  427,  430,  433,  436,  439,  442,  445,  448,  451,
      454,  457,  460,  464,  468,  471,  474,  478,  481,  484,
      487,  490,  493,  496,  499,  502,  506,  509,  512,  515,
      518,  521,  524,  527,  530,  533,  536,  539,  542,  546,
      549,  552,  555,  557,  559,  562,  565,  568,  571,  574,
      577,  580,  583,  586,  589,  592,  595,  598,  601,  604,
      607,  609,  612,  615,  618,  621,  625,  627,  630,  633,
      637,  640,  643,  646,  650,  653,  656,  659,  663,  666,
      669,  673,  676,  679,  682,  686,  689,  692,  695,  699,
      702,  705,  708,  712,  715,  718,  721,  725,  728,  731,

      734,  736,  739,  741,  744,  747,  750,  752,  755,  758,
      761,  765,  768,  771,  775,  779,  782,  785,  789,  792,
      795,  798,  801,  802,  802,  803,  804,  805,  805,  806,
      807,  808,  809,  809,  810,  811,  812,  813,  814,  815,
      816,  816,  817,  817,  817,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  819,  820,  820,  821,  822,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,  825,  825,
      826,  826,  826,  826,  827,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  829,  829,  829,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  832,  832,  833,  833,  834,
      835,  836,  836,  837,  838,  839,  840,  841,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  860,  861,  861,  862,

      862,  863,  863,  863,  864,  864,  864,  865,  865,  865,
      865,  865,  865,  865,  866,  866,  866,  867,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      869,  870,  870,  870,  871,  872,  873,  874,  874,  875,
      876,  877,  878,  880,  881,  882,  882,  882,  882,  882,
      883,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      885,  885,  885,  886,  886,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  888,  889,  889,  889,
      889,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  892,  893,  893,  893,
      893,  893,  894,  895,  895,  895,  896,  897,  898,  899,

      900,  901,  902,  903,  903,  904,  905,  906,  907,  907,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  920,  921,  921,  921,  921,  921,  921,  922,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      924,  924,  925,  925,  925,  925,  925,  925,  925,  925,
      926,  927,  927,  928,  929,  930,  931,  932,  934,  936,
      937,  938,  939,  940,  940,  940,  940,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  942,  942,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  946,  946,  946,  946,  946,  946,  946,  946,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      948,  948,  948,  948,  949,  949,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  952,  952,  952,  952,  953,

      953,  953,  954,  955,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  963,  963,  964,  964,  965,  965,  966,
      967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  980,  980,  980,  981,  981,  981,
      981,  982,  982,  982,  982,  982,  983,  983,  983,  983,
      983,  984,  984,  985,  986,  987,  988,  989,  991,  992,
      993,  993,  993,  994,  995,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  998,  998,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1014, 1014, 1014, 1015,

     1015, 1016, 1016, 1017, 1018, 1018, 1019, 1020, 1021, 1022,
     1022, 1023, 1024, 1024, 1025, 1026, 1026, 1026, 1026, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028,
     1028, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1038,
     1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043,

     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1046, 1046,
     1047, 1047, 1048, 1048, 1048, 1048, 1049, 1050, 1050, 1050,
     1050, 1050, 1051, 1052, 1052, 1053, 1054, 1054, 1055, 1055,
     1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1057, 1057, 1057, 1058, 1059, 1060, 1060, 1061, 1062, 1063,
     1063, 1064, 1064, 1064, 1064, 1065, 1065, 1066, 1066, 1067,
     1068, 1068, 1069, 1069, 1070, 1071, 1071, 1072, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1075, 1075, 1076, 1077, 1078, 1080, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1088,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1090,

     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1096, 1097, 1097, 1097, 1097,
     1098, 1098, 1099, 1099, 1099, 1099, 1100, 1100, 1101, 1101,
     1101, 1101, 1101, 1102, 1103, 1103, 1103, 1103, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105,
     1105, 1105, 1105, 1106, 1107, 1108, 1109, 1109, 1109, 1109,
     1109, 1110, 1110, 1110, 1110, 1110, 1111, 1112, 1113, 1113,
     1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1115, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1118, 1118, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1129,
     1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1139, 1139, 1139, 1140, 1141, 1141, 1142, 1143, 1143,
     1144, 1144, 1145, 1145, 1145, 1146, 1146, 1147, 1147, 1147,
     1147, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1149, 1150,
     1151, 1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1153, 1153, 1154, 1154, 1154, 1154, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1157, 1157,
     1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1161, 1161, 1161, 1161, 1162, 1162, 1162, 1163, 1163, 1163,
     1164, 1164, 1164, 1165, 1165, 1165, 1166, 1166, 1166, 1167,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1169, 1169, 1169, 1170, 1170, 1171, 1172,
     1172, 1172, 1172, 1173, 1174, 1174, 1175, 1175, 1176, 1176,
     1177, 1177, 1178, 1178, 1179, 1179, 1180, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1182, 1183, 1184, 1184, 1184,
     1185, 1185, 1185, 1186, 1186, 1186, 1186, 1186, 1186, 1187,
     1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189, 1189,
     1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1191, 1191, 1192, 1192, 1193, 1193, 1193, 1193, 1194,
     1194, 1194, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,

     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1204, 1204, 1205, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,
     1207, 1208, 1209, 1209, 1210, 1211, 1211, 1211, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1218, 1219, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221, 1221, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1224, 1224, 1224, 1224, 1224, 1225, 1225,
     1225, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1229, 1230, 1230, 1230, 1231, 1231,

     1231, 1231, 1231, 1231, 1232, 1233, 1234, 1234, 1234, 1235,
     1235, 1235, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1237, 1238, 1239, 1239, 1240, 1240, 1240, 1241, 1242, 1242,
     1243, 1243, 1243, 1243, 1244, 1244, 1244, 1244, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1248, 1248, 1249, 1250, 1250, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1252, 1253, 1253, 1253, 1253, 1254, 1254, 1255,
     1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1259, 1259, 1259, 1260, 1260, 1260, 1260, 1261, 1261,
     1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1263, 1263, 1263, 1263, 1263, 1264, 1264,
     1264, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1266,

     1266, 1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1278, 1279, 1279, 1279, 1279,
     1279, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286, 1286,

     1286, 1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1288, 1288, 1288, 1289, 1289, 1289, 1289,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293,

     1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1295, 1295, 1295, 1295, 1295, 1295, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1297, 1297, 1298, 1298, 1298,
     1298, 1298, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1301, 1301, 1301, 1301, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1306, 1306,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1309,

     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311,
     1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1315, 1315, 1315, 1315,
     1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1318, 1318, 1318, 1319, 1319, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,

     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323,
     1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1326, 1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1330, 1330, 1330, 1330, 1330, 1331, 1331, 1332,
     1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1334, 1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336,

     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1337, 1337, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1342, 1342,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1344, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1348, 1349, 1349,
     1350, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1352, 1352, 1353, 1353, 1354, 1355, 1355, 1355, 1355, 1355,
     1356, 1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1359, 1360, 1361, 1361, 1361, 1362, 1362, 1362,
     1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1364, 1365,
     1365, 1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,

     1369, 1370, 1370, 1371, 1371, 1371, 1371, 1372, 1373, 1373,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375,
     1376, 1377, 1377, 1378, 1378, 1378, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380,
     1381, 1382, 1382, 1382, 1383, 1384, 1384, 1384, 1384, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386,
     1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,
     1391, 1391, 1392, 1392, 1392, 1393, 1393, 1394, 1394, 1395,

     1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1397, 1398, 1398, 1398, 1398, 1398, 1398,
     1399, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1409,
     1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410,
     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1413, 1413, 1414, 1415, 1415, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419,
     1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421,
     1421, 1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423,

     1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427,
     1428, 1428
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    1,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       17,   17,   17,   17,   17,   17,   17,   20,   21,    1,
       22,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   32,   62,   63,   64,   65,
       66,   67,   32,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,    1,   78,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[79] =
    {   0,
        1,    2,    3,    1,    2,    4,    1,    4,    4,    4,
        4,    4,    1,    4,    1,    4,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    4,    1,
        6,    7,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    8
    } ;

static yyconst flex_uint16_t yy_base[3528] =
    {   0,
        0,    2,    6,   83,   86,   88,  138,  216,  114,  159,
      120,  122,  131,  152,  162,  164,  189,  191,  193,  195,
      197,  200,  294,    0,  202,  204,  206,  230,  370,  372,
      374,  376,  378,  380,  382,  384,  386,  388,  438,   91,
      516,   92,  592,  594,  644,   98,  720,  722,  724,  726,
      101,  179,  728,  730,  732,  734,  736,  738,  740,  742,
      744,  746,  796,  874,  748,  750,  866,  868, 6081, 6082,
     6082, 6082, 6082, 6082, 6082, 6082,  167,  164,  378,    0,
       49, 6023, 6022, 6012, 6017, 6010, 6012, 6009, 6007, 6002,
      246, 6082,  224, 6082, 6082, 6082, 6044, 6047, 6044,  930,

     6082, 6082, 6082,    0, 6082,   93, 6082, 6082,  253,  241,
      584, 6082, 6082, 6082, 6025, 6082, 6082, 6082, 6024, 6082,
     6082, 6082, 6042, 6082, 6082, 6082, 6022, 6082, 6082, 6082,
     6035, 6082, 6082, 6082, 6009, 6008,  766, 6007, 6006, 6005,
       56,  125,  397,  762,  819,  259,  396,  398,  602,  777,
     6004,  846,  405,  758,  847,  851,  753,  853,  764, 6082,
     6082, 6082, 6028, 6082, 6082, 6082, 6027, 6082, 6082, 6082,
     6026, 6082, 6082, 6082, 6025, 6082, 6082, 6082, 6024, 6082,
     6082, 6082, 6029, 6082, 6082, 6082, 6022, 5996, 5995, 5994,
     5993,  589, 6082, 5992, 6005, 5987, 6000, 6018, 6004, 6013,

     6002,  779,  182,  804,  190, 5985,  216,  103,  906,  848,
     5983, 5982, 5981, 5980,  850, 6082, 5979, 5992, 5974,  388,
     6006, 5992, 6001, 5990,  781, 5972, 6001, 5953,   49, 5970,
     5966, 5983, 5967,  145,  910,  919, 6082, 6082, 6082, 5993,
     6082, 6082,  257,  266,  922, 5950, 5964, 5948,    0,  215,
     5954, 5957, 5975,  356,  350, 5954,  218, 5954,  553, 5949,
     5952,  353, 5954, 5946,  610, 6082,  274, 6082, 6082, 6082,
     5963, 6082, 6082, 6082, 5982,    0,    0,    0, 6082, 6082,
     6082,  351, 6082, 6082, 6082, 5980, 6082, 6082, 6082, 5980,
     6082, 6082, 6082, 5979, 6082, 6082, 6082, 5970, 6082, 6082,

     5994, 6082, 5983,  599, 6082,    0, 5941, 6082, 6082, 6082,
     6082, 5957, 5960, 6082, 6082, 6082, 6082, 6082, 5959, 5951,
      234, 5936,  929, 5981,    0,  963,  970,  613,    0, 5955,
     5925, 5919, 5923, 5921, 5933, 5914, 5918, 5913, 5921, 5928,
      617, 6082,  402, 5969, 5976, 5937, 5936, 5924,  721, 5952,
      722,  880, 5949, 5946,  599,  578, 5948,  251,  803, 5944,
      951,  385, 5930, 5932,    0,  839,  914,  981,  984,  987,
      998, 5899, 5898, 5909, 5896, 5907, 5906, 5896,  940, 5904,
     5903,  858, 1017,  990,  863,  908, 1016, 1021, 1023, 1027,
     1028, 6082, 5894, 1029, 1034, 1035, 1041, 1043, 1045, 1047,

     1049, 1051, 5901, 5900, 5899, 5898, 5897, 5895, 5895, 5885,
     5939,    0, 5924, 5883, 5905, 5894, 5907, 5906, 5899, 6082,
     5877, 5880, 5872, 6082, 6082, 5876, 5881, 5876, 5868, 5870,
     5864, 5864, 5861, 1055,  618, 5920, 5927, 5863, 5917,    0,
     5902, 5861, 5879, 5888, 5881, 5870, 5883, 5882, 5875, 6082,
     5853, 5860, 5848, 5900, 5848, 5850, 5855, 5845, 5845, 5840,
     5837, 1061,  927, 5896, 5903, 5848, 1051, 5893,    0, 1057,
     1075, 1069,    0, 5848, 5839, 5835, 5839, 5846, 5833, 5832,
     1077, 5822,  862, 5825, 1093, 5830, 5835, 5826, 5824, 5829,
      572, 5817,  996, 5812, 5834, 5818, 5821, 5819, 5818, 1104,

     6082, 1051, 5871, 5878, 5811, 5809,    0, 5809, 5812, 5810,
     5805, 5804, 5808, 6082, 5866, 5868, 1098,    0, 5805, 5844,
     5830, 5829, 5824, 5808, 5799, 5793, 1107, 5851, 5845,    0,
     1110, 1121, 1124, 1127, 5794, 5793, 5798, 5801, 5793, 5787,
     5800, 5800,    0, 5787, 5781, 5839, 5846, 5837, 5831, 5843,
     6082, 5822, 5817, 5816, 5819, 5816, 5799, 5805, 5801, 1075,
     5811, 5805, 5783, 5791, 5781, 5780, 5795, 5789, 5777, 5776,
      948, 5785, 5774, 5797, 5797, 5786, 5784,  976, 1124, 5777,
     1065, 5797, 5779, 5783, 5782, 5782, 5784, 5770, 1137, 1143,
     1154, 1146, 1157, 5756, 5755, 5753, 5753, 5744, 5749, 5741,

     5741, 5747, 1175, 1129, 1176, 1177, 1181, 1182, 1183, 1187,
     1188, 5748, 1189, 1194, 1196, 1201, 1207, 1208, 1212, 1214,
     1218, 1220, 5738, 5737, 5736, 5735, 5734, 5728, 5732, 5730,
     5784, 5778,    0, 5763, 5726, 5739, 5761, 5737, 5754, 5760,
     5730, 5722, 5716, 5714, 5717, 5711, 5723, 5723, 5707, 5708,
     5719, 5764, 5771, 5762, 5756, 5768, 6082, 5704, 5758, 5752,
        0, 5737, 5700, 5734, 5733, 5711, 5733, 5709, 5726, 5732,
     5702, 5688, 5688, 6082, 5692, 5685, 5688, 5685, 5695, 5681,
     5692, 5737, 5744, 5735, 5729, 5741, 6082, 5685, 1212, 5731,
     5725,    0, 1221, 1233, 1224, 1236, 5680, 5683, 5669, 5667,

     5673, 5682, 5677, 1254, 1259, 5665, 1269, 5679, 1278, 5677,
     5661, 5659, 5657, 5662, 5655, 5659, 5667, 5666, 5650, 5664,
     5652, 5647, 5661, 5661, 5705, 5712, 5703, 5697, 5709, 6082,
     5654, 1283, 5653, 5653, 5637, 1287, 1291, 5638, 5703, 6082,
     5649, 6082, 5661, 5660, 5664, 5636, 5644, 5628, 1249, 1280,
     6082, 1283, 1286, 5642, 5633, 5630, 6082, 5638,    0, 5631,
     5623, 5622, 5630, 5679, 5673, 5685, 1304, 5660, 5663, 5662,
     5650, 5653, 5651, 5655, 5644, 5641, 5631, 5654, 5634, 5649,
     5651, 5635, 5631, 1121,  812, 5643,  153, 5630, 5638, 5616,
      954, 5615, 5626, 5623, 5612, 5627, 5638, 5635, 5608, 5622,

     5631, 5630, 5612, 5615, 5610, 5615, 5625, 5599, 5608, 5622,
     1296, 1299, 1302, 1305, 5580, 5579, 5580, 5577, 5578, 5582,
     5579, 5575, 5579, 1232, 1306, 1323, 1324, 1325, 1329, 1330,
     1331, 1335, 6082, 1336, 1337, 1341, 1343, 1345, 1347, 1349,
     1355, 1359, 1360, 5573, 5572, 5571, 5570, 5569, 5577, 5567,
     5569, 5628, 5578, 5565, 5590, 5600, 5585, 5573, 5584, 6082,
     5567, 5565, 5564, 5550, 5582, 5553, 5550, 5546, 5588, 6082,
     5595, 5588, 5595, 1364, 5533, 6082, 5538, 5524, 5531, 5488,
     5478, 5441, 5323, 5280, 5260, 6082, 5198, 5199, 5171, 5182,
     5167, 5165, 5167, 5205, 6082, 4984, 4978, 4990, 1371, 4938,

     1360, 1363, 6082, 1368, 1371, 4929, 4915, 4918,  231, 4915,
     4922, 4916, 4922, 1389,   84, 1393,   87,  186,  358,  541,
     1402,  575,  703,  734,  723, 1407,  812,  844, 1411,  850,
      868, 1420, 6082,  939,  946,  960, 1424,  941, 1428,  956,
     6082,  970, 1432, 1436, 1027, 6082, 1059, 1081, 1087, 1070,
     6082, 1084, 1096, 1100, 1113, 1144, 1145,    0, 1147, 1163,
     1440, 1444, 6082, 6082, 6082, 1186, 1181, 1180, 1207, 1199,
     1222, 1235, 1211, 1223, 1264, 1251, 1276, 1330, 1324, 1328,
     1337, 1353, 1370, 1368, 1373, 1380, 1392, 1383, 1381, 1397,
     1390, 1391, 1413, 1388, 1403, 1406, 1417, 6082, 1424, 1411,

     1403, 1431, 1430, 1416, 1408, 1429, 1412, 1439, 1439, 1427,
     1466, 1470, 1402, 1474, 1410, 1413,    0, 1416, 1416, 1481,
     1482, 1486, 1487, 1488, 1493, 1492, 1494, 1498, 1499, 1503,
     1505, 1507, 1509, 1514, 1519, 1525, 1529, 1418, 1449, 1451,
     1456, 1461, 1458, 1469,    0, 6082, 1494, 1479, 1497, 1502,
     1509, 1503, 1490, 1525, 1480, 6082, 1485, 1480, 1478, 1485,
     1486, 1486, 1551, 1556, 6082,    0, 1514, 1500, 1531, 1532,
     1524, 1529, 1535, 1529, 1516, 6082, 1504, 1517, 6082, 1510,
     1511, 1512, 1511, 1576, 1581, 6082, 1509, 1513, 1526, 1522,
     1588, 1523, 1541, 1594, 1545, 1537, 1536, 1534, 1533, 1539,

     1544, 1604, 1542, 1543, 1610, 1561, 1614, 1561, 1563, 1619,
     1553, 1557, 1624, 1628, 1556, 1632, 1636, 1640, 6082, 1644,
     1579, 1648, 1580, 1580, 1584, 1591, 1603, 1605, 1613, 1592,
     1592,    0, 1633, 1590, 1595,    0, 1593,    0, 1635, 1622,
     1623, 1629, 1635, 6082, 1627, 1643, 1629, 1618, 1630, 1632,
     6082, 1631, 1626, 1652, 1649, 1635, 1655, 1646, 1653, 1642,
     1641, 1661, 1645, 1651, 1646, 1658, 1649, 1651, 1662, 1642,
     1669, 1666, 1670, 1676, 1673, 1663, 1660, 1663, 1652, 1668,
     1684, 1674, 1678, 6082, 1658, 1709, 1713, 1656, 1717, 1660,
     1716, 6082, 1666, 1667, 1723, 1724, 1725, 1729, 1730, 1734,

     1738, 1742, 1740, 1746, 1748, 1750, 1755, 1756, 1757, 1766,
     1676, 1684, 1689, 1706, 1707, 1777, 1717, 6082, 1744, 1751,
     1744, 1782, 1735, 1761, 1751, 6082, 6082, 1720, 1736, 1722,
     1775, 6082, 6082, 1734, 6082, 6082, 1765, 6082, 1757, 1758,
     1760, 1809, 1754, 1776, 1769, 1738, 1743, 1760, 1763, 6082,
     1756, 1755, 1762, 1756, 1750, 1821, 1827, 1761, 1758, 1831,
     1765, 1780, 1777, 1782, 1779, 1781, 1777, 1842, 1846, 1785,
     1780, 1782, 1851, 1855, 1859, 1789, 1802, 1863, 1809, 1867,
     1812, 1813, 1873, 1822, 1877, 1881, 1824, 1828, 1834, 1871,
     1874, 1845, 1838, 1891, 1834, 1878,    0,    0, 1878, 1875,

     1872, 1869, 1869, 1879, 1865, 1866, 1869, 1876, 6082, 1883,
     1887, 1873, 1864, 1865, 1892, 1892, 1880, 1896, 1893, 1880,
     1890, 6082, 1876, 1881, 1899, 1890, 1885, 1893, 1900, 1900,
     1909, 1898, 1887, 1903, 1905, 1891, 1919, 1917, 1925, 1907,
     1919, 1911, 1914, 1896, 1911, 1953, 1896, 1935, 1895, 1937,
     1962, 1963, 1964, 1968, 1969, 1970, 1974, 1975, 1980, 1984,
     1956, 1986, 1979, 1988, 1998, 2002, 2003, 2010, 2012, 2016,
     1967, 1969, 1973, 1985, 1991, 2020, 1995, 1976, 1963, 2005,
     2028, 2012, 2008, 1996, 1997, 2009, 1986, 1971, 6082, 6082,
     1976, 1994, 2016, 2017, 2018, 2019, 2023, 2046, 2030, 2026,

     2016, 2017, 2029, 1998, 2007, 1991, 1997, 1994, 2064, 2004,
     2013, 2069, 2073, 2007, 2022, 2023, 2081, 2015, 2030, 2022,
     2019, 2025, 2053, 2031, 2092, 2031, 2045, 2038, 2030, 2100,
     2104, 2037, 2052, 2044, 2109, 2113, 2045, 2052, 2055, 2049,
     2061, 2069, 2122, 2126, 2130, 2067, 2119, 6082, 2122, 2075,
     2125, 2105, 6082, 2081, 6082, 6082, 2093, 2098, 2120, 2117,
     6082, 2112, 2124, 2117, 2121, 6082, 6082, 6082, 2126, 2138,
     2156, 2102, 6082, 2117, 2120, 2120, 2128, 2136, 2130, 2135,
     2132, 2146, 2144, 2130, 2123, 2155, 2134, 2136, 2158, 2152,
     2152, 2156, 2157, 2153, 2160, 2158, 2169, 2173, 2162, 2176,

     2169, 6082, 2165, 2151, 2181, 2206, 2157, 2149, 2146, 2151,
     2213, 2214, 2215, 2220, 2224, 2228, 2232, 2242, 6082, 2250,
     2234, 2219, 2238, 2246, 2255, 2256, 2260, 2264, 2165, 2169,
     2175, 2186, 2204, 2198, 2208, 2246, 2221, 2273, 6082, 2277,
     2252, 2244, 2226, 2221, 2270, 6082, 2259, 2286, 2291, 2295,
     2300, 2304, 6082, 2313, 2262, 2255, 2244, 2238, 2247, 2250,
     6082, 2309, 2322, 2251, 2255, 2326, 6082, 2262, 2276, 2331,
     2335, 2339, 2345, 2349, 2274, 2354, 2358, 2300, 2275, 2291,
     2294, 2288, 2296, 2311, 2307, 2313, 2298, 2297, 2367, 2306,
     2307, 2372, 2310, 2319, 2318, 2315, 2379, 2321, 2325, 2384,

     2390, 2394, 6082, 2337, 6082, 2383, 2339, 2331, 2329, 2374,
     2377, 2369, 2365, 2367, 2385, 2382, 2362, 2359, 2371, 2387,
     2392, 2389, 2391, 2379, 2390, 2387, 2394, 2399, 2391, 2407,
     2394, 2392, 2408, 2396, 2398, 2405, 6082, 6082, 2400, 6082,
     2414, 2402, 6082, 2422, 2420, 2414, 2414, 2416, 2408, 2412,
     2404, 2417, 2421, 2433, 2408, 2424, 2421, 2411, 2412, 2413,
     2435, 2430, 2405, 2446, 2398, 2402, 2419, 2416, 2421, 2473,
     2475, 2479, 2483, 2457, 2487, 2491, 2461, 2495, 2501, 2465,
     2509, 2517, 2469, 2523, 2527, 2477, 2531, 2545, 2480, 2552,
     2513, 2538, 2505, 2554, 2556, 2468, 2474, 2482, 2488, 2489,

     2489, 2498, 2560, 2495, 2566, 2544, 2570, 2554, 2575, 2555,
     2516, 2555, 6082, 2584, 2591, 2563, 2596, 2569, 2602, 2573,
     2606, 2578, 2612, 2580, 2618, 2581, 2624, 2586, 2547, 2551,
     2590, 2559, 2562, 2570, 2568, 2633, 2639, 2562, 2645, 2649,
     2653, 2657, 2661, 2665, 2669, 2568, 2574, 2673, 2677, 2574,
     2580, 2579, 2595, 2589, 2598, 2602, 2681, 2685, 2601, 2605,
     2613, 2689, 2611, 2634, 2693, 2636, 2640, 2642, 2636, 2700,
     6082, 2655, 6082, 2654, 2639, 2671, 2687, 2670, 6082, 2670,
     2679, 6082, 2663, 2664, 2690, 2693, 2682, 2679, 2684, 2689,
     2685, 2678, 2698, 2685, 2692, 2704, 2690, 2706, 2682, 2714,

     2702, 2703, 2689, 2711, 2710, 2702, 2703, 2719, 2703, 2717,
     2697, 2698, 6082, 2699, 2712, 2712, 2724, 2704, 2720, 2719,
     2722, 2721, 2728, 2729, 2727, 2730, 2726, 2744, 2733, 2734,
     2727, 2731, 2732, 2747, 2733, 2752, 2724, 2776, 2723, 2713,
     2714, 2716, 2716, 2784, 2788, 2770, 2792, 6082, 6082, 6082,
     6082, 6082, 6082, 2796, 2800, 2773, 2806, 2802, 2810, 2812,
     2731, 2747, 2750, 2751, 2752, 2755, 2755, 2824, 2808, 2762,
     6082, 6082, 2830, 2812, 2834, 2781, 2783, 2840, 2819, 6082,
     6082, 6082, 6082, 6082, 6082, 2846, 2822, 2852, 2790, 2797,
     2796, 2793, 2789, 2787, 2867, 2873, 2877, 2809, 2881, 2796,

     2801, 2803, 2816, 2886, 2813, 2817, 2890, 2833, 2895, 2899,
     2903, 2907, 2825, 2827, 2842, 2850, 2854, 2854, 2911, 2845,
     2851, 2916, 2922, 2926, 2850, 2865, 2868, 2875, 2873, 2877,
     2862, 2866,    0, 2885, 2898, 2912, 2889, 6082, 2918, 2918,
     6082, 2904, 2911, 2896, 2909, 2923, 2911, 2925, 2924, 2929,
     2926, 2922, 2918, 2937, 2924, 2911, 2933, 2931, 2943, 2942,
     2945, 2925, 2944, 2949, 2942, 2935, 2953, 2942, 2940, 2943,
     2943, 6082, 2944, 2951, 2953, 2960, 2957, 2966, 2960, 2973,
     2974, 2960, 6082, 2957, 2948, 2978, 2979, 2951, 2981, 2974,
     2975, 2971, 2966, 6082, 6082, 2941, 3008, 6082, 2944, 2957,

     2946, 2963, 2948, 6082, 3016, 6082, 3017, 3021, 3003, 3025,
     3027, 3029, 2964, 2966, 2968, 2969, 2971, 2966, 2973, 6082,
     6082, 6082, 3042, 3026, 2981, 2985, 6082, 6082, 3049, 3031,
     2987, 2988, 2992, 3009, 2994, 3003, 3060, 3064, 2993, 3002,
     3013, 3070, 3002, 3005, 3020, 3012, 3013, 3025, 3017, 3082,
     3017, 3031, 3022, 3029, 3092, 3096, 3101, 3105, 3024, 3031,
     3035, 3035, 3044, 3044, 3111, 3056, 3115, 3061, 3068, 3121,
     3125, 3061, 3064, 3071, 3071, 3073, 3133, 3084, 3071, 3105,
     3120, 3104, 3108, 3103, 3105, 3117, 3105, 3107, 3110, 6082,
     3112, 6082, 6082, 3130, 6082, 3118, 3129, 3115, 3105, 3124,

     3130, 3124, 3118, 3128, 3123, 3129, 3137, 3128, 3129, 3130,
     3146, 3140, 3144, 3132, 3140, 3124, 3143, 3149, 3152, 3140,
     3134, 6082, 6082, 3144, 3143, 3144, 6082, 3145, 6082, 3150,
     3145, 3161, 6082, 3160, 3157, 3151, 3165, 3160, 3148, 3149,
     3172, 3176, 3147, 3126, 3133, 3183, 3134, 3185, 3186, 6082,
     3205, 3206, 6082, 3189, 3192, 3193, 3194, 3195, 3146, 3197,
     6082, 3165, 3153, 6082, 3167, 3146, 3156, 6082, 3221, 3225,
     3229, 3159, 3176, 3233, 3178, 3237, 3170, 3184, 3173, 3178,
     3189, 3193, 6082, 3179, 3184, 3180, 3175, 3250, 3193, 3254,
     3258, 3194, 3194, 3209, 3205, 3206, 3211, 3268, 3273, 3277,

     3208, 3219, 3213, 3281, 3219, 3230, 3226, 3229, 3226, 3290,
     3231, 3276, 3259, 3263, 3247, 3262, 3273, 3265, 3263, 3252,
     3267, 3281, 3276, 3274, 3273, 3258, 3274, 3285, 3290, 3287,
     3284, 3293, 3286, 3295, 3292, 3295, 3278, 3280, 3299, 3286,
     3304, 3300, 3298, 3293, 3300, 3307, 3282, 3284, 3311, 3301,
     3298, 3313, 3306, 3319, 3320, 3318, 3314, 3306, 3320, 3325,
     3322, 3327, 3320, 3300, 3326, 3327, 6082, 3315, 3287, 3288,
     3357, 3341, 3297, 3344, 6082, 3363, 3364, 3347, 3350, 3351,
     3352, 3353, 3314, 3355, 3306, 3314, 3309, 3357, 3317, 3380,
     3384, 3388, 3330, 3325, 3392, 3324, 3396, 3333, 3400, 3340,

     3352, 3405, 3356, 3409, 3356, 3354, 3359, 3341, 3416, 3359,
     3353, 3421, 3359, 3357, 3361, 3429, 3433, 3367, 3368, 3382,
     3375, 3373, 3385, 3378, 3379, 3387, 3375, 3428, 3424, 3423,
     3426, 6082, 3424, 3413, 6082, 3426, 3421, 3416, 3434, 6082,
     3428, 3431, 3436, 3418, 3419, 3426, 3419, 3431, 3426, 3427,
     3422, 3429, 3420, 3431, 3422, 3423, 3439, 3454, 3444, 3454,
     3446, 3441, 3441, 3449, 3457, 3442, 3458, 3448, 3446, 3466,
     3449, 3453, 6082, 3452, 3453, 3444, 3460, 3475, 3463, 3467,
     3473, 3467, 3469, 3462, 6082, 6082, 3463, 3445, 3447, 3506,
     6082, 3449, 3444, 6082, 3511, 3512, 3454, 3463, 3455, 3463,

     3455, 3461, 3467, 3463, 3468, 3466, 3465, 3472, 3477, 3529,
     3480, 3533, 3470, 3478, 3470, 3475, 3540, 3544, 3491, 3549,
     3494, 3553, 3482, 3493, 3557, 3504, 3498, 3562, 3568, 3501,
     3502, 3521, 3504, 3519, 3511, 3514, 3511, 3528, 3580, 3525,
     3525, 3585, 3536, 3534, 3555, 3551, 3560, 3568, 6082, 3566,
     3561, 3568, 3566, 3565, 3575, 3573, 3577, 3583, 3565, 6082,
     3582, 3579, 3574, 3589, 3582, 3587, 3563, 3575, 3576, 3592,
     3584, 3589, 3579, 3595, 6082, 3596, 3601, 3599, 3601, 3591,
     3585, 3602, 3605, 3608, 3606, 3612, 3599, 3600, 3603, 3603,
     3598, 3604, 3615, 3612, 3592, 3618, 3608, 6082, 3581, 3587,

     3584, 3645, 3649, 3650, 3588, 3588, 3586, 3586, 3592, 3595,
     3600, 3596, 6082, 3597, 3605, 6082, 3597, 3612, 3665, 3669,
     3612, 3606, 3622, 3606, 3620, 3676, 3626, 3625, 3622, 3631,
     3633, 3626, 3686, 3690, 3696, 3631, 3700, 3628, 3705, 3629,
     3630, 3646, 3709, 3641, 3643, 3715, 3649, 3719, 3725, 3658,
     3729, 3656, 3661, 3710, 3710, 3715, 3699, 3706, 3699, 3704,
     6082, 3714, 3708, 3719, 3707, 3714, 3718, 3710, 3723, 3729,
     3713, 3712, 3718, 3712, 3732, 3713, 3714, 3733, 3734, 3721,
     3711, 3712, 3725, 3726, 3745, 3735, 3745, 3735, 3746, 3731,
     3750, 3740, 3734, 3737, 3738, 3742, 6082, 3743, 3746, 3754,

     3749, 3742, 6082, 3753, 3723, 3724, 3729, 3735, 3790, 3732,
     3728, 3726, 3744, 3728, 3740, 3731, 3736, 3737, 3737, 3751,
     3744, 3804, 3740, 3740, 3741, 3810, 3747, 6082, 3755, 3750,
     3755, 3750, 3750, 3752, 3820, 3824, 3828, 3832, 3757, 3772,
     3836, 3840, 3763, 3770, 3782, 3844, 3848, 3787, 3783, 3855,
     6082, 3793, 3792, 3860, 6082, 3802, 3813, 3806, 3815, 3842,
     3830, 3830, 6082, 3845, 3821, 3832, 3824, 3850, 3853, 6082,
     3836, 3846, 3859, 3858, 3850, 6082, 3854, 3850, 3864, 3865,
     3858, 3859, 3839, 3850, 3870, 3869, 3858, 6082, 3855, 6082,
     3875, 3857, 3875, 3858, 3871, 3872, 6082, 3867, 6082, 6082,

     3879, 3866, 3880, 3877, 3882, 3872, 6082, 3842, 3853, 3843,
     3857, 3913, 3847, 3850, 3867, 3858, 3861, 3921, 3858, 3925,
     3929, 3861, 3869, 3873, 3884, 3936, 3871, 3940, 3874, 3883,
     3878, 3888, 3893, 3891, 3900, 3952, 3956, 3903, 3905, 3961,
     3965, 3897, 3912, 3969, 3908, 3973, 3911, 3909, 3978, 3927,
     3918, 3923, 6082, 3946, 3947, 6082, 3948, 6082, 3961, 3951,
     3959, 3971, 3964, 3954, 3955, 3967, 3962, 3948, 3967, 3968,
     3961, 3962, 3979, 3979, 3965, 3968, 3987, 3973, 3985, 3973,
     3983, 3973, 3991, 3980, 3984, 3979, 3993, 6082, 3969, 3989,
     3972, 3991, 4024, 4028, 3967, 3963, 4032, 4036, 4014, 3979,

     3973, 3973, 3974, 3982, 4045, 3986, 4050, 4029, 4054, 4038,
     4001, 4006, 4003, 3995, 4064, 4068, 4072, 4013, 4018, 4018,
     4020, 4011, 4013, 4017, 4015, 4019, 4019, 4025, 4087,    0,
     4091, 4023, 4036, 4095, 4101, 4034, 4040, 4107, 4045, 4043,
     4042, 6082, 4087, 4091, 4090, 4095, 4088, 4078, 4080, 4091,
     4071, 4083, 4089, 4098, 4075, 4094, 4104, 4105, 4104, 4092,
     4102, 6082, 4100, 4093, 4095, 4114, 4101, 4108, 4098, 4105,
     4111, 6082, 4109, 4119, 4118, 4104, 6082, 4145, 6082, 4149,
     4100, 4100, 6082, 4103, 4091, 4092, 4106, 4099, 4098, 4109,
     6082, 6082, 4093, 4094, 4096, 4101, 4166, 4172, 4102, 4176,

     4102, 4180, 4101, 4184, 4115, 4123, 4131, 4137, 4189,    0,
     4193, 4197, 4202, 4209, 4213, 4217, 4127, 4139, 4221, 4229,
     4148, 4162, 4168, 4174, 4175, 4185, 4188, 4190, 4191, 4208,
     4208, 4184, 4194, 4214, 6082, 4209, 4210, 4216, 4202, 4208,
     4212, 4216, 4196, 4207, 4214, 4214, 4221, 6082, 4211, 6082,
     4211, 4203, 4204, 4219, 4195, 4196, 4192, 4198, 4190, 4195,
     4194, 4196, 4197, 4192, 4208, 4212, 4195, 4203, 4211, 4212,
     4272, 4201, 4276, 4280, 4284, 4211, 4218, 4220, 4220, 4292,
     4296, 4300, 4304, 4308, 4312, 4316, 4226, 4320, 4324, 4328,
     4223, 6082, 4277, 4264, 4289, 4303, 4294, 4295, 4300, 4314,

     4298, 4311, 4304, 4315, 4300, 4317, 6082, 6082, 4310, 6082,
     4309, 6082, 4309, 4321, 4317, 4308, 4314, 4314, 4305, 4301,
     4312, 4313, 4322, 4288, 4297, 4298, 4299, 4304, 4360, 4298,
     4309, 4310, 4369, 4304, 4301, 4373, 4379, 4310, 4310, 6082,
     4385, 6082, 4389, 4393, 6082, 4398, 4314, 4332, 4331, 4405,
     6082, 4409, 4345, 4335, 4414, 4349, 4342, 4349, 4382, 4393,
     4385, 4371, 6082, 6082, 4372, 4391, 6082, 4401, 4402, 4381,
     4389, 4390, 6082, 4379, 4396, 4406, 4397, 6082, 6082, 4399,
     6082, 4394, 4399, 4400, 6082, 4382, 4371, 4374, 4373, 4375,
     4443, 6082, 4382, 4383, 4450, 4454, 6082, 4439, 4389, 4459,

     4463, 4467, 4473, 4403, 4397, 4478, 4483, 4487, 4491, 4497,
     4501, 4403, 4409, 4424, 4505, 4431, 4426, 4430, 4429, 4459,
     4480, 4473, 4484, 4485, 4480, 4473, 4480, 4475, 4466, 4467,
     6082, 4492, 6082, 4493, 4486, 6082, 4485, 4490, 4492, 4525,
     4472, 4461, 4475, 4531, 4535, 4539, 4543, 6082, 4547, 4551,
     4555, 4559, 4563, 4567, 4571, 4575, 4469, 4579, 4473, 4583,
     6082, 4488, 4490, 4508, 4585, 6082, 4529, 4523, 4564, 4548,
     6082, 4540, 4568, 4563, 4566, 4567, 4554, 4567, 4559, 4568,
     6082, 6082, 4602, 4538, 4547, 4541, 4608, 6082, 4612, 6082,
     4617, 6082, 4541, 4621, 6082, 4628, 4637, 4644, 4648, 4546,

     4550, 4652, 4656, 4553, 4565, 4559, 4559, 4660, 4579, 4569,
     4587, 4600, 4628, 4621, 4630, 4642, 4626, 4632, 4632, 4633,
     4637, 4638, 6082, 6082, 4604, 4674, 4612, 4678, 4617, 4682,
     4686, 4629, 4690, 4694, 4633, 4698, 4649, 4643, 4650, 4638,
     4654, 4683, 4666, 4659, 4687, 4691, 4684, 4680, 4674, 4676,
     4696, 4691, 4658, 4722, 6082, 4661, 4726, 6082, 4675, 4664,
     4731, 4735, 4742, 4747, 4665, 4673, 4670, 4751, 4687, 4725,
     4718, 4730, 4715, 4724, 4722, 4708, 6082, 6082, 4719, 4720,
     4708, 4759, 4695, 4713, 4765, 4769, 4712, 4712, 4710, 4712,
     4775, 4725, 4722, 4747, 4757, 4760, 4753, 4751, 4750, 4763,

     4757, 4758, 4720, 4771, 4731, 4723, 4737, 4730, 4730, 4777,
     4727, 4744, 4732, 4767, 4760, 4769, 4767, 6082, 6082, 4778,
     4770, 4772, 4749, 6082, 4745, 4751, 4757, 4757, 4750, 6082,
     4753, 4757, 4816, 6082, 4788, 4786, 4786, 4795, 4788, 4789,
     4760, 4762, 4762, 4758, 4762, 4836, 4778, 4838, 4840, 6082,
     4796, 6082, 6082, 4797, 6082, 4794, 4779, 4844, 4783, 4795,
     4798, 4850, 4784, 4854, 4802, 4822, 4821, 6082, 4860, 4864,
     6082, 4799, 4813, 4801, 4801, 4807, 4872, 6082, 4848, 4880,
     6082, 4884, 4876, 4815, 4823, 4822, 4889, 6082, 4841, 4896,
     4900, 4908, 4829, 4842, 4912, 4866, 4916, 4836, 4850, 4850,

     4920, 6082, 4896, 4859, 4924, 4867, 4892, 4876, 4931, 4869,
     4903, 4868, 4868, 4876, 4919, 4882, 4879, 4943, 4922, 4883,
     4895, 4949, 6082, 4926, 4890, 4886, 4922, 4956, 4899, 4935,
     4962, 6082, 4902, 4934, 4906, 4930, 4972, 6082, 4976, 6082,
     6082, 4996, 5004, 5012, 5020, 5028, 5036, 5044, 5052, 5060,
     5068, 5076, 5084, 5092, 5100, 5108, 5116, 5124, 5132, 5140,
     5148, 5156, 5164, 5172, 5180, 5188, 5196, 5204, 5212, 5220,
     5224, 5227, 5233, 5236, 5243, 5247, 5250, 5257, 5265, 5273,
     5281, 5289, 5297, 5305, 5313, 5321, 5329, 5337, 5345, 5353,
     5361, 5369, 5377, 5385, 5393, 5401, 5409, 5417, 5425, 5433,

     5441, 5449, 5457, 5465, 5473, 5481, 5489, 5497, 5505, 5513,
     5517, 5524, 5532, 5540, 5548, 5556, 5560, 5567, 5575, 5583,
     5591, 5599, 4968, 5603, 4975, 5605, 5610
    } ;

static yyconst flex_int16_t yy_def[3528] =
    {   0,
     3442, 3442, 3441,    3, 3443, 3443, 3444, 3444, 3445, 3445,
     3446, 3446, 3447, 3447, 3448, 3448, 3449, 3449, 3450, 3450,
     3451, 3451, 3441,   23, 3452, 3452, 3453, 3453, 3454, 3454,
     3455, 3455, 3456, 3456, 3457, 3457, 3458, 3458, 3441,   39,
     3441,   41, 3459, 3459, 3441,   45, 3460, 3460, 3461, 3461,
     3462, 3462, 3463, 3463, 3464, 3464, 3465, 3465, 3466, 3466,
     3467, 3467, 3468, 3468, 3469, 3469, 3470, 3470, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3471,
     3471, 3471, 3441, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3472, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3474, 3474, 3474, 3474, 3474,
     3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474,
     3441, 3474, 3474, 3474, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3475, 3475, 3475, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3476, 3441, 3441, 3441, 3441, 3477, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3478, 3479, 3441, 3441, 3441, 3471, 3471,
     3471, 3471, 3441, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3441, 3441, 3441, 3480, 3481, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3472, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3441, 3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473,

     3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3482, 3483, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3484, 3485, 3441, 3486, 3487,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3488, 3489, 3441, 3441, 3490, 3491, 3441,
     3441, 3441, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474,
     3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474,
     3474, 3474, 3474, 3474, 3474, 3474, 3474, 3441, 3474, 3441,

     3441, 3441, 3492, 3493, 3441, 3441, 3475, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3476, 3494, 3441, 3477, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3478, 3441, 3479,
     3441, 3441, 3441, 3441, 3471, 3471, 3471, 3441, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3495, 3496, 3497, 3441, 3498,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3482, 3441, 3483, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3499, 3500, 3501, 3441, 3502, 3441, 3441, 3503, 3441,
     3504, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3505, 3506, 3507, 3441, 3508, 3441, 3441, 3441, 3509,
     3441, 3510, 3441, 3441, 3441, 3441, 3511, 3511, 3511, 3511,

     3511, 3511, 3511, 3441, 3511, 3511, 3511, 3511, 3441, 3511,
     3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511,
     3511, 3511, 3511, 3441, 3512, 3513, 3514, 3441, 3515, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3516, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3517, 3517, 3517, 3441, 3517, 3517, 3517,
     3517, 3517, 3517, 3518, 3441, 3519, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3473, 3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3499, 3441, 3500, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3505, 3441, 3506, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3511, 3511, 3511, 3511, 3511,
     3511, 3511, 3441, 3441, 3511, 3441, 3511, 3441, 3511, 3511,
     3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511, 3511,
     3511, 3511, 3441, 3512, 3441, 3513, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3517, 3517, 3517, 3517, 3517, 3517, 3517, 3517,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3520, 3441, 3441, 3473,
     3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3521, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3522, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3511, 3511, 3511,
     3511, 3511, 3511, 3511, 3511, 3441, 3441, 3441, 3511, 3441,

     3511, 3441, 3511, 3511, 3441, 3511, 3511, 3511, 3511, 3441,
     3511, 3511, 3441, 3511, 3511, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3517, 3517, 3517, 3517, 3517, 3517, 3517, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3473, 3473, 3473, 3473, 3473, 3473,

     3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3511, 3511, 3511, 3441, 3441, 3511, 3511, 3441,
     3511, 3441, 3441, 3441, 3511, 3441, 3511, 3441, 3511, 3511,
     3441, 3511, 3441, 3511, 3511, 3441, 3511, 3511, 3441, 3441,
     3511, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3523, 3441, 3441, 3441, 3517, 3517, 3517, 3517, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3511, 3511,
     3511, 3441, 3511, 3511, 3441, 3511, 3441, 3441, 3441, 3511,
     3441, 3511, 3441, 3441, 3441, 3511, 3441, 3511, 3441, 3441,
     3441, 3441, 3511, 3511, 3441, 3441, 3441, 3511, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3524,
     3525, 3441, 3441, 3517, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441, 3473,
     3473, 3473, 3473, 3473, 3473, 3473, 3473, 3473, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3511, 3511, 3441, 3441, 3511, 3441, 3511,
     3441, 3441, 3441, 3441, 3511, 3441, 3511, 3441, 3441, 3441,
     3511, 3441, 3511, 3441, 3441, 3441, 3441, 3441, 3511, 3511,
     3441, 3441, 3441, 3511, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3524, 3441, 3441, 3526, 3441, 3517, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3473,
     3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3473,
     3473, 3473, 3473, 3473, 3473, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3511, 3511, 3511, 3441, 3441, 3441,
     3441, 3441, 3511, 3441, 3441, 3441, 3441, 3441, 3511, 3441,
     3511, 3441, 3441, 3441, 3441, 3441, 3441, 3511, 3441, 3441,
     3441, 3511, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3526, 3441, 3441, 3517, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3473, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3473, 3473, 3473, 3473,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3511, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3511, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3517, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3473, 3441, 3441, 3441, 3441, 3473,
     3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3473, 3473, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3473, 3473, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3473, 3473, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3473, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3473, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3527,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3527,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
        0, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441
    } ;

static yyconst flex_uint16_t yy_nxt[6161] =
    {   0,
     3441, 3441,   71,   72,   71,   72,   73,   74,   75,   76,
       74,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       77,   78,   79,   79,   79,   73,   73,   73,   80,   80,
       80,   80,   80,   80,   81,   80,   80,   80,   80,   80,
       82,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   73,   83,   73,   80,   80,   84,
       85,   86,   80,   87,   80,   80,   88,   80,   80,   80,
       80,   80,   89,   80,   90,   80,   80,   80,   80,   80,
       80,   80,   73,   73,   91,   92,  330,   91,   95,   96,
       95,   96,  209,  235,  366,  209,  235,  366,   93,  265,

      266,  454,  265,  277,  278,  331,  210,  236,   97,  378,
       97,  381,   98,  267,   98,  106,  107,  108,  106,   99,
      455,   99,  113,  114,  113,  114,  379,  109,  110,  379,
      111,  111,  111,  117,  118,  100, 1099,  100,  101,  101,
      102,  103,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  117,  118, 1101,  101,  101,  101,
      106,  107,  108,  106,  121,  122,  121,  122,  432,  115,
      433,  115,  109,  110,  324,  111,  111,  111,   73,  325,
      119,  277,  278,  323,  323,  323,  101,  101,  101,  985,
      986,  125,  126,  125,  126,  129,  130,  129,  130,  133,

      134,  119,  133,  134,  161,  162,  161,  162,  165,  166,
      460,  123,  461,  123,  101,  101,  101,  101,  102,  103,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  165,  166,  344,  101,  101,  101,  127,  345,
      127,  422,  131, 1102,  131,  427,  135,  341,  342,  135,
      341,  163,  423,  163,  428,  167,   73,  369,  369,  369,
      379,  343,  524,  379,  101,  101,  101,  367,  430,  368,
      368,  368,  431,  467,  467,  467,  468,  477,  574,  167,
      488,  469,  388,  489,  503,  490,  478, 1091,  575,  504,
      525, 1092,  101,  101,  136,  137,  138,  139,  137,  140,

      141,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      142,  142,  142,  136,  136,  136,  143,  142,  142,  142,
      142,  142,  144,  142,  142,  142,  142,  142,  145,  146,
      142,  147,  142,  148,  142,  142,  142,  142,  142,  149,
      142,  142,  136,  150,  151,  152,  142,  153,  154,  142,
      142,  155,  142,  142,  156,  142,  142,  142,  142,  142,
      157,  158,  142,  159,  142,  142,  142,  142,  142,  142,
      136,  136,  169,  170,  169,  170,  173,  174,  173,  174,
      177,  178,  177,  178,  181,  182,  181,  182,  185,  186,
      185,  186,  326,  508,  327,  327,  327,  379,  379,  379,

      379,  379,  379,  485,  328,  482,  379,  509,  482,  379,
      443,  584,  546,  499, 1103,  585,  483,  547,  444,  171,
      486,  171,  586,  175,  390,  175,  484,  179,  395,  179,
      445,  183,  389,  183,  328,  187,  383,  187,  188,  188,
      189,  190,  188,  191,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  192,  193,  193,  193,  188,  194,  188,
      195,  193,  193,  193,  193,  193,  196,  193,  193,  193,
      193,  193,  197,  198,  193,  199,  193,  200,  193,  193,
      193,  193,  193,  201,  193,  193,  188,  202,  188,  193,
      193,  193,  203,  193,  193,  204,  193,  193,  205,  193,

      193,  193,  193,  193,  206,  207,  193,  208,  193,  193,
      193,  193,  193,  193,  188,  188,  211,  211,  212,  213,
      211,  214,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  215,  216,  216,  216,  211,  217,  211,  218,  216,
      216,  216,  216,  216,  219,  216,  216,  216,  216,  216,
      220,  221,  216,  222,  216,  223,  216,  216,  216,  216,
      216,  224,  216,  216,  211,  225,  226,  216,  216,  227,
      228,  216,  229,  230,  216,  216,  231,  216,  216,  216,
      216,  216,  232,  233,  216,  234,  216,  216,  216,  216,
      216,  216,  211,  211,  238,  239,  238,  239,  370,  411,

      368,  368,  368,  379,  412,  492,  379, 1104,  571,  493,
      371,  500,  501,  494,  500,  517,  517,  517,  341,  342,
      572,  341,  495,  496,  533,  502,  533,  715,  652,  534,
      534,  534,  343,  653,  568,  716,  569, 1106,  391,  570,
      371,  240,  410,  240,   73,  241,  242,   76,  241,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  243,  244,
      245,  245,  245,   73,   73,   73,  246,  247,  248,  249,
      250,  251,  252,  249,  253,  249,  249,  249,  254,  255,
      256,  257,  249,  258,  259,  260,  249,  249,  249,  249,
      249,  249,   73,  261,   73,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  262,  263,  249,
      249,  249,  264,  249,  249,  249,  249,  249,  249,  249,
       73,   73,  269,  270,  269,  270,  273,  274,  273,  274,
      280,  281,  280,  281,  284,  285,  284,  285,  288,  289,
      288,  289,  292,  293,  292,  293,  296,  297,  296,  297,
      310,  311,  310,  311,  379,  559,  555,  379,  560,  379,
      556,  557,  379,  379,  561,  379,  379,  379,  379,  271,
      379,  271, 1107,  275,  312,  275,  312,  282,  313,  282,
      313,  286,  392,  286,  420,  290,  450,  290, 1108,  294,
      399,  294, 1109,  298,  380,  298,   73,  299,  300,   76,

      299,  301,   73,   73,   73,   73,   73,   73,  302,   73,
       73,  303,  304,  304,  304,   73,  305,   73,  384,  378,
      379,  424,  425,  379,  314,  315,  314,  315,  396,  401,
      378,  402,  410,  393,  438,  421,  576,  451,  982,  577,
      366,  385,  578,  366,   73,  307,   73,  379,  379,  386,
      379,  379,  379,  983,  379,  379,  426,  379,  436,  379,
      439,  387,  379,  437,  379,  440, 1111,  379,  317,  318,
      317,  318,  308,   73,   73,  299,  300,   76,  299,  301,
       73,   73,   73,   73,   73,   73,  302,   73,   73,  303,
      304,  304,  304,   73,  305,   73,  319,  394,  319,  397,

     1112,  410,  320,  438,  320,  400,  398,  434,  605,  379,
      434,  462,  379,  562,  462,  321,  563,  321,  564, 1114,
      706,  435,   73,  307,   73,  463,  707,  565, 1115,  464,
      369,  369,  369,  322,  465,  322,  470,  682,  471,  471,
      471,  379,  683,  606,  379,  323,  323,  323,  472,  935,
      308,   73,  349,  350,  351,  527,  352,  353,  354,  410,
      355, 1117,  730,  438,  356,  357,  358,  359,  380,  360,
      361,  362,  438,  580,  363,  364,  788,  581,  472,  531,
      531,  531,  990,  789,  326,  527,  327,  327,  327,  532,
      991,  379,  582,  583,  379,  370,  328,  368,  368,  368,

      369,  369,  369,  590,  590,  590,  796,  371, 1120,  592,
      589,  592,  797,  591,  593,  593,  593,  379,  379,  532,
      379,  379,  379, 1122,  379,  379,  328,  379,  379,  379,
      379,  379,  379,  379, 1123,  379,  379,  371,  379,  379,
      589,  603,  379,  591,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  604,  379,  434,  607,  718,  434,
      609,  725,  462,  719,  610,  462,  726,  467,  467,  467,
      435,  611,  608,  693,  693,  693,  463,  689,  704,  704,
      695,  704,  695,  694,  613,  696,  696,  696,  614,  470,
      615,  471,  471,  471,  709,  709, 1126,  709,  802,  618,

     1127,  472,  616,  617,  803,  500,  501,  689,  500,  776,
      619,  620,  777,  694,  517,  517,  517,  621,  749,  502,
      749,  622, 1128,  750,  750,  750,  531,  531,  531, 1129,
      379,  472,  752,  379,  752, 1130,  532,  753,  753,  753,
      534,  534,  534,  534,  534,  534,  798,  980,  811,  799,
      811, 1131, 1132,  812,  812,  812, 1133,  981,  800,  590,
      590,  590,  593,  593,  593,  813,  532,  813, 1134,  591,
      814,  814,  814,  593,  593,  593,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  825,  379, 1135,  379,  379,  591,

      379, 1136,  379, 1137,  824,  379,  826,  827,  379,  379,
      829,  379,  379,  379,  832,  379,  379, 1138,  379,  379,
      831,  379,  379,  901,  379,  901, 1139, 1140,  902,  902,
      902, 1141,  828,  379,  830, 1142,  379,  693,  693,  693,
      696,  696,  696, 1143,  904,  834,  904,  694, 1144,  905,
      905,  905,  696,  696,  696,  704,  704, 1145,  704,  835,
      914,  914, 1146,  914,  836,  750,  750,  750,  837,  841,
      916,  916,  839,  916, 1147,  838,  843,  694,  840,  709,
      709, 1150,  709, 1020,  939,  939,  842,  939,  943,  943,
     1148,  943,  944,  944, 1149,  944,  750,  750,  750,  753,

      753,  753,  753,  753,  753,  962,  963,  379,  962, 1151,
      379,  913,  812,  812,  812,  812,  812,  812,  814,  814,
      814,  814,  814,  814,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  918,  379,  379,  379,  379,  379,  379,
      379,  379, 1152,  379, 1153, 1025,  379, 1022, 1023,  379,
      379,  379, 1024,  379,  379, 1064, 1065, 1154, 1064, 1021,
     1026, 1155, 1085, 1086, 1028, 1085,  902,  902,  902,  902,
      902,  902, 1027, 1037,  905,  905,  905,  905,  905,  905,
      914,  914, 1156,  914,  916,  916, 1157,  916, 1158, 1032,

     1159, 1033, 1160, 1105, 1105, 1030, 1105, 1029, 1110, 1110,
     1031, 1110, 1113, 1113, 1161, 1113, 1034, 1162, 1163, 1035,
     1036, 1116, 1116, 1164, 1116, 1118, 1119, 1165, 1118,  939,
      939, 1166,  939,  943,  943, 1167,  943,  944,  944, 1168,
      944,  962,  963, 1169,  962,  962,  963, 1170,  962, 1097,
     1171, 1172, 1175, 1100, 1176, 1177, 1178, 1179, 1098, 1180,
     1173, 1174, 1181, 1182, 1183, 1184, 1185, 1186, 1186, 1188,
     1186, 1187, 1187, 1190, 1187, 1189, 1189, 1191, 1189, 1193,
     1194, 1211,  379,  379, 1121,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379, 1124,  379,  379,  379, 1125,  379,  379,  379,  379,
      379,  379, 1212,  379, 1213,  379, 1197, 1198,  379, 1214,
      379, 1195, 1201,  379, 1215, 1216,  379, 1199, 1200,  379,
      379, 1202, 1217,  379, 1219, 1220, 1221, 1222, 1196, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1203,
     1233, 1234, 1064, 1235, 1237, 1064, 1238, 1064, 1235, 1204,
     1064, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1206, 1205, 1249, 1207, 1250, 1251, 1085, 1086, 1252,
     1085, 1208, 1085, 1086, 1253, 1085, 1254, 1255, 1209, 1256,
     1256, 1258, 1256, 1259, 1210, 1260, 1260, 1261, 1260, 1262,

     1263, 1264, 1265, 1266, 1267, 1268, 1268, 1257, 1268, 1269,
     1270, 1105, 1105, 1272, 1105, 1273, 1273, 1274, 1273, 1275,
     1110, 1110, 1277, 1110, 1278, 1113, 1113, 1281, 1113, 1280,
     1280, 1284, 1280, 1116, 1116, 1286, 1116, 1118, 1119, 1287,
     1118, 1118, 1119, 1288, 1118, 1283, 1283, 1289, 1283, 1285,
     1285, 1290, 1285, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1271, 1316,
     1317, 1318, 1319, 1320, 1321, 1276, 1322, 1323, 1324, 1279,
     1325, 1326, 1327, 1328, 1282, 1329, 1330, 1331, 1332, 1333,

     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1186, 1186, 1346, 1186, 1187, 1187, 1348, 1187, 1189, 1189,
     1349, 1189, 1350, 1351,  379,  379,  379,  379,  379,  379,
      379,  379, 1371,  379,  379, 1359, 1360, 1345, 1359,  379,
     1372,  379,  379,  379,  379, 1373,  379,  379, 1353,  379,
      379,  379,  379, 1352,  379, 1361,  379,  379,  379,  379,
      379,  379, 1374, 1375, 1344, 1354, 1358,  379, 1363, 1356,
      379, 1347, 1355, 1377, 1378, 1379, 1357, 1364, 1376, 1376,
     1380, 1376, 1383, 1381, 1381, 1362, 1381, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1397, 1393, 1395, 1366,

     1365, 1400, 1401, 1382, 1394, 1396, 1402, 1403, 1369, 1368,
     1398, 1398, 1404, 1398, 1405, 1406, 1407, 1408, 1409, 1367,
     1410, 1411, 1256, 1256, 1413, 1256, 1370, 1414, 1412, 1412,
     1399, 1412, 1260, 1260, 1416, 1260, 1417, 1418, 1419, 1420,
     1257, 1421, 1422, 1268, 1268, 1426, 1268, 1425, 1425, 1427,
     1425, 1428, 1273, 1273, 1432, 1273, 1430, 1430, 1433, 1430,
     1431, 1431, 1434, 1431, 1435, 1435, 1436, 1435, 1280, 1280,
     1423, 1280, 1438, 1439, 1283, 1283, 1441, 1283, 1285, 1285,
     1444, 1285, 1443, 1443, 1445, 1443, 1446, 1447, 1447, 1447,
     1449, 1449, 1449, 1451, 1452, 1453, 1454, 1455, 1415, 1424,

     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1442, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1429,
     1474, 1448, 1475, 1476, 1437, 1477, 1478, 1479, 1480, 1481,
     1440, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
     1442, 1491, 1493, 1494, 1498, 1495, 1496, 1499, 1500, 1501,
     1502, 1503, 1504, 1505, 1506, 1506, 1492, 1506, 1507, 1508,
     1509, 1510, 1497, 1511,  379,  379, 1511,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379, 1519,  379,  379,
      379, 1359, 1360,  379, 1359, 1360, 1360,  379, 1360,  379,
      379, 1529,  379, 1530, 1514, 1515, 1516, 1531, 1518,  379,

     1517, 1361,  379,  379,  379, 1361,  379,  379,  380, 1532,
     1512,  379, 1520,  379,  379, 1533,  379,  379, 1521, 1535,
      379, 1376, 1376, 1536, 1376, 1537, 1513, 1522, 1538, 1381,
     1381, 1525, 1381, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1551, 1552, 1398, 1398, 1382,
     1398, 1553, 1554, 1524, 1523, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1526, 1562, 1564, 1563, 1563, 1399, 1563, 1565,
     1412, 1412, 1568, 1412, 1566, 1566, 1534, 1566, 1569, 1570,
     1528, 1527, 1571, 1571, 1573, 1571, 1574, 1575, 1576, 1577,
     1578, 1579, 1567, 1425, 1425, 1581, 1425, 1582, 1583, 1584,

     1572, 1430, 1430, 1588, 1430, 1431, 1431, 1589, 1431, 1590,
     1435, 1435, 1593, 1435, 1592, 1592, 1594, 1592, 1595, 1596,
     1597, 1598, 1602, 1443, 1443, 1605, 1443, 1600, 1600, 1608,
     1600, 1601, 1601, 1609, 1601, 1447, 1447, 1447, 1449, 1449,
     1449, 1606, 1606, 1606, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1617, 1618, 1633, 1634, 1635, 1636, 1580, 1637, 1638,
     1639, 1640, 1619, 1620, 1587, 1585, 1586, 1641, 1642, 1448,
     1643, 1644, 1603, 1621, 1645, 1591, 1599, 1646, 1622, 1623,
     1624, 1625, 1626, 1627, 1628, 1647, 1629, 1648, 1649, 1650,
     1630, 1651, 1631, 1652, 1653, 1654, 1655, 1656, 1632, 1657,

     1658, 1659, 1660, 1661, 1662, 1663, 1664, 1506, 1506, 1666,
     1506, 1667, 1668, 1669, 1511,  379,  379, 1511,  379,  379,
      379, 1672, 1673,  379, 1672, 1675, 1676, 1696, 1675, 1678,
     1679, 1697, 1678, 1681, 1682,  379, 1681, 1698,  379,  379,
     1670, 1674,  379, 1684, 1685, 1677, 1684,  379, 1699, 1680,
      379, 1687, 1688, 1683, 1687, 1691,  379,  379, 1690,  379,
      379,  379, 1665, 1686,  379,  379, 1700, 1671,  379, 1701,
     1702, 1689, 1703, 1704, 1705, 1705, 1709, 1705, 1707, 1707,
     1710, 1707, 1711, 1712, 1713, 1714, 1727, 1715, 1715, 1692,
     1715, 1728, 1717, 1717, 1706, 1717, 1719, 1719, 1708, 1719,

     1729, 1721, 1721, 1730, 1721, 1723, 1723, 1716, 1723, 1731,
     1732, 1693, 1718, 1733, 1725, 1725, 1720, 1725, 1694, 1735,
     1695, 1722, 1736, 1563, 1563, 1724, 1563, 1566, 1566, 1737,
     1566, 1738, 1739, 1739, 1726, 1739, 1571, 1571, 1743, 1571,
     1740, 1740, 1746, 1740, 1747, 1567, 1741, 1741, 1748, 1741,
     1742, 1742, 1749, 1742, 1572, 1744, 1744, 1750, 1744, 1745,
     1745, 1751, 1745, 1752, 1753, 1754, 1755, 1756, 1757, 1757,
     1758, 1757, 1759, 1592, 1592, 1761, 1592, 1762, 1763, 1764,
     1765, 1765, 1766, 1765, 1767, 1600, 1600, 1605, 1600, 1773,
     1734, 1601, 1601, 1774, 1601, 1770, 1770, 1775, 1770, 1606,

     1606, 1606, 1776, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1777, 1787, 1788, 1790, 1791, 1778, 1793, 1795, 1792,
     1797, 1796, 1798, 1799, 1801, 1802, 1804, 1794, 1789, 1805,
     1800, 1807, 1808, 1771, 1809, 1810, 1803, 1768, 1760, 1811,
     1812, 1813, 1814, 1815, 1816, 1817, 1769, 1818, 1823, 1806,
     1819, 1820, 1821, 1822, 1824, 1825, 1826, 1827, 1828, 1829,
     1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
     1840, 1841, 1842, 1843, 1844, 1845,  379, 1844, 1848,  379,
     1672, 1673, 1849, 1672, 1673, 1673, 1850, 1673, 1675, 1676,
     1851, 1675, 1676, 1676, 1846, 1676, 1678, 1679, 1852, 1678,

     1674, 1853, 1679, 1679, 1674, 1679,  379,  380, 1677,  379,
     1681, 1682, 1677, 1681,  379,  380, 1680,  379, 1682, 1682,
     1861, 1682, 1680,  380, 1684, 1685, 1862, 1684, 1685, 1685,
     1683, 1685, 1687, 1688, 1863, 1687, 1857,  380, 1683,  379,
     1864, 1865,  379, 1847, 1686, 1866, 1688, 1688, 1686, 1688,
     1867,  380, 1689, 1854, 1855,  379, 1854,  379,  379,  380,
      379, 1868, 1868, 1870, 1868, 1871, 1689, 1705, 1705, 1858,
     1705, 1707, 1707, 1856, 1707, 1872, 1873, 1873, 1875, 1873,
     1876, 1869, 1859, 1877, 1880, 1878, 1878, 1706, 1878, 1524,
     1881, 1708, 1715, 1715, 1882, 1715, 1874, 1717, 1717, 1883,

     1717, 1884, 1885, 1719, 1719, 1879, 1719, 1721, 1721, 1888,
     1721, 1889, 1716, 1723, 1723, 1890, 1723, 1718, 1891, 1725,
     1725, 1860, 1725, 1720, 1892, 1886, 1886, 1722, 1886, 1893,
     1894, 1895, 1898, 1724, 1896, 1896, 1907, 1896, 1908, 1726,
     1897, 1897, 1911, 1897, 1912, 1887, 1739, 1739, 1913, 1739,
     1740, 1740, 1914, 1740, 1741, 1741, 1915, 1741, 1742, 1742,
     1916, 1742, 1904, 1904, 1917, 1904, 1744, 1744, 1920, 1744,
     1745, 1745, 1921, 1745, 1909, 1909, 1922, 1909, 1910, 1910,
     1924, 1910, 1757, 1757, 1899, 1757, 1919, 1919, 1925, 1919,
     1923, 1923, 1927, 1923, 1765, 1765, 1928, 1765, 1929, 1900,

     1930, 1770, 1770, 1901, 1770, 1773, 1932, 1933, 1934, 1935,
     1936, 1937, 1903, 1938, 1939, 1940, 1941, 1942, 1945, 1946,
     1947, 1943, 1902, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1944, 1957, 1905, 1906, 1958, 1959, 1960, 1918,
     1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
     1971, 1926, 1972, 1973, 1974, 1975, 1931, 1976, 1977, 1978,
     1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1988, 1989,
     1987, 1990, 1991, 1992, 1994, 1995, 1996, 1997, 1997, 1999,
     1997, 2000, 2001, 2002, 2003, 1844, 1845, 1993, 1844, 1845,
     1845, 2004, 1845,  379, 2006, 1998,  379, 1854, 1855, 2013,

     1854, 1855, 1855,  379, 1855, 1846,  379, 2007, 2008, 1846,
     2007,  379,  380,  379,  379, 2014,  379, 1856, 2015, 2016,
     2017, 1856, 2018, 2019,  380, 1868, 1868, 2009, 1868, 2020,
     2021, 1873, 1873, 2022, 1873, 2023, 2023, 2025, 2023, 2026,
     2027, 1878, 1878, 2028, 1878, 1869, 2031, 1886, 1886, 2032,
     1886, 1874, 2033, 2029, 2029, 2024, 2029, 2034, 2010, 2035,
     2005, 1879, 2036, 2041, 2043, 2044, 2011, 1887, 2037, 2037,
     2045, 2037, 2046, 2030, 1896, 1896, 2012, 1896, 1897, 1897,
     2048, 1897, 2042, 2042, 2049, 2042, 2038, 1904, 1904, 2051,
     1904, 2050, 2050, 2058, 2050, 2059, 1909, 1909, 2060, 1909,

     1910, 1910, 2061, 1910, 2055, 2055, 2062, 2055, 2057, 2057,
     2063, 2057, 1919, 1919, 2065, 1919, 2066, 2067, 2067, 2072,
     2067, 2073, 2056, 1923, 1923, 2074, 1923, 2070, 2070, 2075,
     2070, 2076, 2077, 2078, 2079, 2040, 2080, 2081, 2082, 2039,
     2083, 2084, 2085, 2086, 2087, 2071, 2088, 2089, 2090, 2091,
     2092, 2093, 2047, 2052, 2094, 2095, 2096, 2097, 2098, 2099,
     2053, 2100, 2101, 2102, 2103, 2104, 2112, 2054, 2105, 2108,
     2113, 2114, 2115, 2109, 2116, 2117, 2064, 2118, 2106, 2119,
     2120, 2110, 2111, 2121, 2122, 2123, 2126, 2068, 2069, 2124,
     2125, 2127, 2128, 2107, 2129, 2130, 2131, 2132, 2133, 2134,

     2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 1997,
     1997, 2144, 1997, 2145, 2146, 2147, 2148,  379, 2007, 2008,
      379, 2007, 2008, 2008, 2150, 2008,  379, 1998,  379,  379,
      379,  379, 2154,  379, 2155, 2149, 2156, 2157, 2009, 2158,
     2159, 2160, 2009, 2023, 2023,  380, 2023, 2161, 2162, 2163,
     2029, 2029, 2164, 2029, 2165, 2166, 2167, 2168, 2169, 2170,
     2172, 2037, 2037, 2024, 2037, 2171, 2171, 2173, 2171, 2174,
     2030, 2042, 2042, 2176, 2042, 2177, 2178, 2153, 2179, 2038,
     2180, 2181, 2182, 2050, 2050, 2184, 2050, 2185, 2186, 2187,
     2192, 2152, 2151, 2055, 2055, 2193, 2055, 2188, 2188, 2194,

     2188, 2183, 2057, 2057, 2195, 2057, 2190, 2190, 2196, 2190,
     2197, 2056, 2198, 2198, 2200, 2198, 2067, 2067, 2202, 2067,
     2203, 2205, 2070, 2070, 2191, 2070, 2204, 2204, 2206, 2204,
     2199, 2207, 2208, 2209, 2210, 2210, 2211, 2210, 2175, 2212,
     2071, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
     2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2189,
     2241, 2243, 2201, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
     2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2261,
     2262, 2242, 2263, 2264, 2260, 2265, 2266, 2267, 2268, 2269,

     2270, 2271, 2272, 2273, 2274, 2275,  379,  379, 2278,  379,
      379, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,
     2288, 2289, 2290, 2290, 2293, 2290, 2291, 2291, 2294, 2291,
     2171, 2171, 2296, 2171, 2295, 2295, 2298, 2295, 2297, 2297,
     2299, 2297, 2300, 2301, 2292, 2302, 2303, 2304, 2305, 2306,
     2307, 2188, 2188, 2308, 2188, 2190, 2190, 2276, 2190, 2309,
     2309, 2310, 2309, 2311, 2312, 2313, 2314, 2315, 2318, 2198,
     2198, 2277, 2198, 2191, 2316, 2316, 2319, 2316, 2317, 2317,
     2320, 2317, 2204, 2204, 2321, 2204, 2322, 2199, 2323, 2324,
     2325, 2210, 2210, 2327, 2210, 2328, 2329, 2330, 2331, 2332,

     2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2343,
     2344, 2345, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354,
     2355, 2346, 2356, 2357, 2342, 2358, 2359, 2360, 2361, 2362,
     2363, 2364, 2365, 2367, 2366, 2368, 2369, 2370, 2371, 2372,
     2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382,
     2383, 2384, 2385, 2386, 2387, 2326, 2388, 2389, 2390, 2390,
     2392, 2390, 2393, 2394,  379,  379, 2397,  379,  379, 2398,
     2399, 2400, 2401, 2402, 2403, 2404, 2391, 2405, 2406, 2407,
     2408, 2290, 2290, 2411, 2290, 2291, 2291, 2412, 2291, 2410,
     2410, 2414, 2410, 2295, 2295, 2416, 2295, 2297, 2297, 2418,

     2297, 2417, 2417, 2292, 2417, 2419, 2420, 2420, 2421, 2420,
     2422, 2422, 2423, 2422, 2424, 2425, 2426, 2309, 2309, 2427,
     2309, 2428, 2429, 2429, 2430, 2429, 2431, 2396, 2432, 2434,
     2316, 2316, 2395, 2316, 2317, 2317, 2435, 2317, 2436, 2437,
     2438, 2439, 2440, 2441, 2442, 2443, 2409, 2444, 2445, 2446,
     2447, 2448, 2449, 2450, 2451, 2452, 2453, 2413, 2454, 2455,
     2456, 2457, 2458, 2459, 2415, 2460, 2461, 2462, 2463, 2464,
     2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
     2475, 2476, 2477, 2479, 2480, 2481, 2433, 2482, 2483, 2484,
     2485, 2478, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493,

     2494, 2495, 2496, 2497, 2498, 2499, 2500, 2390, 2390, 2501,
     2390, 2502,  379,  379, 2505,  379,  379, 2506, 2507, 2508,
     2509, 2510, 2511, 2512, 2513, 2391, 2514, 2515, 2516, 2517,
     2410, 2410, 2518, 2410, 2519, 2519, 2521, 2519, 2522, 2523,
     2524, 2417, 2417, 2527, 2417, 2526, 2526, 2529, 2526, 2531,
     2420, 2420, 2520, 2420, 2422, 2422, 2532, 2422, 2533, 2533,
     2535, 2533, 2536, 2537, 2537, 2539, 2537, 2540, 2504, 2429,
     2429, 2503, 2429, 2541, 2542, 2543, 2534, 2544, 2545, 2546,
     2547, 2548, 2548, 2549, 2548, 2550, 2551, 2551, 2552, 2551,
     2553, 2554, 2555, 2556, 2557, 2525, 2558, 2559, 2560, 2561,

     2562, 2563, 2564, 2565, 2528, 2566, 2567, 2530, 2568, 2570,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
     2591, 2538, 2592, 2569, 2593, 2594, 2595, 2596, 2597, 2598,
     2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608,
      379,  379, 2610,  379,  379, 2611, 2612, 2613, 2614, 2615,
     2616, 2617, 2618, 2619, 2620, 2621, 2519, 2519, 2623, 2519,
     2622, 2622, 2624, 2622, 2625, 2626, 2627, 2526, 2526, 2629,
     2526, 2630, 2631, 2632, 2520, 2633, 2634, 2533, 2533, 2638,
     2533, 2635, 2635, 2640, 2635, 2628, 2643, 2636, 2636, 2644,

     2636, 2537, 2537, 2645, 2537, 2534, 2641, 2641, 2648, 2641,
     2646, 2646, 2649, 2646, 2609, 2637, 2650, 2650, 2652, 2650,
     2548, 2548, 2656, 2548, 2642, 2658, 2654, 2654, 2647, 2654,
     2551, 2551, 2659, 2551, 2651, 2660, 2661, 2662, 2663, 2664,
     2665, 2666, 2667, 2668, 2655, 2669, 2670, 2671, 2672, 2673,
     2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,
     2684, 2685, 2686, 2687, 2688, 2639, 2689, 2690, 2691, 2692,
     2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702,
     2703, 2704, 2705, 2706, 2653, 2657, 2707, 2708, 2709, 2710,
     2711,  379, 2713, 2714,  379, 2715, 2716, 2717, 2718, 2719,

     2720, 2721, 2722, 2723, 2724, 2622, 2622, 2725, 2622, 2726,
     2727, 2728, 2728, 2729, 2728, 2730, 2731, 2732, 2733, 2734,
     2735, 2635, 2635, 2738, 2635, 2636, 2636, 2739, 2636, 2736,
     2736, 2741, 2736, 2737, 2737, 2742, 2737, 2641, 2641, 2743,
     2641, 2740, 2740, 2637, 2740, 2646, 2646, 2745, 2646, 2744,
     2744, 2746, 2744, 2747, 2712, 2642, 2650, 2650, 2748, 2650,
     2749, 2654, 2654, 2647, 2654, 2750, 2751, 2752, 2753, 2754,
     2755, 2756, 2757, 2758, 2651, 2759, 2760, 2761, 2762, 2655,
     2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772,
     2773, 2774, 2775, 2777, 2778, 2779, 2776, 2780, 2781, 2782,

     2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792,
     2793, 2794, 2795, 2796, 2797, 2798, 2800, 2797, 2801, 2802,
     2803, 2804, 2805, 2805, 2806, 2805, 2807, 2807, 2811, 2807,
     2809, 2809, 2812, 2809, 2799, 2813, 2814, 2815, 2815, 2817,
     2815, 2728, 2728, 2819, 2728, 2820, 2808, 2821, 2822, 2823,
     2810, 2824, 2825, 2736, 2736, 2816, 2736, 2737, 2737, 2827,
     2737, 2828, 2740, 2740, 2831, 2740, 2829, 2829, 2832, 2829,
     2744, 2744, 2833, 2744, 2834, 2834, 2836, 2834, 2837, 2838,
     2838, 2839, 2838, 2840, 2830, 2841, 2842, 2843, 2844, 2845,
     2846, 2847, 2835, 2848, 2849, 2850, 2851, 2852, 2853, 2854,

     2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2818, 2863,
     2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873,
     2874, 2826, 2875, 2876, 2877, 2878, 2878, 2881, 2878, 2880,
     2880, 2882, 2880, 2797, 2798, 2883, 2797, 2798, 2798, 2884,
     2798, 2885, 2886, 2879, 2887, 2888, 2805, 2805, 2890, 2805,
     2891, 2807, 2807, 2799, 2807, 2809, 2809, 2799, 2809, 2892,
      380, 2893, 2894, 2895, 2896, 2815, 2815, 2899, 2815, 2897,
     2897, 2808, 2897, 2898, 2898, 2810, 2898, 2900, 2901, 2902,
     2903, 2904, 2905, 2816, 2906, 2907, 2908, 2909, 2829, 2829,
     2913, 2829, 2911, 2911, 2914, 2911, 2834, 2834, 2916, 2834,

     2917, 2889, 2915, 2915, 2919, 2915, 2830, 2920, 2838, 2838,
     2912, 2838, 2921, 2922, 2835, 2923, 2924, 2925, 2926, 2927,
     2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937,
     2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947,
     2948, 2949, 2950, 2951, 2953, 2954, 2878, 2878, 2952, 2878,
     2880, 2880, 2956, 2880, 2957, 2958, 2959, 2960, 2961, 2962,
     2963, 2964, 2965, 2966, 2879, 2967, 2968, 2897, 2897, 2970,
     2897, 2972, 2918, 2898, 2898, 2974, 2898, 2971, 2971, 2976,
     2971, 2973, 2973, 2977, 2973, 2975, 2975, 2978, 2975, 2979,
     2980, 2980, 2987, 2980, 2911, 2911, 2988, 2911, 2982, 2982,

     2991, 2982, 2992, 2983, 2983, 2955, 2983, 2993, 2981, 2994,
     2984, 2984, 2912, 2984, 2915, 2915, 2995, 2915, 2986, 2986,
     2996, 2986, 2989, 2989, 2997, 2989, 2998, 2999, 2985, 2969,
     2990, 2990, 3000, 2990, 3001, 3002, 3003, 3004, 3007, 3008,
     3009, 3005, 3010, 3006, 3011, 3012, 3013, 3014, 3015, 3016,
     3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026,
     3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036,
     3037, 3038, 3039, 2971, 2971, 3041, 2971, 2973, 2973, 3046,
     2973, 3043, 3043, 3047, 3043, 2975, 2975, 3048, 2975, 3049,
     3054, 3040, 3058, 2980, 2980, 3042, 2980, 3050, 3050, 3044,

     3050, 2982, 2982, 3045, 2982, 2983, 2983, 3059, 2983, 2984,
     2984, 2981, 2984, 3052, 3052, 3060, 3052, 2986, 2986, 3061,
     2986, 3055, 3055, 3051, 3055, 2989, 2989, 2985, 2989, 2990,
     2990, 3062, 2990, 3063, 3064, 3065, 3066, 3067, 3068, 3069,
     3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,
     3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,
     3090, 3091, 3091, 3093, 3091, 3094, 3095, 3098, 3099, 3053,
     3096, 3096, 3104, 3096, 3100, 3100, 3105, 3100, 3111, 3092,
     3102, 3102, 3056, 3102, 3112, 3057, 3106, 3106, 3097, 3106,
     3043, 3043, 3101, 3043, 3108, 3108, 3113, 3108, 3103, 3109,

     3109, 3114, 3109, 3115, 3107, 3117, 3050, 3050, 3044, 3050,
     3052, 3052, 3118, 3052, 3119, 3055, 3055, 3110, 3055, 3120,
     3121, 3122, 3123, 3124, 3125, 3126, 3128, 3129, 3130, 3131,
     3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141,
     3142, 3143, 3144, 3127, 3091, 3091, 3141, 3091, 3143, 3145,
     3146, 3147, 3147, 3148, 3147, 3096, 3096, 3149, 3096, 3152,
     3100, 3100, 3092, 3100, 3150, 3150, 3153, 3150, 3102, 3102,
     3116, 3102, 3157, 3097, 3151, 3151, 3158, 3151, 3101, 3106,
     3106, 3159, 3106, 3162, 3154, 3154, 3103, 3154, 3108, 3108,
     3163, 3108, 3109, 3109, 3164, 3109, 3165, 3107, 3155, 3155,

     3166, 3155, 3156, 3156, 3167, 3156, 3160, 3160, 3168, 3160,
     3110, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177,
     3178, 3179, 3180, 3181, 3161, 3182, 3183, 3183, 3184, 3183,
     3185, 3186, 3187, 3187, 3201, 3187, 3189, 3189, 3204, 3189,
     3191, 3191, 3205, 3191, 3147, 3147, 3206, 3147, 3194, 3194,
     3188, 3194, 3150, 3150, 3190, 3150, 3151, 3151, 3192, 3151,
     3196, 3196, 3207, 3196, 3198, 3198, 3195, 3198, 3154, 3154,
     3212, 3154, 3155, 3155, 3213, 3155, 3156, 3156, 3197, 3156,
     3202, 3202, 3199, 3202, 3160, 3160, 3208, 3160, 3214, 3208,
     3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3203, 3223,

     3193, 3224, 3161, 3183, 3183, 3226, 3183, 3227, 3228, 3187,
     3187, 3229, 3187, 3189, 3189, 3232, 3189, 3233, 3191, 3191,
     3235, 3191, 3194, 3194, 3236, 3194, 3237, 3188, 3238, 3196,
     3196, 3190, 3196, 3239, 3240, 3200, 3192, 3209, 3230, 3230,
     3195, 3230, 3210, 3241, 3211, 3198, 3198, 3197, 3198, 3231,
     3231, 3242, 3231, 3202, 3202, 3243, 3202, 3234, 3234, 3225,
     3234, 3208, 3244, 3199, 3208, 3245, 3246, 3247, 3248, 3249,
     3250, 3203, 3251, 3252, 3253, 3254, 3254, 3256, 3254, 3257,
     3257, 3259, 3257, 3230, 3230, 3260, 3230, 3231, 3231, 3263,
     3231, 3261, 3261, 3255, 3261, 3234, 3234, 3258, 3234, 3264,

     3264, 3265, 3264, 3266, 3267, 3268, 3269, 3270, 3271, 3262,
     3272, 3273, 3209, 3274, 3275, 3276, 3277, 3210, 3278, 3211,
     3279, 3280, 3281, 3254, 3254, 3282, 3254, 3257, 3257, 3283,
     3257, 3284, 3261, 3261, 3288, 3261, 3285, 3285, 3289, 3285,
     3290, 3255, 3293, 3286, 3286, 3258, 3286, 3294, 3264, 3264,
     3262, 3264, 3291, 3295, 3296, 3291, 3297, 3298, 3299, 3300,
     3301, 3302, 3303, 3304, 3305, 3306, 3285, 3285, 3308, 3285,
     3286, 3286, 3309, 3286, 3310, 3311, 3291, 3312, 3313, 3291,
     3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323,
     3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333,

     3334, 3335, 3336, 3337, 3338, 3287, 3339, 3292, 3340, 3341,
     3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3351, 3352,
     3349, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361,
     3363, 3292, 3366, 3367, 3368, 3350, 3307, 3362, 3362, 3364,
     3362, 3349, 3364, 3369, 3349, 3370, 3370, 3372, 3370, 3373,
     3374, 3362, 3362, 3376, 3362, 3364, 3377, 3378, 3364, 3350,
     3379, 3380, 3380, 3371, 3380, 3370, 3370, 3382, 3370, 3383,
     3384, 3385, 3386, 3387, 3389, 3393, 3387, 3392, 3392, 3381,
     3392, 3380, 3380, 3371, 3380, 3390, 3390, 3394, 3390, 3395,
     3387, 3388, 3396, 3387, 3399, 3365, 3400, 3390, 3390, 3381,

     3390, 3397, 3397, 3391, 3397, 3403, 3404, 3375, 3388, 3392,
     3392, 3365, 3392, 3401, 3405, 3391, 3401, 3397, 3397, 3406,
     3397, 3401, 3407, 3408, 3401, 3409, 3409, 3410, 3409, 3411,
     3412, 3402, 3409, 3409, 3414, 3409, 3415, 3416, 3417, 3402,
     3418, 3419, 3420, 3421, 3422, 3422, 3424, 3422, 3425, 3426,
     3422, 3422, 3427, 3422, 3428, 3429, 3430, 3431, 3431, 3433,
     3431, 3434, 3423, 3431, 3431, 3398, 3431, 3435, 3423, 3436,
     3437, 3438, 1450, 3439, 3439, 3432, 3439, 3439, 3439, 1607,
     3439, 3432, 1096, 1095, 1094, 1093, 1090, 1089, 3413, 1088,
     1087, 3440,  687, 1084,  897, 3440,   70,   70,   70,   70,

       70,   70,   70,   70,   94,   94,   94,   94,   94,   94,
       94,   94,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,  105,  105,  105,  105,  105,  112,  112,
      112,  112,  112,  112,  112,  112,  116,  116,  116,  116,
      116,  116,  116,  116,  120,  120,  120,  120,  120,  120,
      120,  120,  124,  124,  124,  124,  124,  124,  124,  124,
      128,  128,  128,  128,  128,  128,  128,  128,  132,  132,
      132,  132,  132,  132,  132,  132,  160,  160,  160,  160,
      160,  160,  160,  160,  164,  164,  164,  164,  164,  164,
      164,  164,  168,  168,  168,  168,  168,  168,  168,  168,

      172,  172,  172,  172,  172,  172,  172,  172,  176,  176,
      176,  176,  176,  176,  176,  176,  180,  180,  180,  180,
      180,  180,  180,  180,  184,  184,  184,  184,  184,  184,
      184,  184,  237,  237,  237,  237,  237,  237,  237,  237,
      268,  268,  268,  268,  268,  268,  268,  268,  272,  272,
      272,  272,  272,  272,  272,  272,  276,  276,  276,  276,
      276,  276,  276,  276,  279,  279,  279,  279,  279,  279,
      279,  279,  283,  283,  283,  283,  283,  283,  283,  283,
      287,  287,  287,  287,  287,  287,  287,  287,  291,  291,
      291,  291,  291,  291,  291,  291,  295,  295,  295,  295,

      295,  295,  295,  295,  306,  306,  306,  306,  306,  306,
      306,  306,  309,  309,  309,  309,  309,  309,  309,  309,
      316,  316,  316,  316,  316,  316,  316,  316,  329, 1083,
      329,  365, 1082,  365,  382, 1081, 1080,  382, 1079,  382,
      473, 1078,  473,  507,  507,  507,  507,  507,  507,  507,
      515,  515,  515,  515,  518, 1077,  518,  528,  528,  528,
      528,  528,  528,  528,  528,  530,  530, 1076,  530,  530,
      530,  530,  530,  548,  548,  548,  548,  548,  548,  548,
      548,  550,  550,  550,  550,  550,  550,  550,  550,  631,
      631,  631,  631,  631,  631,  631,  631,  633,  633, 1075,

      633,  633,  633,  633,  633,  654,  654,  654,  654,  654,
      654,  654,  654,  656,  656,  656,  656,  656,  656,  656,
      656,  659,  659,  659,  659,  659,  659,  659,  659,  661,
      661, 1074,  661,  661,  661,  661,  661,  684,  684,  684,
      684,  684,  684,  684,  684,  686,  686,  686,  686,  686,
      686,  686,  686,  690,  690,  690,  690,  690,  690,  690,
      690,  692,  692, 1073,  692,  692,  692,  692,  692,  727,
      727,  727,  727,  727,  727,  727,  727,  729,  729,  729,
      729,  729,  729,  729,  729,  739,  739,  739,  739,  739,
      739,  739,  739,  764,  764,  764,  764,  764,  764,  764,

      764,  766,  766,  766,  766,  766,  766,  766,  766,  548,
      548,  548,  548,  548,  548,  548,  548,  550,  550,  550,
      550,  550,  550,  550,  550,  871,  871,  871,  871,  871,
      871,  871,  871,  873,  873,  873,  873,  873,  873,  873,
      873,  654,  654,  654,  654,  654,  654,  654,  654,  656,
      656,  656,  656,  656,  656,  656,  656,  659,  659,  659,
      659,  659,  659,  659,  659,  661,  661, 1072,  661,  661,
      661,  661,  661,  896,  896,  896,  896,  896,  896,  896,
      896,  898,  898,  898,  898,  898,  898,  898,  898,  684,
      684,  684,  684,  684,  684,  684,  684,  686,  686,  686,

      686,  686,  686,  686,  686,  690,  690,  690,  690,  690,
      690,  690,  690,  692,  692, 1071,  692,  692,  692,  692,
      692,  473, 1070,  473,  934,  934,  934,  934,  934,  934,
      934,  934,  936,  936,  936,  936,  936,  936,  936,  936,
      727,  727,  727,  727,  727,  727,  727,  727,  729,  729,
      729,  729,  729,  729,  729,  729,  739,  739,  739,  739,
      739,  739,  739,  739,  329, 1069,  329,  764,  764,  764,
      764,  764,  764,  764,  764,  766,  766,  766,  766,  766,
      766,  766,  766, 1192, 1192, 1192, 1192, 1068, 1192, 1067,
     1192, 1218, 1218, 1218, 1218, 1066, 1218,  657, 1218, 1236,

     1236, 1236, 1236, 1063, 1236,  872, 1236, 1604, 1604, 1772,
     1772, 2910, 1062, 1061, 2910, 1060, 2910, 1059, 1058, 1057,
     1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047,
     1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1019,
     1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009,
     1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,  999,
      998,  997,  996,  995,  994,  993,  992,  989,  988,  987,
      984,  979,  978,  977,  976,  975,  974,  973,  972,  971,
      970,  969,  968,  967,  966,  965,  964,  551,  961,  765,
      960,  959,  958,  957,  956,  955,  954,  953,  952,  951,

      950,  949,  948,  947,  946,  740,  945,  942,  941,  940,
      938,  730,  937,  728,  730,  935,  933,  932,  931,  930,
      929,  928,  927,  926,  925,  924,  923,  922,  921,  920,
      919,  917,  915,  912,  911,  910,  909,  908,  907,  906,
      903,  691,  900,  687,  899,  685,  687,  897,  895,  894,
      893,  892,  891,  890,  889,  888,  887,  886,  885,  884,
      883,  882,  881,  880,  879,  878,  877,  876,  660,  875,
      657,  874,  655,  657,  872,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  860,  859,  858,  857,  856,
      855,  854,  853,  852,  632,  851,  850,  849,  848,  847,

      846,  845,  844,  833,  823,  822,  821,  820,  819,  818,
      817,  816,  815,  810,  809,  808,  807,  806,  805,  804,
      801,  795,  794,  793,  792,  791,  790,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  775,  774,  773,
      772,  771,  770,  769,  768,  551,  767,  549,  551,  765,
      763,  762,  761,  760,  759,  758,  757,  756,  755,  754,
      751,  529,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  514,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  728,  707,  724,  723,  722,  721,  720,  717,  714,
      713,  712,  711,  710,  708,  705,  703,  702,  701,  700,

      699,  698,  697,  691,  688,  687,  685,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  660,  658,  657,
      655,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  632,
      630,  629,  628,  627,  626,  625,  624,  623,  612,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  588,  587,
      579,  573,  567,  566,  558,  554,  553,  552,  551,  549,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  529,  526,  523,  522,  521,  520,  519,  516,  514,

      513,  512,  511,  510,  506,  505,  494,  485,  498,  497,
      491,  487,  481,  480,  479,  476,  475,  474,  466,  459,
      458,  457,  456,  453,  452,  438,  449,  448,  447,  446,
      442,  441,  438,  438,  438,  438,  438,  429,  419,  418,
      417,  416,  415,  414,  413,  410,  410,  410,  410,  410,
      409,  408,  407,  406,  405,  404,  403,  378,  378,  378,
      378,  378,  377,  376,  375,  374,  373,  372,  348,  347,
      346,  340,  339,  338,  337,  336,  335,  334,  333,  332,
     3441,   69, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441
    } ;

static yyconst flex_int16_t yy_chk[6161] =
    {   0,
        0,    0,    1,    1,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    4,   81,    4,    5,    5,
        6,    6,   40,   42,  106,   40,   42,  106,    4,   46,

       46,  229,   46,   51,   51,   81,   40,   42,    5,  141,
        6,  141,    5,   46,    6,    9,    9,    9,    9,    5,
      229,    6,   11,   11,   12,   12,  142,    9,    9,  142,
        9,    9,    9,   13,   13,    5,  915,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   14,   14,  917,    7,    7,    7,
       10,   10,   10,   10,   15,   15,   16,   16,  208,   11,
      208,   12,   10,   10,   78,   10,   10,   10,   51,   78,
       13,   52,   52,   77,   77,   77,    7,    7,    7,  787,
      787,   17,   17,   18,   18,   19,   19,   20,   20,   21,

       21,   14,   22,   22,   25,   25,   26,   26,   27,   27,
      234,   15,  234,   16,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,   28,   28,   93,    8,    8,    8,   17,   93,
       18,  203,   19,  918,   20,  205,   21,   91,   91,   22,
       91,   25,  203,   26,  205,   27,   52,  110,  110,  110,
      146,   91,  321,  146,    8,    8,    8,  109,  207,  109,
      109,  109,  207,  243,  243,  243,  244,  250,  358,   28,
      257,  244,  146,  257,  267,  257,  250,  909,  358,  267,
      321,  909,    8,    8,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   29,   29,   30,   30,   31,   31,   32,   32,
       33,   33,   34,   34,   35,   35,   36,   36,   37,   37,
       38,   38,   79,  282,   79,   79,   79,  147,  143,  148,

      147,  143,  148,  255,   79,  262,  153,  282,  254,  153,
      220,  362,  343,  262,  919,  362,  254,  343,  220,   29,
      255,   30,  362,   31,  148,   32,  254,   33,  153,   34,
      220,   35,  147,   36,   79,   37,  143,   38,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   43,   43,   44,   44,  111,  192,

      111,  111,  111,  149,  192,  259,  149,  920,  356,  259,
      111,  265,  265,  259,  265,  304,  304,  304,  341,  341,
      356,  341,  259,  259,  328,  265,  328,  491,  435,  328,
      328,  328,  341,  435,  355,  491,  355,  922,  149,  355,
      111,   43,  192,   44,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   47,   47,   48,   48,   49,   49,   50,   50,
       53,   53,   54,   54,   55,   55,   56,   56,   57,   57,
       58,   58,   59,   59,   60,   60,   61,   61,   62,   62,
       65,   65,   66,   66,  157,  351,  349,  157,  351,  154,
      349,  349,  154,  144,  351,  159,  144,  137,  159,   47,
      137,   48,  923,   49,   65,   50,   66,   53,   65,   54,
       66,   55,  150,   56,  202,   57,  225,   58,  924,   59,
      157,   60,  925,   61,  137,   62,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  144,  137,
      145,  204,  204,  145,   65,   65,   66,   66,  154,  159,
      150,  159,  202,  150,  225,  202,  359,  225,  785,  359,
      366,  145,  359,  366,   63,   63,   63,  152,  155,  145,
      152,  155,  156,  785,  158,  156,  204,  158,  210,  382,
      215,  145,  382,  210,  385,  215,  927,  385,   67,   67,
       68,   68,   63,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   67,  152,   68,  155,

      928,  210,   67,  215,   68,  158,  156,  209,  385,  386,
      209,  235,  386,  352,  235,   67,  352,   68,  352,  930,
      483,  209,   64,   64,   64,  235,  483,  352,  931,  236,
      367,  367,  367,   67,  236,   68,  245,  463,  245,  245,
      245,  379,  463,  386,  379,  323,  323,  323,  245,  934,
       64,   64,  100,  100,  100,  323,  100,  100,  100,  209,
      100,  935,  936,  235,  100,  100,  100,  100,  379,  100,
      100,  100,  236,  361,  100,  100,  571,  361,  245,  326,
      326,  326,  791,  571,  327,  323,  327,  327,  327,  326,
      791,  384,  361,  361,  384,  368,  327,  368,  368,  368,

      369,  369,  369,  370,  370,  370,  578,  368,  938,  371,
      369,  371,  578,  370,  371,  371,  371,  387,  383,  326,
      387,  383,  388,  940,  389,  388,  327,  389,  390,  391,
      394,  390,  391,  394,  942,  395,  396,  368,  395,  396,
      369,  383,  397,  370,  398,  397,  399,  398,  400,  399,
      401,  400,  402,  401,  384,  402,  434,  387,  493,  434,
      389,  502,  462,  493,  390,  462,  502,  467,  467,  467,
      434,  391,  388,  470,  470,  470,  462,  467,  481,  481,
      472,  481,  472,  470,  394,  472,  472,  472,  394,  471,
      395,  471,  471,  471,  485,  485,  945,  485,  581,  398,

      947,  471,  396,  397,  581,  500,  500,  467,  500,  560,
      399,  400,  560,  470,  517,  517,  517,  401,  527,  500,
      527,  402,  948,  527,  527,  527,  531,  531,  531,  949,
      604,  471,  532,  604,  532,  950,  531,  532,  532,  532,
      533,  533,  533,  534,  534,  534,  579,  784,  589,  579,
      589,  952,  953,  589,  589,  589,  954,  784,  579,  590,
      590,  590,  592,  592,  592,  591,  531,  591,  955,  590,
      591,  591,  591,  593,  593,  593,  603,  605,  606,  603,
      605,  606,  607,  608,  609,  607,  608,  609,  610,  611,
      613,  610,  611,  613,  604,  614,  956,  615,  614,  590,

      615,  957,  616,  959,  603,  616,  605,  606,  617,  618,
      608,  617,  618,  619,  611,  620,  619,  960,  620,  621,
      610,  622,  621,  689,  622,  689,  966,  967,  689,  689,
      689,  968,  607,  824,  609,  969,  824,  693,  693,  693,
      695,  695,  695,  970,  694,  613,  694,  693,  971,  694,
      694,  694,  696,  696,  696,  704,  704,  972,  704,  614,
      705,  705,  973,  705,  615,  749,  749,  749,  616,  620,
      707,  707,  618,  707,  974,  617,  622,  693,  619,  709,
      709,  976,  709,  824,  732,  732,  621,  732,  736,  736,
      975,  736,  737,  737,  975,  737,  750,  750,  750,  752,

      752,  752,  753,  753,  753,  767,  767,  825,  767,  977,
      825,  704,  811,  811,  811,  812,  812,  812,  813,  813,
      813,  814,  814,  814,  826,  827,  828,  826,  827,  828,
      829,  830,  831,  829,  830,  831,  832,  834,  835,  832,
      834,  835,  836,  709,  837,  836,  838,  837,  839,  838,
      840,  839,  978,  840,  979,  829,  841,  826,  827,  841,
      842,  843,  828,  842,  843,  874,  874,  980,  874,  825,
      830,  981,  899,  899,  832,  899,  901,  901,  901,  902,
      902,  902,  831,  842,  904,  904,  904,  905,  905,  905,
      914,  914,  982,  914,  916,  916,  983,  916,  984,  837,

      985,  838,  986,  921,  921,  835,  921,  834,  926,  926,
      836,  926,  929,  929,  987,  929,  839,  988,  989,  840,
      841,  932,  932,  990,  932,  937,  937,  991,  937,  939,
      939,  992,  939,  943,  943,  993,  943,  944,  944,  994,
      944,  961,  961,  995,  961,  962,  962,  996,  962,  914,
      997,  999, 1000,  916, 1001, 1002, 1003, 1004,  914, 1005,
      999,  999, 1006, 1007, 1008, 1009, 1010, 1011, 1011, 1013,
     1011, 1012, 1012, 1015, 1012, 1014, 1014, 1016, 1014, 1018,
     1019, 1038, 1020, 1021,  939, 1020, 1021, 1022, 1023, 1024,
     1022, 1023, 1024, 1026, 1025, 1027, 1026, 1025, 1027, 1028,

     1029,  943, 1028, 1029, 1030,  944, 1031, 1030, 1032, 1031,
     1033, 1032, 1039, 1033, 1040, 1034, 1022, 1023, 1034, 1041,
     1035, 1020, 1026, 1035, 1042, 1043, 1036, 1024, 1025, 1036,
     1037, 1027, 1044, 1037, 1047, 1048, 1049, 1050, 1021, 1051,
     1052, 1053, 1054, 1054, 1055, 1057, 1058, 1059, 1060, 1028,
     1061, 1062, 1063, 1063, 1067, 1063, 1068, 1064, 1064, 1029,
     1064, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078,
     1080, 1032, 1030, 1081, 1034, 1082, 1083, 1084, 1084, 1087,
     1084, 1035, 1085, 1085, 1088, 1085, 1089, 1090, 1036, 1091,
     1091, 1092, 1091, 1093, 1037, 1094, 1094, 1095, 1094, 1096,

     1097, 1098, 1099, 1100, 1101, 1102, 1102, 1091, 1102, 1103,
     1104, 1105, 1105, 1106, 1105, 1107, 1107, 1108, 1107, 1109,
     1110, 1110, 1111, 1110, 1112, 1113, 1113, 1115, 1113, 1114,
     1114, 1121, 1114, 1116, 1116, 1123, 1116, 1117, 1117, 1124,
     1117, 1118, 1118, 1125, 1118, 1120, 1120, 1126, 1120, 1122,
     1122, 1127, 1122, 1128, 1129, 1130, 1131, 1133, 1134, 1135,
     1137, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148,
     1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1105, 1158,
     1159, 1160, 1161, 1162, 1163, 1110, 1164, 1165, 1166, 1113,
     1167, 1168, 1169, 1170, 1116, 1171, 1172, 1173, 1174, 1175,

     1176, 1177, 1178, 1179, 1180, 1180, 1181, 1182, 1183, 1185,
     1186, 1186, 1188, 1186, 1187, 1187, 1190, 1187, 1189, 1189,
     1191, 1189, 1193, 1194, 1195, 1196, 1197, 1195, 1196, 1197,
     1198, 1199, 1211, 1198, 1199, 1200, 1200, 1187, 1200, 1201,
     1212, 1203, 1201, 1202, 1203, 1213, 1202, 1204, 1196, 1205,
     1204, 1206, 1205, 1195, 1206, 1200, 1207, 1208, 1209, 1207,
     1208, 1209, 1214, 1215, 1186, 1197, 1199, 1210, 1202, 1198,
     1210, 1189, 1197, 1217, 1219, 1220, 1198, 1203, 1216, 1216,
     1221, 1216, 1223, 1222, 1222, 1201, 1222, 1224, 1225, 1228,
     1229, 1230, 1231, 1231, 1234, 1237, 1241, 1239, 1240, 1205,

     1204, 1243, 1244, 1222, 1239, 1240, 1245, 1246, 1208, 1207,
     1242, 1242, 1247, 1242, 1248, 1249, 1251, 1252, 1253, 1206,
     1254, 1255, 1256, 1256, 1258, 1256, 1210, 1259, 1257, 1257,
     1242, 1257, 1260, 1260, 1261, 1260, 1262, 1263, 1264, 1265,
     1256, 1266, 1267, 1268, 1268, 1270, 1268, 1269, 1269, 1271,
     1269, 1272, 1273, 1273, 1276, 1273, 1274, 1274, 1277, 1274,
     1275, 1275, 1277, 1275, 1278, 1278, 1279, 1278, 1280, 1280,
     1268, 1280, 1281, 1282, 1283, 1283, 1284, 1283, 1285, 1285,
     1287, 1285, 1286, 1286, 1288, 1286, 1289, 1290, 1290, 1290,
     1291, 1291, 1291, 1292, 1293, 1294, 1295, 1296, 1260, 1268,

     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1305, 1306, 1307,
     1308, 1285, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1273,
     1317, 1290, 1318, 1319, 1280, 1320, 1321, 1323, 1324, 1325,
     1283, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1285, 1335, 1336, 1337, 1338, 1337, 1337, 1339, 1340, 1341,
     1342, 1343, 1344, 1345, 1346, 1346, 1335, 1346, 1347, 1348,
     1349, 1350, 1337, 1351, 1352, 1353, 1351, 1352, 1353, 1354,
     1355, 1356, 1354, 1355, 1356, 1357, 1358, 1361, 1357, 1358,
     1363, 1359, 1359, 1363, 1359, 1360, 1360, 1362, 1360, 1364,
     1362, 1371, 1364, 1372, 1354, 1355, 1356, 1373, 1358, 1365,

     1357, 1359, 1365, 1366, 1367, 1360, 1366, 1367, 1359, 1374,
     1352, 1368, 1362, 1369, 1368, 1375, 1369, 1370, 1363, 1377,
     1370, 1376, 1376, 1378, 1376, 1379, 1353, 1364, 1380, 1381,
     1381, 1367, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1398, 1381,
     1398, 1399, 1400, 1366, 1365, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1368, 1408, 1410, 1409, 1409, 1398, 1409, 1411,
     1412, 1412, 1414, 1412, 1413, 1413, 1376, 1413, 1415, 1416,
     1370, 1369, 1417, 1417, 1418, 1417, 1419, 1420, 1421, 1422,
     1423, 1424, 1413, 1425, 1425, 1426, 1425, 1427, 1428, 1429,

     1417, 1430, 1430, 1432, 1430, 1431, 1431, 1433, 1431, 1434,
     1435, 1435, 1437, 1435, 1436, 1436, 1438, 1436, 1439, 1440,
     1441, 1442, 1446, 1443, 1443, 1450, 1443, 1444, 1444, 1452,
     1444, 1445, 1445, 1454, 1445, 1447, 1447, 1447, 1449, 1449,
     1449, 1451, 1451, 1451, 1457, 1458, 1459, 1460, 1462, 1463,
     1464, 1465, 1469, 1472, 1474, 1475, 1476, 1425, 1477, 1478,
     1479, 1480, 1470, 1470, 1431, 1430, 1430, 1481, 1482, 1447,
     1483, 1484, 1449, 1470, 1485, 1435, 1443, 1486, 1470, 1471,
     1471, 1471, 1471, 1471, 1471, 1487, 1471, 1488, 1489, 1490,
     1471, 1491, 1471, 1492, 1493, 1494, 1495, 1496, 1471, 1497,

     1498, 1499, 1500, 1501, 1503, 1504, 1505, 1506, 1506, 1507,
     1506, 1508, 1509, 1510, 1511, 1512, 1513, 1511, 1512, 1513,
     1522, 1514, 1514, 1522, 1514, 1515, 1515, 1529, 1515, 1516,
     1516, 1530, 1516, 1517, 1517, 1521, 1517, 1531, 1521, 1523,
     1512, 1514, 1523, 1518, 1518, 1515, 1518, 1524, 1532, 1516,
     1524, 1520, 1520, 1517, 1520, 1522, 1525, 1526, 1521, 1525,
     1526, 1527, 1506, 1518, 1527, 1528, 1533, 1513, 1528, 1534,
     1535, 1520, 1536, 1537, 1538, 1538, 1541, 1538, 1540, 1540,
     1542, 1540, 1543, 1544, 1545, 1547, 1555, 1548, 1548, 1523,
     1548, 1556, 1549, 1549, 1538, 1549, 1550, 1550, 1540, 1550,

     1557, 1551, 1551, 1558, 1551, 1552, 1552, 1548, 1552, 1559,
     1560, 1525, 1549, 1562, 1554, 1554, 1550, 1554, 1526, 1564,
     1527, 1551, 1565, 1563, 1563, 1552, 1563, 1566, 1566, 1568,
     1566, 1569, 1570, 1570, 1554, 1570, 1571, 1571, 1575, 1571,
     1572, 1572, 1578, 1572, 1579, 1566, 1573, 1573, 1580, 1573,
     1574, 1574, 1581, 1574, 1571, 1576, 1576, 1582, 1576, 1577,
     1577, 1583, 1577, 1584, 1585, 1586, 1587, 1588, 1589, 1589,
     1590, 1589, 1591, 1592, 1592, 1593, 1592, 1594, 1595, 1596,
     1597, 1597, 1598, 1597, 1599, 1600, 1600, 1604, 1600, 1607,
     1563, 1601, 1601, 1608, 1601, 1602, 1602, 1609, 1602, 1606,

     1606, 1606, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
     1618, 1610, 1619, 1620, 1621, 1622, 1610, 1623, 1624, 1622,
     1625, 1624, 1626, 1626, 1627, 1628, 1629, 1623, 1620, 1630,
     1626, 1631, 1632, 1606, 1633, 1634, 1628, 1600, 1592, 1635,
     1636, 1639, 1641, 1642, 1644, 1645, 1601, 1646, 1649, 1630,
     1647, 1647, 1648, 1648, 1650, 1651, 1652, 1653, 1654, 1655,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
     1666, 1667, 1668, 1669, 1670, 1670, 1671, 1670, 1674, 1671,
     1672, 1672, 1677, 1672, 1673, 1673, 1680, 1673, 1675, 1675,
     1683, 1675, 1676, 1676, 1670, 1676, 1678, 1678, 1686, 1678,

     1672, 1689, 1679, 1679, 1673, 1679, 1693, 1672, 1675, 1693,
     1681, 1681, 1676, 1681, 1691, 1675, 1678, 1691, 1682, 1682,
     1696, 1682, 1679, 1678, 1684, 1684, 1697, 1684, 1685, 1685,
     1681, 1685, 1687, 1687, 1698, 1687, 1691, 1681, 1682, 1692,
     1699, 1700, 1692, 1671, 1684, 1701, 1688, 1688, 1685, 1688,
     1702, 1684, 1687, 1690, 1690, 1694, 1690, 1695, 1694, 1687,
     1695, 1703, 1703, 1704, 1703, 1706, 1688, 1705, 1705, 1693,
     1705, 1707, 1707, 1690, 1707, 1708, 1709, 1709, 1710, 1709,
     1711, 1703, 1694, 1712, 1716, 1714, 1714, 1705, 1714, 1692,
     1718, 1707, 1715, 1715, 1720, 1715, 1709, 1717, 1717, 1722,

     1717, 1724, 1726, 1719, 1719, 1714, 1719, 1721, 1721, 1728,
     1721, 1729, 1715, 1723, 1723, 1730, 1723, 1717, 1731, 1725,
     1725, 1695, 1725, 1719, 1732, 1727, 1727, 1721, 1727, 1733,
     1734, 1735, 1738, 1723, 1736, 1736, 1746, 1736, 1747, 1725,
     1737, 1737, 1750, 1737, 1751, 1727, 1739, 1739, 1752, 1739,
     1740, 1740, 1753, 1740, 1741, 1741, 1754, 1741, 1742, 1742,
     1755, 1742, 1743, 1743, 1756, 1743, 1744, 1744, 1759, 1744,
     1745, 1745, 1760, 1745, 1748, 1748, 1761, 1748, 1749, 1749,
     1763, 1749, 1757, 1757, 1739, 1757, 1758, 1758, 1764, 1758,
     1762, 1762, 1766, 1762, 1765, 1765, 1767, 1765, 1768, 1739,

     1769, 1770, 1770, 1739, 1770, 1772, 1774, 1775, 1776, 1777,
     1778, 1780, 1742, 1781, 1783, 1784, 1785, 1786, 1787, 1788,
     1789, 1786, 1741, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1786, 1799, 1744, 1745, 1800, 1801, 1802, 1757,
     1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
     1814, 1765, 1815, 1816, 1817, 1818, 1770, 1819, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
     1829, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1838, 1839,
     1838, 1840, 1841, 1842, 1843, 1844, 1844, 1834, 1844, 1845,
     1845, 1846, 1845, 1847, 1856, 1838, 1847, 1854, 1854, 1861,

     1854, 1855, 1855, 1858, 1855, 1844, 1858, 1857, 1857, 1845,
     1857, 1859, 1844, 1860, 1859, 1862, 1860, 1854, 1863, 1864,
     1865, 1855, 1866, 1867, 1854, 1868, 1868, 1857, 1868, 1869,
     1870, 1873, 1873, 1874, 1873, 1875, 1875, 1876, 1875, 1877,
     1879, 1878, 1878, 1887, 1878, 1868, 1889, 1886, 1886, 1890,
     1886, 1873, 1891, 1888, 1888, 1875, 1888, 1892, 1858, 1893,
     1847, 1878, 1894, 1898, 1900, 1901, 1859, 1886, 1895, 1895,
     1902, 1895, 1903, 1888, 1896, 1896, 1860, 1896, 1897, 1897,
     1905, 1897, 1899, 1899, 1906, 1899, 1895, 1904, 1904, 1908,
     1904, 1907, 1907, 1913, 1907, 1914, 1909, 1909, 1915, 1909,

     1910, 1910, 1916, 1910, 1911, 1911, 1917, 1911, 1912, 1912,
     1918, 1912, 1919, 1919, 1920, 1919, 1921, 1922, 1922, 1925,
     1922, 1926, 1911, 1923, 1923, 1927, 1923, 1924, 1924, 1928,
     1924, 1929, 1930, 1931, 1932, 1897, 1934, 1935, 1936, 1896,
     1937, 1939, 1939, 1940, 1942, 1924, 1943, 1944, 1945, 1946,
     1947, 1948, 1904, 1909, 1949, 1950, 1951, 1952, 1953, 1954,
     1909, 1955, 1956, 1957, 1958, 1959, 1962, 1910, 1960, 1961,
     1963, 1964, 1965, 1961, 1966, 1967, 1919, 1968, 1960, 1969,
     1970, 1961, 1961, 1971, 1973, 1974, 1976, 1923, 1923, 1975,
     1975, 1977, 1978, 1960, 1979, 1980, 1981, 1982, 1984, 1985,

     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1996, 1997,
     1997, 1999, 1997, 2000, 2001, 2002, 2003, 2005, 2007, 2007,
     2005, 2007, 2008, 2008, 2009, 2008, 2010, 1997, 2011, 2010,
     2012, 2011, 2013, 2012, 2014, 2005, 2015, 2016, 2007, 2017,
     2018, 2019, 2008, 2023, 2023, 2007, 2023, 2024, 2025, 2026,
     2029, 2029, 2030, 2029, 2031, 2032, 2033, 2034, 2035, 2036,
     2039, 2037, 2037, 2023, 2037, 2038, 2038, 2040, 2038, 2041,
     2029, 2042, 2042, 2043, 2042, 2044, 2045, 2012, 2046, 2037,
     2047, 2048, 2049, 2050, 2050, 2051, 2050, 2052, 2053, 2054,
     2059, 2011, 2010, 2055, 2055, 2060, 2055, 2056, 2056, 2061,

     2056, 2050, 2057, 2057, 2062, 2057, 2058, 2058, 2063, 2058,
     2064, 2055, 2065, 2065, 2066, 2065, 2067, 2067, 2068, 2067,
     2069, 2072, 2070, 2070, 2058, 2070, 2071, 2071, 2073, 2071,
     2065, 2074, 2075, 2076, 2077, 2077, 2078, 2077, 2042, 2079,
     2070, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
     2089, 2091, 2094, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
     2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2057,
     2112, 2113, 2067, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
     2121, 2124, 2125, 2126, 2128, 2130, 2131, 2132, 2134, 2135,
     2136, 2112, 2137, 2138, 2134, 2139, 2140, 2141, 2142, 2143,

     2144, 2145, 2146, 2147, 2148, 2149, 2151, 2152, 2154, 2151,
     2152, 2155, 2156, 2157, 2158, 2159, 2160, 2162, 2163, 2165,
     2166, 2167, 2169, 2169, 2172, 2169, 2170, 2170, 2173, 2170,
     2171, 2171, 2175, 2171, 2174, 2174, 2177, 2174, 2176, 2176,
     2178, 2176, 2179, 2180, 2170, 2181, 2182, 2184, 2185, 2186,
     2187, 2188, 2188, 2189, 2188, 2190, 2190, 2151, 2190, 2191,
     2191, 2192, 2191, 2193, 2194, 2195, 2196, 2197, 2201, 2198,
     2198, 2152, 2198, 2190, 2199, 2199, 2202, 2199, 2200, 2200,
     2203, 2200, 2204, 2204, 2205, 2204, 2206, 2198, 2207, 2208,
     2209, 2210, 2210, 2211, 2210, 2212, 2213, 2214, 2215, 2216,

     2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
     2237, 2228, 2238, 2239, 2225, 2240, 2241, 2242, 2243, 2244,
     2245, 2246, 2246, 2247, 2246, 2248, 2249, 2250, 2251, 2252,
     2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
     2263, 2264, 2265, 2266, 2268, 2210, 2269, 2270, 2271, 2271,
     2272, 2271, 2273, 2274, 2276, 2277, 2278, 2276, 2277, 2279,
     2280, 2281, 2282, 2283, 2284, 2285, 2271, 2286, 2287, 2288,
     2289, 2290, 2290, 2293, 2290, 2291, 2291, 2294, 2291, 2292,
     2292, 2296, 2292, 2295, 2295, 2298, 2295, 2297, 2297, 2300,

     2297, 2299, 2299, 2291, 2299, 2301, 2302, 2302, 2303, 2302,
     2304, 2304, 2305, 2304, 2306, 2307, 2308, 2309, 2309, 2310,
     2309, 2311, 2312, 2312, 2313, 2312, 2314, 2277, 2315, 2318,
     2316, 2316, 2276, 2316, 2317, 2317, 2319, 2317, 2320, 2321,
     2322, 2323, 2324, 2325, 2326, 2327, 2290, 2328, 2329, 2330,
     2331, 2333, 2334, 2336, 2337, 2338, 2339, 2295, 2341, 2342,
     2343, 2344, 2345, 2346, 2297, 2347, 2348, 2349, 2350, 2351,
     2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361,
     2362, 2363, 2364, 2365, 2366, 2367, 2317, 2368, 2369, 2370,
     2371, 2364, 2372, 2374, 2375, 2376, 2377, 2378, 2379, 2380,

     2381, 2382, 2383, 2384, 2387, 2388, 2389, 2390, 2390, 2392,
     2390, 2393, 2395, 2396, 2397, 2395, 2396, 2398, 2399, 2400,
     2401, 2402, 2403, 2404, 2405, 2390, 2406, 2407, 2408, 2409,
     2410, 2410, 2411, 2410, 2412, 2412, 2413, 2412, 2414, 2415,
     2416, 2417, 2417, 2419, 2417, 2418, 2418, 2421, 2418, 2423,
     2420, 2420, 2412, 2420, 2422, 2422, 2424, 2422, 2425, 2425,
     2426, 2425, 2427, 2428, 2428, 2430, 2428, 2431, 2396, 2429,
     2429, 2395, 2429, 2432, 2433, 2434, 2425, 2435, 2436, 2437,
     2438, 2439, 2439, 2440, 2439, 2441, 2442, 2442, 2443, 2442,
     2444, 2445, 2446, 2447, 2448, 2417, 2450, 2451, 2452, 2453,

     2454, 2455, 2456, 2457, 2420, 2458, 2459, 2422, 2461, 2462,
     2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472,
     2473, 2474, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483,
     2484, 2429, 2485, 2461, 2486, 2487, 2488, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2496, 2497, 2499, 2500, 2501, 2502,
     2503, 2504, 2505, 2503, 2504, 2506, 2507, 2508, 2509, 2510,
     2511, 2512, 2514, 2515, 2517, 2518, 2519, 2519, 2521, 2519,
     2520, 2520, 2522, 2520, 2523, 2524, 2525, 2526, 2526, 2527,
     2526, 2528, 2529, 2530, 2519, 2531, 2532, 2533, 2533, 2536,
     2533, 2534, 2534, 2538, 2534, 2526, 2540, 2535, 2535, 2541,

     2535, 2537, 2537, 2542, 2537, 2533, 2539, 2539, 2544, 2539,
     2543, 2543, 2545, 2543, 2503, 2535, 2546, 2546, 2547, 2546,
     2548, 2548, 2550, 2548, 2539, 2552, 2549, 2549, 2543, 2549,
     2551, 2551, 2553, 2551, 2546, 2554, 2555, 2556, 2557, 2558,
     2559, 2560, 2562, 2563, 2549, 2564, 2565, 2566, 2567, 2568,
     2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578,
     2579, 2580, 2581, 2582, 2583, 2537, 2584, 2585, 2586, 2587,
     2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2598,
     2599, 2600, 2601, 2602, 2548, 2551, 2604, 2605, 2606, 2607,
     2608, 2609, 2610, 2611, 2609, 2612, 2613, 2614, 2615, 2616,

     2617, 2618, 2619, 2620, 2621, 2622, 2622, 2623, 2622, 2624,
     2625, 2626, 2626, 2627, 2626, 2629, 2630, 2631, 2632, 2633,
     2634, 2635, 2635, 2639, 2635, 2636, 2636, 2640, 2636, 2637,
     2637, 2643, 2637, 2638, 2638, 2644, 2638, 2641, 2641, 2645,
     2641, 2642, 2642, 2636, 2642, 2646, 2646, 2648, 2646, 2647,
     2647, 2649, 2647, 2652, 2609, 2641, 2650, 2650, 2653, 2650,
     2656, 2654, 2654, 2646, 2654, 2657, 2658, 2659, 2660, 2661,
     2662, 2664, 2665, 2666, 2650, 2667, 2668, 2669, 2671, 2654,
     2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2682,
     2683, 2684, 2685, 2686, 2687, 2689, 2685, 2691, 2692, 2693,

     2694, 2695, 2696, 2698, 2701, 2702, 2703, 2704, 2705, 2706,
     2708, 2709, 2710, 2711, 2712, 2712, 2713, 2712, 2714, 2715,
     2716, 2717, 2718, 2718, 2719, 2718, 2720, 2720, 2722, 2720,
     2721, 2721, 2723, 2721, 2712, 2724, 2725, 2726, 2726, 2727,
     2726, 2728, 2728, 2729, 2728, 2730, 2720, 2731, 2732, 2733,
     2721, 2734, 2735, 2736, 2736, 2726, 2736, 2737, 2737, 2738,
     2737, 2739, 2740, 2740, 2742, 2740, 2741, 2741, 2743, 2741,
     2744, 2744, 2745, 2744, 2746, 2746, 2747, 2746, 2748, 2749,
     2749, 2750, 2749, 2751, 2741, 2752, 2754, 2755, 2757, 2759,
     2760, 2761, 2746, 2762, 2763, 2764, 2765, 2766, 2767, 2768,

     2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2728, 2777,
     2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787,
     2789, 2737, 2790, 2791, 2792, 2793, 2793, 2795, 2793, 2794,
     2794, 2796, 2794, 2797, 2797, 2799, 2797, 2798, 2798, 2800,
     2798, 2801, 2802, 2793, 2803, 2804, 2805, 2805, 2806, 2805,
     2808, 2807, 2807, 2797, 2807, 2809, 2809, 2798, 2809, 2810,
     2797, 2811, 2812, 2813, 2814, 2815, 2815, 2818, 2815, 2816,
     2816, 2807, 2816, 2817, 2817, 2809, 2817, 2819, 2820, 2821,
     2822, 2823, 2824, 2815, 2825, 2826, 2827, 2828, 2829, 2829,
     2832, 2829, 2831, 2831, 2833, 2831, 2834, 2834, 2836, 2834,

     2837, 2805, 2835, 2835, 2839, 2835, 2829, 2840, 2838, 2838,
     2831, 2838, 2841, 2843, 2834, 2844, 2845, 2846, 2847, 2848,
     2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858,
     2859, 2860, 2861, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
     2870, 2871, 2873, 2874, 2875, 2876, 2878, 2878, 2874, 2878,
     2880, 2880, 2881, 2880, 2882, 2884, 2885, 2886, 2887, 2888,
     2889, 2890, 2893, 2894, 2878, 2895, 2896, 2897, 2897, 2899,
     2897, 2901, 2838, 2898, 2898, 2903, 2898, 2900, 2900, 2905,
     2900, 2902, 2902, 2906, 2902, 2904, 2904, 2907, 2904, 2908,
     2909, 2909, 2917, 2909, 2911, 2911, 2918, 2911, 2912, 2912,

     2921, 2912, 2922, 2913, 2913, 2880, 2913, 2923, 2909, 2924,
     2914, 2914, 2911, 2914, 2915, 2915, 2925, 2915, 2916, 2916,
     2926, 2916, 2919, 2919, 2927, 2919, 2928, 2929, 2914, 2898,
     2920, 2920, 2930, 2920, 2931, 2932, 2933, 2934, 2936, 2937,
     2938, 2934, 2939, 2934, 2940, 2941, 2942, 2943, 2944, 2945,
     2946, 2947, 2949, 2951, 2952, 2953, 2954, 2955, 2956, 2957,
     2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967,
     2968, 2969, 2970, 2971, 2971, 2972, 2971, 2973, 2973, 2976,
     2973, 2974, 2974, 2977, 2974, 2975, 2975, 2978, 2975, 2979,
     2987, 2971, 2991, 2980, 2980, 2973, 2980, 2981, 2981, 2974,

     2981, 2982, 2982, 2975, 2982, 2983, 2983, 2993, 2983, 2984,
     2984, 2980, 2984, 2985, 2985, 2994, 2985, 2986, 2986, 2995,
     2986, 2988, 2988, 2983, 2988, 2989, 2989, 2984, 2989, 2990,
     2990, 2996, 2990, 2997, 2998, 2999, 3000, 3001, 3002, 3003,
     3004, 3005, 3006, 3009, 3011, 3013, 3014, 3015, 3016, 3017,
     3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027,
     3028, 3029, 3029, 3030, 3029, 3031, 3032, 3034, 3035, 2986,
     3033, 3033, 3038, 3033, 3036, 3036, 3039, 3036, 3047, 3029,
     3037, 3037, 2989, 3037, 3048, 2990, 3041, 3041, 3033, 3041,
     3043, 3043, 3036, 3043, 3044, 3044, 3049, 3044, 3037, 3046,

     3046, 3053, 3046, 3054, 3041, 3056, 3050, 3050, 3043, 3050,
     3052, 3052, 3057, 3052, 3058, 3055, 3055, 3046, 3055, 3059,
     3060, 3061, 3062, 3065, 3066, 3068, 3069, 3070, 3071, 3072,
     3074, 3075, 3076, 3077, 3080, 3082, 3083, 3084, 3086, 3087,
     3088, 3089, 3090, 3068, 3091, 3091, 3087, 3091, 3089, 3093,
     3094, 3095, 3095, 3098, 3095, 3096, 3096, 3099, 3096, 3104,
     3100, 3100, 3091, 3100, 3101, 3101, 3105, 3101, 3102, 3102,
     3055, 3102, 3112, 3096, 3103, 3103, 3113, 3103, 3100, 3106,
     3106, 3114, 3106, 3116, 3107, 3107, 3102, 3107, 3108, 3108,
     3117, 3108, 3109, 3109, 3118, 3109, 3119, 3106, 3110, 3110,

     3120, 3110, 3111, 3111, 3121, 3111, 3115, 3115, 3122, 3115,
     3109, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3132,
     3134, 3135, 3137, 3138, 3115, 3139, 3140, 3140, 3141, 3140,
     3142, 3143, 3144, 3144, 3157, 3144, 3145, 3145, 3159, 3145,
     3146, 3146, 3162, 3146, 3147, 3147, 3163, 3147, 3149, 3149,
     3144, 3149, 3150, 3150, 3145, 3150, 3151, 3151, 3146, 3151,
     3152, 3152, 3164, 3152, 3153, 3153, 3149, 3153, 3154, 3154,
     3167, 3154, 3155, 3155, 3168, 3155, 3156, 3156, 3152, 3156,
     3158, 3158, 3153, 3158, 3160, 3160, 3165, 3160, 3169, 3165,
     3170, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3158, 3179,

     3147, 3180, 3160, 3183, 3183, 3184, 3183, 3185, 3186, 3187,
     3187, 3193, 3187, 3189, 3189, 3200, 3189, 3201, 3191, 3191,
     3204, 3191, 3194, 3194, 3205, 3194, 3206, 3187, 3207, 3196,
     3196, 3189, 3196, 3209, 3210, 3156, 3191, 3165, 3197, 3197,
     3194, 3197, 3165, 3211, 3165, 3198, 3198, 3196, 3198, 3199,
     3199, 3212, 3199, 3202, 3202, 3213, 3202, 3203, 3203, 3183,
     3203, 3208, 3214, 3198, 3208, 3215, 3216, 3217, 3218, 3219,
     3220, 3202, 3221, 3222, 3225, 3226, 3226, 3227, 3226, 3228,
     3228, 3229, 3228, 3230, 3230, 3232, 3230, 3231, 3231, 3235,
     3231, 3233, 3233, 3226, 3233, 3234, 3234, 3228, 3234, 3236,

     3236, 3237, 3236, 3238, 3239, 3240, 3241, 3242, 3243, 3233,
     3244, 3245, 3208, 3246, 3247, 3248, 3249, 3208, 3250, 3208,
     3251, 3252, 3253, 3254, 3254, 3256, 3254, 3257, 3257, 3259,
     3257, 3260, 3261, 3261, 3265, 3261, 3262, 3262, 3266, 3262,
     3267, 3254, 3269, 3263, 3263, 3257, 3263, 3270, 3264, 3264,
     3261, 3264, 3268, 3271, 3272, 3268, 3273, 3274, 3275, 3276,
     3279, 3280, 3281, 3282, 3283, 3284, 3285, 3285, 3287, 3285,
     3286, 3286, 3288, 3286, 3289, 3290, 3291, 3292, 3293, 3291,
     3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303,
     3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313,

     3314, 3315, 3316, 3317, 3320, 3264, 3321, 3268, 3322, 3323,
     3325, 3326, 3327, 3328, 3329, 3331, 3332, 3333, 3335, 3336,
     3333, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345,
     3347, 3291, 3351, 3354, 3356, 3333, 3286, 3346, 3346, 3348,
     3346, 3349, 3348, 3357, 3349, 3358, 3358, 3359, 3358, 3360,
     3361, 3362, 3362, 3363, 3362, 3364, 3365, 3366, 3364, 3349,
     3367, 3369, 3369, 3358, 3369, 3370, 3370, 3372, 3370, 3373,
     3374, 3375, 3376, 3377, 3379, 3384, 3377, 3383, 3383, 3369,
     3383, 3380, 3380, 3370, 3380, 3382, 3382, 3385, 3382, 3386,
     3387, 3377, 3389, 3387, 3393, 3348, 3394, 3390, 3390, 3380,

     3390, 3391, 3391, 3382, 3391, 3396, 3398, 3362, 3387, 3392,
     3392, 3364, 3392, 3395, 3399, 3390, 3395, 3397, 3397, 3400,
     3397, 3401, 3403, 3404, 3401, 3405, 3405, 3406, 3405, 3407,
     3408, 3395, 3409, 3409, 3410, 3409, 3411, 3412, 3413, 3401,
     3414, 3415, 3416, 3417, 3418, 3418, 3419, 3418, 3420, 3421,
     3422, 3422, 3424, 3422, 3425, 3426, 3427, 3428, 3428, 3429,
     3428, 3430, 3418, 3431, 3431, 3392, 3431, 3433, 3422, 3434,
     3435, 3436, 3523, 3437, 3437, 3428, 3437, 3439, 3439, 3525,
     3439, 3431,  913,  912,  911,  910,  908,  907, 3409,  906,
      900, 3437,  898,  897,  896, 3439, 3442, 3442, 3442, 3442,

     3442, 3442, 3442, 3442, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444,
     3445, 3445, 3445, 3445, 3445, 3445, 3445, 3445, 3446, 3446,
     3446, 3446, 3446, 3446, 3446, 3446, 3447, 3447, 3447, 3447,
     3447, 3447, 3447, 3447, 3448, 3448, 3448, 3448, 3448, 3448,
     3448, 3448, 3449, 3449, 3449, 3449, 3449, 3449, 3449, 3449,
     3450, 3450, 3450, 3450, 3450, 3450, 3450, 3450, 3451, 3451,
     3451, 3451, 3451, 3451, 3451, 3451, 3452, 3452, 3452, 3452,
     3452, 3452, 3452, 3452, 3453, 3453, 3453, 3453, 3453, 3453,
     3453, 3453, 3454, 3454, 3454, 3454, 3454, 3454, 3454, 3454,

     3455, 3455, 3455, 3455, 3455, 3455, 3455, 3455, 3456, 3456,
     3456, 3456, 3456, 3456, 3456, 3456, 3457, 3457, 3457, 3457,
     3457, 3457, 3457, 3457, 3458, 3458, 3458, 3458, 3458, 3458,
     3458, 3458, 3459, 3459, 3459, 3459, 3459, 3459, 3459, 3459,
     3460, 3460, 3460, 3460, 3460, 3460, 3460, 3460, 3461, 3461,
     3461, 3461, 3461, 3461, 3461, 3461, 3462, 3462, 3462, 3462,
     3462, 3462, 3462, 3462, 3463, 3463, 3463, 3463, 3463, 3463,
     3463, 3463, 3464, 3464, 3464, 3464, 3464, 3464, 3464, 3464,
     3465, 3465, 3465, 3465, 3465, 3465, 3465, 3465, 3466, 3466,
     3466, 3466, 3466, 3466, 3466, 3466, 3467, 3467, 3467, 3467,

     3467, 3467, 3467, 3467, 3468, 3468, 3468, 3468, 3468, 3468,
     3468, 3468, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
     3470, 3470, 3470, 3470, 3470, 3470, 3470, 3470, 3471,  894,
     3471, 3472,  893, 3472, 3473,  892,  891, 3473,  890, 3473,
     3474,  889, 3474, 3475, 3475, 3475, 3475, 3475, 3475, 3475,
     3476, 3476, 3476, 3476, 3477,  888, 3477, 3478, 3478, 3478,
     3478, 3478, 3478, 3478, 3478, 3479, 3479,  887, 3479, 3479,
     3479, 3479, 3479, 3480, 3480, 3480, 3480, 3480, 3480, 3480,
     3480, 3481, 3481, 3481, 3481, 3481, 3481, 3481, 3481, 3482,
     3482, 3482, 3482, 3482, 3482, 3482, 3482, 3483, 3483,  885,

     3483, 3483, 3483, 3483, 3483, 3484, 3484, 3484, 3484, 3484,
     3484, 3484, 3484, 3485, 3485, 3485, 3485, 3485, 3485, 3485,
     3485, 3486, 3486, 3486, 3486, 3486, 3486, 3486, 3486, 3487,
     3487,  884, 3487, 3487, 3487, 3487, 3487, 3488, 3488, 3488,
     3488, 3488, 3488, 3488, 3488, 3489, 3489, 3489, 3489, 3489,
     3489, 3489, 3489, 3490, 3490, 3490, 3490, 3490, 3490, 3490,
     3490, 3491, 3491,  883, 3491, 3491, 3491, 3491, 3491, 3492,
     3492, 3492, 3492, 3492, 3492, 3492, 3492, 3493, 3493, 3493,
     3493, 3493, 3493, 3493, 3493, 3494, 3494, 3494, 3494, 3494,
     3494, 3494, 3494, 3495, 3495, 3495, 3495, 3495, 3495, 3495,

     3495, 3496, 3496, 3496, 3496, 3496, 3496, 3496, 3496, 3497,
     3497, 3497, 3497, 3497, 3497, 3497, 3497, 3498, 3498, 3498,
     3498, 3498, 3498, 3498, 3498, 3499, 3499, 3499, 3499, 3499,
     3499, 3499, 3499, 3500, 3500, 3500, 3500, 3500, 3500, 3500,
     3500, 3501, 3501, 3501, 3501, 3501, 3501, 3501, 3501, 3502,
     3502, 3502, 3502, 3502, 3502, 3502, 3502, 3503, 3503, 3503,
     3503, 3503, 3503, 3503, 3503, 3504, 3504,  882, 3504, 3504,
     3504, 3504, 3504, 3505, 3505, 3505, 3505, 3505, 3505, 3505,
     3505, 3506, 3506, 3506, 3506, 3506, 3506, 3506, 3506, 3507,
     3507, 3507, 3507, 3507, 3507, 3507, 3507, 3508, 3508, 3508,

     3508, 3508, 3508, 3508, 3508, 3509, 3509, 3509, 3509, 3509,
     3509, 3509, 3509, 3510, 3510,  881, 3510, 3510, 3510, 3510,
     3510, 3511,  880, 3511, 3512, 3512, 3512, 3512, 3512, 3512,
     3512, 3512, 3513, 3513, 3513, 3513, 3513, 3513, 3513, 3513,
     3514, 3514, 3514, 3514, 3514, 3514, 3514, 3514, 3515, 3515,
     3515, 3515, 3515, 3515, 3515, 3515, 3516, 3516, 3516, 3516,
     3516, 3516, 3516, 3516, 3517,  879, 3517, 3518, 3518, 3518,
     3518, 3518, 3518, 3518, 3518, 3519, 3519, 3519, 3519, 3519,
     3519, 3519, 3519, 3520, 3520, 3520, 3520,  878, 3520,  877,
     3520, 3521, 3521, 3521, 3521,  875, 3521,  873, 3521, 3522,

     3522, 3522, 3522,  872, 3522,  871, 3522, 3524, 3524, 3526,
     3526, 3527,  869,  868, 3527,  867, 3527,  866,  865,  864,
      863,  862,  861,  859,  858,  857,  856,  855,  854,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  844,  823,
      822,  821,  820,  819,  818,  817,  816,  815,  810,  809,
      808,  807,  806,  805,  804,  803,  802,  801,  800,  799,
      798,  797,  796,  795,  794,  793,  792,  790,  789,  788,
      786,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  766,  765,  764,
      763,  762,  761,  760,  758,  756,  755,  754,  748,  747,

      746,  745,  744,  743,  741,  739,  738,  735,  734,  733,
      731,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  708,  706,  703,  702,  701,  700,  699,  698,  697,
      691,  690,  688,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  660,  659,  658,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  632,  631,  630,  629,  628,  627,  626,

      625,  624,  623,  612,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  588,  587,  586,  585,  584,  583,  582,
      580,  577,  576,  575,  574,  573,  572,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  559,  558,  557,
      556,  555,  554,  553,  552,  550,  549,  548,  547,  546,
      545,  544,  542,  541,  540,  539,  538,  537,  536,  535,
      529,  528,  526,  525,  524,  523,  522,  521,  520,  519,
      516,  515,  513,  512,  511,  510,  509,  508,  506,  505,
      504,  503,  499,  498,  497,  496,  495,  494,  492,  490,
      489,  488,  487,  486,  484,  482,  480,  479,  478,  477,

      476,  475,  474,  468,  466,  465,  464,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  439,  438,  437,
      436,  433,  432,  431,  430,  429,  428,  427,  426,  423,
      422,  421,  419,  418,  417,  416,  415,  414,  413,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  393,  381,
      380,  378,  377,  376,  375,  374,  373,  372,  364,  363,
      360,  357,  354,  353,  350,  348,  347,  346,  345,  344,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  324,  322,  320,  319,  313,  312,  307,  303,  301,

      298,  294,  290,  286,  275,  271,  264,  263,  261,  260,
      258,  256,  253,  252,  251,  248,  247,  246,  240,  233,
      232,  231,  230,  228,  227,  226,  224,  223,  222,  221,
      219,  218,  217,  214,  213,  212,  211,  206,  201,  200,
      199,  198,  197,  196,  195,  194,  191,  190,  189,  188,
      187,  183,  179,  175,  171,  167,  163,  151,  140,  139,
      138,  136,  135,  131,  127,  123,  119,  115,   99,   98,
       97,   90,   89,   88,   87,   86,   85,   84,   83,   82,
       69, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,

     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441,
     3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[427] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 
    1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 
    1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 
    1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 
    0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 
    0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 
    1, 1, 1, 1, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "compiler/EaseaLex.l"
#line 2 "compiler/EaseaLex.l"
 /****************************************************************************
EaseaLex.l
Lexical analyser for the EASEA language (EAsy Specification for Evolutionary Algorithms)

Pierre COLLET (Pierre.Collet@polytechnique.fr)
Ecole Polytechnique
Centre de Math�matiques Appliqu�es
91128 Palaiseau cedex
  ****************************************************************************/
#ifdef WIN32
#define _CRT_SECURE_NO_WARNINGS
//#pragma comment(lib, "libAlexYacc.lib")
#endif
#include "Easea.h"
#include "EaseaParse.hpp"

#if defined WIN32 || defined WIN64
#include <direct.h>
#else
#include <unistd.h>
#endif

#ifndef SIZE_MAX
# define SIZE_MAX ((size_t) -1)
#endif

#ifndef SSIZE_MAX
# define SSIZE_MAX ((ssize_t) (SIZE_MAX / 2))
#endif

#include "debug.h"
//#include <iostream>
//#include <sstream>

#if defined __WIN64__ || defined __APPLE__ || defined __WIN32__
 /* Mac OS X don't have strndup even if _GNU_SOURCE is defined */
char *strndup (const char *s, size_t n){
    size_t len = strlen (s);
    char *ret;

    if (len <= n)
	return strdup (s);

    ret = (char *)malloc(n + 1);
    strncpy(ret, s, n);
    ret[n] = '\0';
    return ret;
}

ssize_t getline (char **lineptr, size_t *n, FILE *fp){
    ssize_t result;
    size_t cur_len = 0;

    if (lineptr == NULL || n == NULL || fp == NULL){
	errno = EINVAL;
	return -1;
    }

    if (*lineptr == NULL || *n == 0){
	*n = 120;
	*lineptr = (char *) malloc (*n);
	if (*lineptr == NULL){
	    result = -1;
	    goto end;
	}
    }

    for (;;){
	int i;

	i = getc (fp);
	if (i == EOF){
	    result = -1;
	    break;
	}

	/* Make enough space for len+1 (for final NUL) bytes.  */
	if (cur_len + 1 >= *n){
	    size_t needed_max =	SSIZE_MAX < SIZE_MAX ? (size_t) SSIZE_MAX + 1 : SIZE_MAX;
	    size_t needed = 2 * *n + 1;   /* Be generous. */
	    char *new_lineptr;

	    if (needed_max < needed)
		needed = needed_max;
	    if (cur_len + 1 >= needed){
		result = -1;
		goto end;
	    }

	    new_lineptr = (char *) realloc (*lineptr, needed);
	    if (new_lineptr == NULL){
		result = -1;
		goto end;
	    }

	    *lineptr = new_lineptr;
	    *n = needed;
	}

	(*lineptr)[cur_len] = i;
	cur_len++;

	if (i == '\n')
	    break;
    }
    (*lineptr)[cur_len] = '\0';
    result = cur_len ? (ssize_t) cur_len : result;

end:
    return result;
}
#endif

 /* getline implementation is copied from glibc. */


  size_t genomeSize;
  bool genomeSizeValidity=false;
  int lineCounter = 0;

  // local functions
char* selectorDetermination(int nMINIMISE, char* sSELECTOR){

  char selectorName[50];  
  selectorName[3] = 0;
  if( nMINIMISE )
    strcpy(selectorName,"Min");
  else
    strcpy(selectorName,"Max");
  

  if( mystricmp("Tournament",sSELECTOR)==0 )
    strcat(selectorName,"Tournament(globalRandomGenerator)");
  else if( mystricmp("dettour",sSELECTOR)==0 )
    strcat(selectorName,"Tournament(globalRandomGenerator)");
  else if( mystricmp("Deterministic",sSELECTOR)==0 )
    strcat(selectorName,"Deterministic()");
  else if( mystricmp("deterministic",sSELECTOR)==0 )
    strcat(selectorName,"Deterministic()");
  else if( mystricmp("Random",sSELECTOR)==0 )
    strcat(selectorName,"Random(globalRandomGenerator)");
  else if( mystricmp("Roulette",sSELECTOR)==0 )
    strcat(selectorName,"Roulette(globalRandomGenerator)");

  else{
    //DEBUG_PRT_PRT("%s is not yet implemented",sSELECTOR);
    return NULL;
  }
  
  char* ret = (char*)malloc((strlen(selectorName)+1)*sizeof(char));
  strcpy(ret,selectorName);

  return ret;
}


  // include file
  // forward references
  class CEASEAParser;
  class CSymbolTable;
  class OPCodeDesc;


void yyreset()
{
	yyleng = 0;
	yylineno = 1;
    YY_FLUSH_BUFFER;
	//yyunputindex = 0;
	//yymoreflg = 0;
	//yyrejectflg = 0;
	//yyeol = 1;
	//yyoldeol = 1;
	//yystart = 0;
}



  CSymbolTable *pSymbolTable;   // the symbol table
  bool bSymbolInserted,bWithinEvaluator, bWithinOptimiser;  // used to change evalutor type from double to float 
  bool bInitFunction,bDisplayFunction,bFunction, bNotFinishedYet, bWithinEO_Function;
  bool bDoubleQuotes,bWithinDisplayFunction,bWithinInitialiser,bWithinMutator,bWithinXover;
  bool bWaitingForSemiColon,bFinishNB_GEN,bFinishMINIMISE,bFinishMINIMIZE,bGenerationReplacementFunction;
  bool bCatchNextSemiColon,bWaitingToClosePopulation, bMethodsInGenome, bFinalizationFunction;
  bool bWithinCUDA_Initializer, bWithinMAKEFILEOPTION, bWithinCUDA_Evaluator, bBoundCheckingFunction;
  bool bIsParentReduce, bIsOffspringReduce, bEndGeneration, bBeginGeneration, bEndGenerationFunction, bBeginGenerationFunction, bGenerationFunctionBeforeReplacement;
  bool bGPOPCODE_ANALYSIS,bCOPY_GP_EVAL_GPU;
  
  CSymbol *pASymbol;

  unsigned iGP_OPCODE_FIELD, accolade_counter;
  OPCodeDesc* opDesc[128];
  unsigned iNoOp;

  
  unsigned iCOPY_GP_EVAL_STATUS;
  bool bIsCopyingGPEval;




  // extract yylval for use later on in actions
  //YYSTYPE& yylval = *(YYSTYPE*)yyparserptr->yylvalptr;
 



 

/* macros */
#line 3412 "compiler/EaseaLex.cpp"

#define INITIAL 0
#define GENOME_ANALYSIS 1
#define TEMPLATE_ANALYSIS 2
#define MACRO_IDENTIFIER 3
#define MACRO_DEFINITION 4
#define COPY_USER_DECLARATIONS 5
#define COPY_USER_CUDA 6
#define COPY_INITIALISATION_FUNCTION 7
#define ANALYSE_USER_CLASSES 8
#define COPY_EO_INITIALISER 9
#define COPY_GP_OPCODE 10
#define COPY 11
#define COPY_INITIALISER 12
#define COPY_CROSSOVER 13
#define COPY_MUTATOR 14
#define COPY_EVALUATOR 15
#define COPY_OPTIMISER 16
#define COPY_FINALIZATION_FUNCTION 17
#define COPY_DISPLAY 18
#define COPY_USER_FUNCTION 19
#define COPY_USER_GENERATION 20
#define PARAMETERS_ANALYSIS 21
#define GET_PARAMETERS 22
#define COPY_USER_FUNCTIONS 23
#define COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT 24
#define GET_METHODS 25
#define COPY_MAKEFILE_OPTION 26
#define COPY_BOUND_CHECKING_FUNCTION 27
#define COPY_BEG_GENERATION_FUNCTION 28
#define COPY_END_GENERATION_FUNCTION 29
#define COPY_INSTEAD_EVAL 30
#define GP_RULE_ANALYSIS 31
#define GP_COPY_OPCODE_CODE 32
#define COPY_GP_EVAL 33

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 220 "compiler/EaseaLex.l"



 /*Gobbles up ^Ms, to be compatible with unix*/
#line 3677 "compiler/EaseaLex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3442 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6082 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 224 "compiler/EaseaLex.l"
{}
	YY_BREAK
/*switch immediately to TEMPLATE_ANALYSIS state*/
case 2:
YY_RULE_SETUP
#line 227 "compiler/EaseaLex.l"
{
  BEGIN TEMPLATE_ANALYSIS; yyless(yyleng-1);
 }
	YY_BREAK
/******************************************
 *  GA_GENERATION lexer (feeds on template file and occasionally on .ez file)
 ******************************************/
case 3:
YY_RULE_SETUP
#line 234 "compiler/EaseaLex.l"
{             
  char sFileName[1000];
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".cpp"); 
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 240 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"EASEA");}        
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 241 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sPROJECT_NAME);}        
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 242 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sEZ_PATH);}        
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 243 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sTPL_DIR);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 244 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sEO_DIR);}        
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 245 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sLOWER_CASE_PROJECT_NAME);}        
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 246 "compiler/EaseaLex.l"
{switch (OPERATING_SYSTEM) {
  case UNIX : fprintf(fpOutputFile,"UNIX_OS"); break;
  case WINDOWS : fprintf(fpOutputFile,"WINDOWS_OS"); break;
  case UNKNOWN_OS : fprintf(fpOutputFile,"UNKNOWN_OS"); break;
  }
 }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 252 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user declarations.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_USER_DECLARATIONS;
 }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 260 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user cuda.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_USER_CUDA;
 }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 268 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting initialisation function.\n");
  yyin = fpGenomeFile;                                                    // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter = 1;
  BEGIN COPY_INITIALISATION_FUNCTION;
 }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 276 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting generation before reduce function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bGenerationFunctionBeforeReplacement = true;
  BEGIN COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT;
 }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 285 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("insert beg");
  if (bVERBOSE) printf ("Inserting at the begining of each generation function.\n");
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter+1, sRAW_PROJECT_NAME);

  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bBeginGeneration = true;
  bEndGeneration = false;
  lineCounter = 1;
  BEGIN COPY_BEG_GENERATION_FUNCTION;
 }
	YY_BREAK
/*
  Here we will insert parmeters for GP template.
 */
case 16:
YY_RULE_SETUP
#line 304 "compiler/EaseaLex.l"
{
  if( bVERBOSE )printf("inserting gp parameters\n");
  //  fprintf(fpOutputFile,"#define MAX_XOVER_DEPTH",%d
  fprintf(fpOutputFile,"#define TREE_DEPTH_MAX %d\n",iMAX_TREE_D);
  fprintf(fpOutputFile,"#define INIT_TREE_DEPTH_MAX %d\n",iMAX_INIT_TREE_D);
  fprintf(fpOutputFile,"#define INIT_TREE_DEPTH_MIN %d\n",iMIN_INIT_TREE_D);

  fprintf(fpOutputFile,"#define MAX_PROGS_SIZE %d\n",iPRG_BUF_SIZE);
  fprintf(fpOutputFile,"#define NB_GPU %d\n",iNB_GPU);
  /*fprintf(fpOutputFile,"#define NO_FITNESS_CASES %d\n",iNO_FITNESS_CASES);*/
}
	YY_BREAK
/*
  This part dump every declaration related to gp opcode.
  the enumeration, the array of name (to plot trees)
  and the arity of every opcode.
  */
case 17:
YY_RULE_SETUP
#line 321 "compiler/EaseaLex.l"
{
  
  fprintf(fpOutputFile,"enum OPCODE              {"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%s,",opDesc[i]->opcode->c_str());
  }
  fprintf(fpOutputFile,"OPCODE_SIZE, OP_RETURN};\n");


  fprintf(fpOutputFile,"const char* opCodeName[]={"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%s",opDesc[i]->realName->c_str());
    if( i<(iNoOp-1) )fprintf(fpOutputFile,",");
  }
  fprintf(fpOutputFile,"};\n"); 
  fprintf(fpOutputFile,"unsigned opArity[]=     {"); 
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"%d",opDesc[i]->arity);
    if( i<(iNoOp-1) )fprintf(fpOutputFile,",");
  }
  fprintf(fpOutputFile,"};\n"); 

  /*
  // count the number of variable (arity zero and non-erc operator)
  unsigned var_len = 0;
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    if( opDesc[i]->arity==0 && !opDesc[i]->isERC ) var_len++;
  }
  if( bVERBOSE ) printf("var length is %d\n",var_len);
  fprintf(fpOutputFile,"#define VAR_LEN %d\n",var_len); */
 }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 353 "compiler/EaseaLex.l"
{
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"    case %s :\n",opDesc[i]->opcode->c_str());
    fprintf(fpOutputFile,"      %s",opDesc[i]->gpuCodeStream.str().c_str());
    fprintf(fpOutputFile,"      break;\n");

  }
 }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 362 "compiler/EaseaLex.l"
{
  for( unsigned i=0 ; i<iNoOp ; i++ ){
    fprintf(fpOutputFile,"  case %s :\n",opDesc[i]->opcode->c_str());
    fprintf(fpOutputFile,"    %s\n",opDesc[i]->cpuCodeStream.str().c_str());
    fprintf(fpOutputFile,"    break;\n");
  }
 }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 371 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  if (bVERBOSE) printf ("Analysing GP OP code from ez file\n");
  BEGIN COPY_GP_OPCODE;
 }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 380 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("found begin section\n");
  bGPOPCODE_ANALYSIS = true;
  BEGIN GP_RULE_ANALYSIS;
 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 386 "compiler/EaseaLex.l"
{ 
  if( bGPOPCODE_ANALYSIS ){
    rewind(fpGenomeFile);
    yyin = fpTemplateFile;
    yypop_buffer_state();
    bGPOPCODE_ANALYSIS = false;
    
    OPCodeDesc::sort(opDesc,iNoOp);
    /*for( unsigned i=0 ; i<iNoOp ; i++ ){
      opDesc[i]->show();
      }*/
    BEGIN TEMPLATE_ANALYSIS; 
  }  
 }
	YY_BREAK
case YY_STATE_EOF(COPY_GP_OPCODE):
#line 401 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No GP OP codes were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
 }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 408 "compiler/EaseaLex.l"
{/*if( bGPOPCODE_ANALYSIS ) printf("%c",yytext[0]);*/}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 409 "compiler/EaseaLex.l"
{if( bGPOPCODE_ANALYSIS )printf("\n");lineCounter++;}
	YY_BREAK
/*
  This section analyse a GP rule which is written as : 
  OP_NAME, "realopname", arity (a number), { the c code for this operator};
  OP_NAME, "realopname", arity (a number), { the c code for this operator};
 */
case 25:
YY_RULE_SETUP
#line 417 "compiler/EaseaLex.l"
{
    /* this rule match the OP_NAME */
    if( iGP_OPCODE_FIELD != 0 ) {
      fprintf(stderr,"Error, OP_CODE name must be given first\n");
      exit(-1);
    }
    opDesc[iNoOp] = new OPCodeDesc();
    opDesc[iNoOp]->opcode = new string(yytext);
  }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 427 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 429 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 1 ){
    fprintf(stderr,"Error, op code real name must be given at the second place\n");
    exit(-1);
  }
  opDesc[iNoOp]->realName = new string(yytext);
 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 438 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 2 ){
    fprintf(stderr,"Error, arity must be given at the third place\n");
    exit(-1);
  }
  char* endptr;
  
  opDesc[iNoOp]->arity = strtol(yytext,&endptr,10);
  if( endptr==yytext ){
    fprintf(stderr, "warning, unable to translate this arity %s assuming 0\n",yytext);
    opDesc[iNoOp]->arity = 0;
  }
 }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 452 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 453 "compiler/EaseaLex.l"
{
  iGP_OPCODE_FIELD = 0;
  iNoOp++;
 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 458 "compiler/EaseaLex.l"
{
  if( bGPOPCODE_ANALYSIS ) iGP_OPCODE_FIELD++;
 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 463 "compiler/EaseaLex.l"
{
  if( iGP_OPCODE_FIELD != 3 ){
    fprintf(stderr,"Error, code must be given at the forth place\n");
    exit(-1);
  }
  accolade_counter=1;

//  printf("arity : %d\n",opDesc[iNoOp]->arity);
  if( opDesc[iNoOp]->arity>=2 )
    opDesc[iNoOp]->gpuCodeStream << "OP2 = stack[--sp];\n      ";
  if( opDesc[iNoOp]->arity>=1 )
    opDesc[iNoOp]->gpuCodeStream << "OP1 = stack[--sp];\n      ";

  BEGIN GP_COPY_OPCODE_CODE;
 }
	YY_BREAK
/*
  This section copy the code contained in the code part of the GP opcode rule
  It count the number of curly bracket, when it reaches 0, the code part is finished.
 */
case 33:
YY_RULE_SETUP
#line 483 "compiler/EaseaLex.l"
{
  accolade_counter++;
  opDesc[iNoOp]->cpuCodeStream << "{";
  opDesc[iNoOp]->gpuCodeStream << "{";
 }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 489 "compiler/EaseaLex.l"
{
  accolade_counter--;
  if( accolade_counter==0 ){
    opDesc[iNoOp]->gpuCodeStream << "\n      stack[sp++] = RESULT;\n";

    BEGIN GP_RULE_ANALYSIS;
  }
  else{
    opDesc[iNoOp]->cpuCodeStream << "}";
    opDesc[iNoOp]->gpuCodeStream << "}";
  }
 }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 502 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_input = strtol(yytext+strlen("INPUT["),&endptr,10);
//  printf("input no : %d\n",no_input);
  opDesc[iNoOp]->cpuCodeStream << "input["<< no_input <<"]" ;
  opDesc[iNoOp]->gpuCodeStream << "input["<< no_input << "]";  
 }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 510 "compiler/EaseaLex.l"
{
  opDesc[iNoOp]->isERC = true;
  opDesc[iNoOp]->cpuCodeStream << "root->erc_value" ;
  opDesc[iNoOp]->gpuCodeStream << "k_progs[start_prog++];" ;
//  printf("ERC matched\n");
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 517 "compiler/EaseaLex.l"
{
  opDesc[iNoOp]->cpuCodeStream << "\n  ";
  opDesc[iNoOp]->gpuCodeStream << "\n    ";
 }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 523 "compiler/EaseaLex.l"
{
  opDesc[iNoOp]->cpuCodeStream << yytext;
  opDesc[iNoOp]->gpuCodeStream << yytext;
 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 528 "compiler/EaseaLex.l"
{ 
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  if( bVERBOSE ) printf("Insert GP eval header\n");
  iCOPY_GP_EVAL_STATUS = EVAL_HDR;
  fprintf(fpOutputFile,"  ");
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 539 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_BDY;
  if( bVERBOSE ) printf("Insert GP eval body\n");
  fprintf(fpOutputFile,"      ");
  bCOPY_GP_EVAL_GPU = false;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 553 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_BDY;
  if( bVERBOSE ) printf("Insert GP eval body\n");
  fprintf(fpOutputFile,"      ");
  bCOPY_GP_EVAL_GPU = true;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 567 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_FTR;
  if( bVERBOSE ) printf("Insert GP eval footer\n");
  fprintf(fpOutputFile,"  ");
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 578 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bIsCopyingGPEval = false;
  iCOPY_GP_EVAL_STATUS = EVAL_FTR;
  if( bVERBOSE ) printf("Insert GP eval footer\n");
  fprintf(fpOutputFile,"  ");
  bCOPY_GP_EVAL_GPU = true;
  BEGIN COPY_GP_EVAL;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_GP_EVAL):
#line 591 "compiler/EaseaLex.l"
{
  switch(iCOPY_GP_EVAL_STATUS){
  case EVAL_HDR:
    fprintf(stderr,"Error, no evaluator header has been defined\n");
    exit(-1);
  case EVAL_BDY:
    fprintf(stderr,"Error, no evaluator body has been defined\n");
    exit(-1);
  case EVAL_FTR:
    fprintf(stderr,"Error, no evaluator footer has been defined\n");
    exit(-1);
  }
 }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 606 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_HDR){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 612 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_BDY){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 620 "compiler/EaseaLex.l"
{
  if( iCOPY_GP_EVAL_STATUS==EVAL_FTR){
    bIsCopyingGPEval = true;
  }
 }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 626 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval ){
    bIsCopyingGPEval = false;
    bCOPY_GP_EVAL_GPU = false;
    rewind(fpGenomeFile);
    yyin = fpTemplateFile;
    yypop_buffer_state();
    BEGIN TEMPLATE_ANALYSIS;
  }
 }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 637 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval ) fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 641 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval) 
    //if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[i]" );
    //else fprintf(fpOutputFile, "outputs[i]" );
  
 }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 649 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_output = strtol(yytext+strlen("OUTPUT["),&endptr,10);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[(i+%d)*NUMTHREAD+tid]", no_output);
    else fprintf(fpOutputFile, "outputs[i+%d]", no_output );
  
 }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 659 "compiler/EaseaLex.l"
{
	char *var;
	var = strndup(yytext+strlen("OUTPUT["), strlen(yytext) - strlen("OUTPUT[") - 1);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "outputs[(i+%s)*NUMTHREAD+tid]", var);
    else fprintf(fpOutputFile, "outputs[i+%s]", var);
  
 }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 669 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[i*NUMTHREAD+tid]" );
    else fprintf(fpOutputFile, "inputs[i][0]" );
  
 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 677 "compiler/EaseaLex.l"
{
  char* endptr;
  unsigned no_input = strtol(yytext+strlen("INPUT["),&endptr,10);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[(i+%d)*NUMTHREAD+tid]", no_input);
    else fprintf(fpOutputFile, "inputs[i+%d][0]", no_input );
  
 }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 687 "compiler/EaseaLex.l"
{
	char *var;
	var = strndup(yytext+strlen("INPUT["), strlen(yytext) - strlen("INPUT[") - 1);
  if( bIsCopyingGPEval) 
    if( bCOPY_GP_EVAL_GPU )
      fprintf(fpOutputFile, "k_inputs[(i+%s)*NUMTHREAD+tid]", var);
    else fprintf(fpOutputFile, "inputs[i+%s][0]", var);
  
 }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 697 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    if( iCOPY_GP_EVAL_STATUS==EVAL_FTR )
      if( bCOPY_GP_EVAL_GPU ){
	fprintf(fpOutputFile,"k_results[index] =");
      }
      else fprintf(fpOutputFile,"return fitness=");
 }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 709 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    switch(iCOPY_GP_EVAL_STATUS){
    case EVAL_FTR:
    case EVAL_HDR:
      fprintf(fpOutputFile,"\n  ");
      break;
    case EVAL_BDY:
      fprintf(fpOutputFile,"\n      ");
      break;
    }
 }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 723 "compiler/EaseaLex.l"
{
  if( bIsCopyingGPEval )
    fprintf(fpOutputFile,"return fitness = "); 
 }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 730 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("insert beg");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  if (bVERBOSE) printf ("Evaluation population in a single function!!.\n");
  lineCounter = 1;
  BEGIN COPY_INSTEAD_EVAL;
 }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 739 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting at the end of each generation function.\n");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bEndGeneration = true;
  bBeginGeneration = false;
  BEGIN COPY_END_GENERATION_FUNCTION;
 }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 748 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting Bound Checking function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_BOUND_CHECKING_FUNCTION;
 }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 755 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Analysing user classes.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN ANALYSE_USER_CLASSES;
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 762 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting User classes.\n");
  fprintf (fpOutputFile,"// User classes\n");
  CListItem<CSymbol*> *pSym;
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem())
    if ((pSym->Object->pType->ObjectType==oUserClass)&&(!pSym->Object->pType->bAlreadyPrinted)){
      //DEBUG_PRT_PRT("%p",pSym->Object->pType);
      pSym->Object->pType->printClasses(fpOutputFile);
    }

  if( TARGET == CUDA ){
    //DEBUG_PRT_PRT("User classes are :");
    for( int i = nClasses_nb-1 ; i>=0 ; i-- ){
      //DEBUG_PRT_PRT(" %s, %p ,%d| ",pCLASSES[i]->sName,pCLASSES[i],pCLASSES[i]->bAlreadyPrinted);
      if( !pCLASSES[i]->bAlreadyPrinted ){
	fprintf(fpOutputFile,"// User class not refereced by the Genome");
	pCLASSES[i]->printClasses(fpOutputFile);
      }
    }
    //DEBUG_PRT_PRT("\n");
  }
 }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 785 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome constructor.\n");
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"    %s=NULL;\n",pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 797 "compiler/EaseaLex.l"
{
  size_t size_of_genome=0;
  if (bVERBOSE) printf ("Inserting default genome size.\n");
  if( !genomeSizeValidity ){
    if (bVERBOSE) printf ("\tComputing default genome size.\n");  
    CListItem<CSymbol*> *pSym;
    pGENOME->pSymbolList->reset();
    while (pSym=pGENOME->pSymbolList->walkToNextItem()){
      //DEBUG_PRT_PRT("%s has size : %lu",pSym->Object->sName,pSym->Object->nSize);
      size_of_genome+=pSym->Object->nSize;
    }
    //DEBUG_PRT_PRT("Total genome size is %lu",size_of_genome); 
    genomeSize = size_of_genome;
    genomeSizeValidity=true;
  }
  else{
    size_of_genome = genomeSize;
  }
  fprintf(fpOutputFile,"%d",size_of_genome);
 }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 818 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome constructor.\n");
  pGENOME->pSymbolList->reset();

  fprintf(fpOutputFile,"\tmemcpy(GENOME_ACCESS(id,buffer),this,Individual::sizeOfGenome);");

  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"    %s=NULL;\n",pSym->Object->sName);
    }
  }
  
 }
	YY_BREAK
/* <TEMPLATE_ANALYSIS>"\\GENOME_CUDA_MOTION" { */
/*   if (bVERBOSE) printf ("Inserting default genome cuda motion function.\n"); */
/*   CListItem<CSymbol*> *pSym; */
/*   if (bVERBOSE) printf ("Creating default copy constructor.\n"); */
/*   fprintf (fpOutputFile,"// Memberwise copy\n");              */
/*   pGENOME->pSymbolList->reset(); */
/*   while (pSym=pGENOME->pSymbolList->walkToNextItem()){ */
/*     if (pSym->Object->ObjectQualifier==1) continue; // 1=Static */
/*     if (pSym->Object->ObjectType==oObject) */
/*       fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName); */
/*     if (pSym->Object->ObjectType==oPointer) */
/*       fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName); */
/*     if (pSym->Object->ObjectType==oArray){ */
/* /\*       fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize); *\/ */
/* /\*       fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName); *\/ */
/*     } */
/*   } */
/*  } */
case 66:
YY_RULE_SETUP
#line 858 "compiler/EaseaLex.l"
{        
  if (pGENOME->sString) {
    if (bVERBOSE) printf ("Inserting Methods into Genome Class.\n");
    fprintf(fpOutputFile,"// User-defined methods:\n\n");
    fprintf(fpOutputFile,"%s\n",pGENOME->sString);
  }
  if (bVERBOSE) printf ("Inserting genome.\n");
  pGENOME->print(fpOutputFile);
 }                                            
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 867 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default assignment constructor.\n");
  fprintf (fpOutputFile,"// Memberwise assignment\n");             
  pGENOME->pSymbolList->reset();                                      
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"    %s=new %s(*(genome.%s));\n",pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 884 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default clone method.\n");
  fprintf (fpOutputFile,"// Memberwise Cloning\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oPointer)
	fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
  }
 }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 902 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default copy constructor.\n");
  fprintf (fpOutputFile,"// Memberwise copy\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    %s=genome.%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oPointer)
	fprintf(fpOutputFile,"    %s=(genome.%s ? new %s(*(genome.%s)) : NULL);\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       %s[EASEA_Ndx]=genome.%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
      else if( pSym->Object->ObjectType==oArrayPointer ){ 
	// here we handle array of pointer (developped for Tree GP)
	fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
	fprintf(fpOutputFile,"      if(genome.%s[EASEA_Ndx]) %s[EASEA_Ndx] = new %s(*(genome.%s[EASEA_Ndx]));\n",pSym->Object->sName,
		pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
	fprintf(fpOutputFile,"      else %s[EASEA_Ndx] = NULL;\n",pSym->Object->sName);
	
      }
      
  }
 }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 929 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome serializer.\n");
  fprintf (fpOutputFile,"// Memberwise serialization\n");
  pGENOME->pSymbolList->reset();
  pGENOME->serializeIndividual(fpOutputFile, "this");
  //fprintf(fpOutputFile,"\tEASEA_Line << endl;\n");
 }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 938 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Inserting default genome deserializer.\n");
  fprintf (fpOutputFile,"// Memberwise deserialization\n");
  pGENOME->pSymbolList->reset();
  pGENOME->deserializeIndividual(fpOutputFile, "this");
 }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 946 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default copy constructor.\n");
  fprintf (fpOutputFile,"// Memberwise copy\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
      if (pSym->Object->ObjectType==oObject)
	fprintf(fpOutputFile,"    dest->%s=src->%s;\n",pSym->Object->sName,pSym->Object->sName);
      if (pSym->Object->ObjectType==oArray){
	fprintf(fpOutputFile,"    {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	fprintf(fpOutputFile,"       dest->%s[EASEA_Ndx]=src->%s[EASEA_Ndx];}\n",pSym->Object->sName,pSym->Object->sName);
      }
  }
 }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 962 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default destructor.\n");
  fprintf (fpOutputFile,"// Destructing pointers\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectType==oPointer){
      fprintf(fpOutputFile,"  if (%s) delete %s;\n  %s=NULL;\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->sName);
    }
    else if( pSym->Object->ObjectType==oArrayPointer ){ 
      // here we handle array of pointer (developped for Tree GP)
      fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
      fprintf(fpOutputFile,"      if(%s[EASEA_Ndx]) delete %s[EASEA_Ndx];\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 979 "compiler/EaseaLex.l"
{       
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default diversity test.\n");
  fprintf (fpOutputFile,"// Default diversity test (required by GALib)\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()) {
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"  if (%s!=genome.%s) return 0;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"  if (*%s!=*(genome.%s)) return 0;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"  {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"     if (%s[EASEA_Ndx]!=genome.%s[EASEA_Ndx]) return 0;}\n",pSym->Object->sName,pSym->Object->sName);
    }
    else if( pSym->Object->ObjectType==oArrayPointer ){ 
      // here we handle array of pointer (developped for Tree GP)
      fprintf(fpOutputFile,"    for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/sizeof(char*));
      fprintf(fpOutputFile,"      if(%s[EASEA_Ndx] != genome.%s[EASEA_Ndx]) return 0;\n",pSym->Object->sName,pSym->Object->sName,pSym->Object->pType->sName,pSym->Object->sName);
    }
    
  }
 }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1001 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default genome comparator.\n");
  fprintf (fpOutputFile,"// Default genome comparator (required by GALib)\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()) {
    if (pSym->Object->ObjectType==oObject)
      fprintf(fpOutputFile,"  if (sis.%s!=bro.%s) diff++;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oPointer)
      fprintf(fpOutputFile,"  if (*(sis.%s)!=*(bro.%s)) diff++;\n",pSym->Object->sName,pSym->Object->sName);
    if (pSym->Object->ObjectType==oArray){
      fprintf(fpOutputFile,"  {for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
      fprintf(fpOutputFile,"     if (sis.%s[EASEA_Ndx]!=bro.%s[EASEA_Ndx]) diff++;}\n",pSym->Object->sName,pSym->Object->sName);
    }
  }
 }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1017 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (bVERBOSE) printf ("Creating default read command.\n");
  fprintf (fpOutputFile,"// Default read command\n");             
  pGENOME->pSymbolList->reset();
  while (pSym=pGENOME->pSymbolList->walkToNextItem()){
    if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
  }
 }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1026 "compiler/EaseaLex.l"
{        
  if (bVERBOSE) printf ("Inserting genome display function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_DISPLAY;   
 }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1034 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("Inserting user LDFLAGS.\n");
  yyin = fpGenomeFile;
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_MAKEFILE_OPTION;
 }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1041 "compiler/EaseaLex.l"
{
  CListItem<CSymbol*> *pSym;
  if (!bDisplayFunction){
    if (bVERBOSE) printf ("*** Creating default display function. ***\n");
    fprintf (fpOutputFile,"// Default display function\n");
    pGENOME->pSymbolList->reset();
    while (pSym=pGENOME->pSymbolList->walkToNextItem()){
      if (pSym->Object->ObjectQualifier==1) continue; // 1=Static
	if (pSym->Object->ObjectType==oObject){
	  if (bDisplayFunction) printf("//");
	}
	if (pSym->Object->ObjectType==oArray){
	  if (bDisplayFunction) printf("//");
	  if (bDisplayFunction) printf("//");
	  fprintf(fpOutputFile,"   for(int EASEA_Ndx=0; EASEA_Ndx<%d; EASEA_Ndx++)\n",pSym->Object->nSize/pSym->Object->pType->nSize);
	  if (bDisplayFunction) printf("//");
	  if (bDisplayFunction) printf("//");
	  fprintf(fpOutputFile,"  os << \"\\n\";\n",pSym->Object->sName);
	}         
	if (pSym->Object->ObjectType==oPointer){
	  if (bDisplayFunction) printf("//");
	}
    }
  }                      
 }    
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1066 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting user functions.\n");
  yyin = fpGenomeFile;                    
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=2;                                 // switch to .ez file and analyser
  BEGIN COPY_USER_FUNCTIONS;
 }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1073 "compiler/EaseaLex.l"
{        
  bWithinEO_Function=1;
  lineCounter=1;
  if( TARGET==CUDA || TARGET==STD) bWithinCUDA_Initializer = 1;
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN COPY_EO_INITIALISER;                               // not implemented as a function !
 }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1082 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter = 1;
  BEGIN COPY_INITIALISER;   
 }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1089 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Inserting Finalization function.\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_FINALIZATION_FUNCTION;
 }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1097 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_CROSSOVER;   
 }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1103 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_MUTATOR;   
 }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1109 "compiler/EaseaLex.l"
{
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_EVALUATOR;   
 }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1115 "compiler/EaseaLex.l"
{      
  if( bVERBOSE ) fprintf(stdout,"Inserting optimization function\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  lineCounter=1;
  BEGIN COPY_OPTIMISER;   
 }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1122 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bWithinCUDA_Evaluator = 1;
  lineCounter=1;
  BEGIN COPY_EVALUATOR;
 }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1129 "compiler/EaseaLex.l"
{ 
  if( bVERBOSE ) fprintf(stdout,"Inserting cuda optimization function\n");
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  bWithinCUDA_Evaluator = 1;
  lineCounter=1;
  BEGIN COPY_OPTIMISER;
 }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1138 "compiler/EaseaLex.l"
{        
  yyin = fpGenomeFile;                                                     // switch to .ez file and analyser
  yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE ));
  BEGIN PARAMETERS_ANALYSIS;   
 }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1143 "compiler/EaseaLex.l"
{
  if (bGenerationReplacementFunction) {
    if( bVERBOSE ) fprintf(stdout,"Inserting generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEAGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1152 "compiler/EaseaLex.l"
{
  if( bEndGenerationFunction ) {
    if( bVERBOSE ) fprintf(stdout,"Inserting end generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEAEndGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1161 "compiler/EaseaLex.l"
{
  if( bBeginGenerationFunction ) {
    if( bVERBOSE ) fprintf(stdout,"Inserting beginning generation function call\n");
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEABeginningGenerationFunction(this);");
    }
  }
 }     
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1171 "compiler/EaseaLex.l"
{
  if (bBoundCheckingFunction) {
    if( TARGET==CUDA || TARGET==STD ){
      fprintf(fpOutputFile,"\n\tEASEABoundChecking(this);");
    }
  }
 }        
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1179 "compiler/EaseaLex.l"
{
    fprintf(fpOutputFile,"%d",bIsParentReduce);
 }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1183 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"%d",bIsOffspringReduce);
 }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1187 "compiler/EaseaLex.l"
{
  if (bInitFunction) fprintf(fpOutputFile,"\n  EASEAInitFunction(argc, argv);\n");
 }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1191 "compiler/EaseaLex.l"
{
  if (bFinalizationFunction) fprintf(fpOutputFile,"\n  EASEAFinalization(pop);\n");
 }        
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1195 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("Inserting user classe definitions");
  pGENOME->printUserClasses(fpOutputFile);
 }        
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1200 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Selector is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sSELECTOR);
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1213 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sSELECTOR_OPERATOR);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1214 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fSELECT_PRM);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1215 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_PAR_OPERATOR);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1216 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_PAR_PRM);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1217 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_OFF_OPERATOR);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1218 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_OFF_PRM);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1219 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",sRED_FINAL_OPERATOR);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1220 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fRED_FINAL_PRM);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1221 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nPOP_SIZE);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1222 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nOFF_SIZE);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1223 "compiler/EaseaLex.l"
{ fprintf(fpOutputFile,"%d",nELITE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1224 "compiler/EaseaLex.l"
{ fprintf(fpOutputFile,"%d",iNO_FITNESS_CASES); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1225 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nARCH_SIZE);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1227 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Parent reduction is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_PAR);
 }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1240 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Offspring reduction is \"%s\" | Goal is %s",sSELECTOR,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sSELECTOR);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : selection operator %s doesn't exist in CUDA/STD template\n",yylineno,sSELECTOR);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_OFF);
 }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1253 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD){
    //DEBUG_PRT_PRT("Replacement selector is \"%s\" | Goal is %s",sRED_FINAL,(nMINIMISE?"Minimize":"Maximize"));
    char* selectorClass = selectorDetermination(nMINIMISE,sRED_FINAL);
    if( !selectorClass ){
      fprintf(stderr,"Error %d : replacement operator %s doesn't exist in CUDA/TPL template\n",yylineno,sRED_FINAL);
      return -1;
    }    
    //DEBUG_PRT_PRT("Created class is %s",selectorClass);
    fprintf(fpOutputFile,"%s",selectorClass);
  }
  else fprintf(fpOutputFile,"%s",sRED_FINAL);
 }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1266 "compiler/EaseaLex.l"
{
if(OPERATING_SYSTEM=WINDOWS)
	fprintf(fpOutputFile,"%s\\",getenv("NVSDKCUDA_ROOT"));
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1270 "compiler/EaseaLex.l"
{if(fSURV_PAR_SIZE>=0.0)fprintf(fpOutputFile,"%f",fSURV_PAR_SIZE); else fprintf(fpOutputFile,"%f",(float)nPOP_SIZE);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1271 "compiler/EaseaLex.l"
{if(fSURV_OFF_SIZE>=0.0)fprintf(fpOutputFile,"%f",fSURV_OFF_SIZE); else fprintf(fpOutputFile,"%f",(float)nOFF_SIZE);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1272 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",nGENOME_NAME);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1273 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nPROBLEM_DIM);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1274 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nNB_GEN);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1275 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nTIME_LIMIT);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1276 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fMUT_PROB);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1277 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fXOVER_PROB);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1278 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",(nMINIMISE? "true" : "false")); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1279 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bELITISM);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1281 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nNB_OPT_IT);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1282 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bBALDWINISM);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1284 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bREMOTE_ISLAND_MODEL);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1285 "compiler/EaseaLex.l"
{if(strlen(sIP_FILE)>0)fprintf(fpOutputFile,"%s",sIP_FILE); else fprintf(fpOutputFile,"NULL");}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1286 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%f",fMIGRATION_PROBABILITY);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1287 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",nSERVER_PORT);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1289 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bPRINT_STATS);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1290 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bPLOT_STATS);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1291 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_CSV_FILE);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1292 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_GNUPLOT_SCRIPT);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1293 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bGENERATE_R_SCRIPT);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1295 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bSAVE_POPULATION);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1296 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%d",bSTART_FROM_FILE);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1298 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,"Individual.hpp");
  fpOutputFile=fopen(sFileName,"w");    
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
 }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1306 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  if( TARGET==CUDA )
    strcat(sFileName,"Individual.cu");
  else if( TARGET==STD )
    strcat(sFileName,"Individual.cpp");
  fpOutputFile=fopen(sFileName,"w");    
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
 }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1317 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".prm");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1325 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".mak");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1334 "compiler/EaseaLex.l"
{
  char sFileName[1000];
 fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".vcproj");
  if (bVERBOSE) printf("Creating %s...\n",sFileName);
  fpOutputFile=fopen(sFileName,"w");
 }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1343 "compiler/EaseaLex.l"
{
  char sFileName[1000];
  char sPathName[1000];
  char sFullFileName[1000];
  fclose(fpOutputFile);
  strcpy(sFileName, sRAW_PROJECT_NAME);
  strcat(sFileName,".mak");

  // get the path without fillename
  int fileNameLength = -1;
  for( int i=strlen(sRAW_PROJECT_NAME) ; i>=0 ; i-- )
    if( sRAW_PROJECT_NAME[i] == '/' ){
      fileNameLength = i;
      break;
    }
  if( fileNameLength != -1 ){
    // add "Makefile" at the end of path
    //char* cdn = get_current_dir_name();
    char cdn[4096];
    #ifdef WIN32 
    _getcwd(cdn,4096);
    #else
    getcwd(cdn,4096);
    #endif
    size_t cdnLength = strlen(cdn);
    strcpy(sFullFileName,cdn);
    strcat(sFullFileName,"/\0");
    strcat(sFullFileName,sFileName);
    
    strncpy(sPathName,sRAW_PROJECT_NAME,fileNameLength);
    strcpy(sPathName+fileNameLength,"/Makefile");
    
    //DEBUG_PRT_PRT("PathName is %s",sPathName);
    //DEBUG_PRT_PRT("FullFileName is %s",sFullFileName);
    
  
    // create a symbolic link from Makefile to EASEA.mak
#ifndef WIN32
    symlink(sFullFileName,sPathName);
#endif
  }
  else{
    //DEBUG_PRT_PRT("file name : %s",sFileName);
#ifndef WIN32
    if( symlink(sFileName,"Makefile") ) perror("Symlink creation error ");
#endif
  }
  if (bVERBOSE){
    printf("Creating %s...\n",sFileName);
    printf("Creating %s symbolic link...\n",sPathName);
  }
  fpOutputFile=fopen(sFileName,"w");
  if( !fpOutputFile ) {
    fprintf(stderr,"Error in %s creation\n",sFileName);
    exit(-1);
  }
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1400 "compiler/EaseaLex.l"
{
  if (nWARNINGS) printf ("\nWARNING !!!\nTarget file(s) generation went through WITH %d WARNING(S) !\n",nWARNINGS);
  else printf ("\nCONGRATULATIONS !!!\nTarget file(s) generation succeeded without warnings.\n");
  printf ("You can now type \"make\" to compile your project.\n");
  if (TARGET==CUDA || TARGET==STD) fprintf(fpOutputFile,"\n# That's all folks ! \n");
  else fprintf(fpOutputFile,"\n// That's all folks ! \n");
  fflush(fpOutputFile);
  fclose(fpOutputFile);
  fclose(fpTemplateFile);
  fclose(fpGenomeFile);
  return TEMPLATE_END;
 }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1413 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
 *  use information found in .ez file
 *****************************************/
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1419 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// Genome Initialiser\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_EO_INITIALISER):
#line 1425 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No genome initialiser was found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1433 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1434 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1436 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User declarations\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_DECLARATIONS):
#line 1442 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user declarations were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1451 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1452 "compiler/EaseaLex.l"
{
  lineCounter++;
 } 
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1456 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User CUDA\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_CUDA):
#line 1462 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user CUDA were found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1471 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1472 "compiler/EaseaLex.l"
{
  lineCounter++;
 }                
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1476 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// User functions\n\n"); 
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY;
 }                                                               
	YY_BREAK
case YY_STATE_EOF(COPY_USER_FUNCTIONS):
#line 1482 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf("*** No user functions were found. ***\n");
  fprintf(fpOutputFile,"\n// No user functions.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1491 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1492 "compiler/EaseaLex.l"
{
  lineCounter++;
 }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1496 "compiler/EaseaLex.l"
{
    fprintf (fpOutputFile,"// Initialisation function\nvoid EASEAInitFunction(int argc, char *argv[]){\n");
  bFunction=1; bInitFunction=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
      
  BEGIN COPY;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_INITIALISATION_FUNCTION):
#line 1504 "compiler/EaseaLex.l"
{bInitFunction=0; // No before everything else function was found in the .ez file
  if (bVERBOSE) printf("*** No before everything else function was found. ***\n");
  fprintf(fpOutputFile,"\n// No before everything else function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();

  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1514 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1515 "compiler/EaseaLex.l"
{lineCounter++;} 
	YY_BREAK
/****************************************
 *  Easea GPGPU & EO Finalization function
 *****************************************/
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1521 "compiler/EaseaLex.l"
{
  fprintf (fpOutputFile,"// Finalization function\nvoid EASEAFinalization(CPopulation* population){\n");
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);

  bFunction=1; bFinalizationFunction=1;
  BEGIN COPY;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_FINALIZATION_FUNCTION):
#line 1530 "compiler/EaseaLex.l"
{bFinalizationFunction=0; // No after everything else function was found in the .ez file
  if (bVERBOSE) printf("*** No after everything else function was found. ***\n");
  fprintf(fpOutputFile,"\n// No after eveything else function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1539 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 1540 "compiler/EaseaLex.l"
{lineCounter++;}                                      
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1543 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each end");
  if( (TARGET==CUDA || TARGET==STD)  ){
    fprintf (fpOutputFile,"{\n");
    //fprintf (fpOutputFile,"// Function called at each new generation\nvoid EASEAEndGenerationFunction(EvolutionaryAlgorithm* evolutionaryAlgorithm){\n");
    bFunction=1; 
    bEndGenerationFunction = 1;
    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case YY_STATE_EOF(COPY_END_GENERATION_FUNCTION):
#line 1554 "compiler/EaseaLex.l"
{
  bEndGenerationFunction=0; // No Generation function was found in the .ez file
  if( bVERBOSE) printf("*** No end generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No at end of generation function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1565 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1568 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each beg");
  if( (TARGET==CUDA || TARGET==STD)){
    fprintf (fpOutputFile,"{\n");
    bFunction=1;
    bBeginGeneration = 0;
    bBeginGenerationFunction = 1;
    if( bLINE_NUM_EZ_FILE )
      fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1581 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("at each beg");
  if( (TARGET==CUDA || TARGET==STD)){
    fprintf (fpOutputFile,"{\n");
    bFunction=1;
    if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);

    BEGIN COPY_USER_GENERATION;
  }
 }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1593 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 1594 "compiler/EaseaLex.l"
{lineCounter++;}                                      
	YY_BREAK
case YY_STATE_EOF(COPY_INSTEAD_EVAL):
#line 1596 "compiler/EaseaLex.l"
{
  bBeginGenerationFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No Instead evaluation step function was found. ***\n");
  fprintf(fpOutputFile,"\n// No Instead evaluation step function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_BEG_GENERATION_FUNCTION):
#line 1609 "compiler/EaseaLex.l"
{
  bBeginGenerationFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No beginning generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No at beginning of generation function.\n");

  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1621 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1622 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 1625 "compiler/EaseaLex.l"
{
//DEBUG_PRT_PRT("at each");
  if((TARGET==CUDA || TARGET==STD) /* && !bBeginGeneration && !bEndGeneration ) */)
  {
      fprintf (fpOutputFile,"{\n");
      bFunction=1; 
      bGenerationReplacementFunction=1;
      BEGIN COPY_USER_GENERATION;
  }
}
	YY_BREAK
case YY_STATE_EOF(COPY_GENERATION_FUNCTION_BEFORE_REPLACEMENT):
#line 1636 "compiler/EaseaLex.l"
{
  bGenerationFunctionBeforeReplacement=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No generation function was found. ***\n");
  fprintf(fpOutputFile,"\n// No generation function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1647 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1648 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 1651 "compiler/EaseaLex.l"
{
  if(TARGET==CUDA || TARGET==STD){
    //fprintf (fpOutputFile,"void EASEABoundChecking(EvolutionaryAlgorithm* evolutionaryAlgorithm){\n");
    fprintf (fpOutputFile,"{\n");
  }
  bFunction=1; bBoundCheckingFunction=1;
  BEGIN COPY_USER_GENERATION;
 }
	YY_BREAK
case YY_STATE_EOF(COPY_BOUND_CHECKING_FUNCTION):
#line 1660 "compiler/EaseaLex.l"
{bBoundCheckingFunction=0; // No Generation function was found in the .ez file
  if (bVERBOSE) printf("*** No bound checking function was found. ***\n");
  fprintf(fpOutputFile,"\n// No Bound checking function.\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 1671 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 1675 "compiler/EaseaLex.l"
{
  BEGIN GENOME_ANALYSIS; return CLASSES;}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 1677 "compiler/EaseaLex.l"
{}                                      
	YY_BREAK
/****************************************
  *  Basic copy to cpp file with minor changes
  ****************************************/
case 182:
YY_RULE_SETUP
#line 1683 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1684 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 1686 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else if(TARGET == STD) fprintf(fpOutputFile,"(*EZ_current_generation)");
    } // local genome name
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1689 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 186:
/* rule 186 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1691 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 1693 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 1695 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"ARCH_SIZE");
  else fprintf(fpOutputFile,"EZ_ARCH_SIZE");} // local genome name
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1697 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"MUT_PROB");
  else
    if( TARGET==STD || TARGET==CUDA){
      fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
    else fprintf(fpOutputFile,"EZ_MUT_PROB");
  
 } // local genome name
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 1707 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");
 } // local genome name
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1714 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1716 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE");
  else fprintf(fpOutputFile,"EZ_MINIMISE");} // local genome name
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 1718 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE");
  else fprintf(fpOutputFile,"EZ_MINIMIZE");} // local genome name
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1720 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE");
  else fprintf(fpOutputFile,"EZ_MAXIMISE");} // local genome name
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 1722 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE");
  else fprintf(fpOutputFile,"EZ_MAXIMIZE");} // local genome name
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1725 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA ){
    fprintf(fpOutputFile,"%s",yytext);
  }
 }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1731 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n",sEZ_FILE_NAME,yylineno); exit(1);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 1732 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The number of generations can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 1733 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1734 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the archive population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1736 "compiler/EaseaLex.l"
{
  fprintf(stderr,"\n%s - Error line %d: The mutation probability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); 
  exit (1);
}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 1741 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The crossover proability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1742 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The replacement percentage can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 1743 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 1744 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 1745 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1746 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The evaluation goal can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1747 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1748 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 1749 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1751 "compiler/EaseaLex.l"
{ // local random name 
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1753 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1755 "compiler/EaseaLex.l"
{
  if (bWithinEO_Function && TARGET!=CUDA && TARGET!=STD) fprintf(fpOutputFile,"_genotype");
  else if(bWithinEO_Function && bWithinCUDA_Initializer )fprintf(fpOutputFile,"(*this)");
  else fprintf(fpOutputFile,"Genome");} // local genome name
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1759 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1760 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext); BEGIN MACRO_IDENTIFIER;} 
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1761 "compiler/EaseaLex.l"
{
  int i;
  for (i=0;(yytext[i]!=' ')&&(yytext[i]!=' ');i++);
  yytext[i]=0;
  fprintf(fpOutputFile,"template <class fitT> %s %sGenome<fitT>::",yytext,sPROJECT_NAME);}         
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1766 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"template <class fitT> %sGenome<fitT>::",sPROJECT_NAME);}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1767 "compiler/EaseaLex.l"
{
  if( TARGET==CUDA || TARGET==STD) fprintf(fpOutputFile,"IndividualImpl");
  else fprintf(fpOutputFile,"%sGenome",sPROJECT_NAME);} // local name
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1770 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction){
	bWaitingToClosePopulation=true;
    fprintf(fpOutputFile,"((IndividualImpl*)pPopulation[");
  }
 }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1776 "compiler/EaseaLex.l"
{
  	if (!bWaitingToClosePopulation) fprintf(fpOutputFile,"]");
  	else {fprintf(fpOutputFile,"])"); ;bWaitingToClosePopulation=false;}}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1779 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction){
    fprintf(fpOutputFile,"pPopulation");
  }
  else fprintf(fpOutputFile,"/*pPopulation only in \"After everything else function\" this will cause an error*/ pPopulation");
 }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1785 "compiler/EaseaLex.l"
{
  if(bFinalizationFunction)
	fprintf(fpOutputFile,"((IndividualImpl*)bBest)");
  else fprintf(fpOutputFile,"/*bBest only in \"After everything else function\" this will cause an error*/ bBest");
  }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1790 "compiler/EaseaLex.l"
{
  if (bFunction==1 && bWithinCUDA_Initializer==0) {
    fprintf (fpOutputFile,"}\n"); 
    bFunction=0;
    bWithinCUDA_Initializer=0;
  }
  bWithinEO_Function=0;
  rewind(fpGenomeFile); 
  yyin = fpTemplateFile; 
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;} // Back to the template file
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1801 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/* Looking for an identifier */
case 225:
YY_RULE_SETUP
#line 1804 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"%s",yytext);
  pASymbol = new CSymbol(yytext); pASymbol->ObjectType=oMacro;
  BEGIN MACRO_DEFINITION; }
	YY_BREAK
/* If no identifier was found, we're not interested */
/* old rule : <MACRO_IDENTIFIER>\/.|\n
  * I don't understand why there is a "\/"...
  */
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1813 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);BEGIN COPY;}
	YY_BREAK
/* Looking for the first number following the macro definition */
/*gobbles up spaces and tabs*/
case 227:
YY_RULE_SETUP
#line 1818 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1819 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);
  pASymbol->dValue = myStrtod();
  pSymbolTable->insert(pASymbol);
  bSymbolInserted=1;
  BEGIN COPY;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1824 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"%s",yytext);
  pASymbol->dValue = atoi(yytext);
  pSymbolTable->insert(pASymbol);
  bSymbolInserted=1;
  BEGIN COPY;}
	YY_BREAK
/*If no number was found, we're not interested*/
/* old rule : <MACRO_DEFINITION>\/.|\n 
   * I don't understand why there is a "\/"...
   */
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1833 "compiler/EaseaLex.l"
{
  if (!bSymbolInserted) delete pASymbol;
  else bSymbolInserted=0;
  putc(yytext[0],fpOutputFile);
  BEGIN COPY;}
	YY_BREAK
/****************************************
 *  GENOME_ANALYSIS lexer
 *****************************************/
/* takes care of C++-like comments*/
/*blah blah on a line containing sth else*/
case 231:
YY_RULE_SETUP
#line 1846 "compiler/EaseaLex.l"
;         
	YY_BREAK
/*blah blah on its own on a single line*/
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1848 "compiler/EaseaLex.l"
;
	YY_BREAK
/* blah blah on a line containing sth else */
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1850 "compiler/EaseaLex.l"
;  
	YY_BREAK
/* blah blah with nothing before the comment */
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1852 "compiler/EaseaLex.l"
;
	YY_BREAK
/*gobbles up white spaces, tabs or carriage returns*/
case 235:
YY_RULE_SETUP
#line 1855 "compiler/EaseaLex.l"
{ /* do nothing */ }
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 1856 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 1857 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
/*keywords*/
case 238:
YY_RULE_SETUP
#line 1860 "compiler/EaseaLex.l"
{
  yylval.pSymbol = pSymbolTable->find("bool");
  return BOOL;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1863 "compiler/EaseaLex.l"
{
    yylval.pSymbol = new CSymbol(yytext);
    return IDENTIFIER;
    }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1867 "compiler/EaseaLex.l"
{
  yylval.pSymbol = new CSymbol("GPNode");
  //yylval.pSymbol->ObjectType = oPointer;
  //printf("match gpnode\n");
  return GPNODE;
 }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1874 "compiler/EaseaLex.l"
{return STATIC;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1875 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("int"); return INT;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1876 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("double"); return DOUBLE;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1877 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("float"); return FLOAT;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1878 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("char"); return CHAR;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1879 "compiler/EaseaLex.l"
{yylval.pSymbol = pSymbolTable->find("pointer"); return POINTER;}
	YY_BREAK
/*<GENOME_ANALYSIS>"pointer"                  {yylval.pSymbol = pSymbolTable->find("pointer"); return POINTER;}*/
/*Back to the template file*/
case 247:
YY_RULE_SETUP
#line 1882 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);yyin = fpTemplateFile;yypop_buffer_state();BEGIN TEMPLATE_ANALYSIS;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1884 "compiler/EaseaLex.l"
{return GENOME; }                         
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1886 "compiler/EaseaLex.l"
{BEGIN GET_METHODS;
  yylval.szString=yytext;  
  bMethodsInGenome=1;
  return METHODS;}
	YY_BREAK
/*number*/
case 250:
YY_RULE_SETUP
#line 1891 "compiler/EaseaLex.l"
{ yylval.dValue = myStrtod(); return NUMBER; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1892 "compiler/EaseaLex.l"
{yylval.dValue=atoi(yytext); return NUMBER;}
	YY_BREAK
/*identifier*/
case 252:
YY_RULE_SETUP
#line 1895 "compiler/EaseaLex.l"
{ yylval.pSymbol = new CSymbol(yytext);
  return IDENTIFIER; }
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1897 "compiler/EaseaLex.l"
{BEGIN GENOME_ANALYSIS; return END_METHODS;}
	YY_BREAK
/*****************************************
 *  Looking for a user-supplied display function.
 *****************************************/
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 1903 "compiler/EaseaLex.l"
{ 
 /*   //DEBUG_PRT_PRT("Display function is at %d line in %s.ez",yylineno,sRAW_PROJECT_NAME); */
 /*   fprintf(fpOutputFile,"\n#line %d \"%s.ez\"\n",yylineno,sRAW_PROJECT_NAME); */
  bDisplayFunction=bWithinDisplayFunction=1;
  BEGIN COPY_USER_FUNCTION;
 }
	YY_BREAK
/*No display function was found in the .ez file*/
case YY_STATE_EOF(COPY_DISPLAY):
#line 1910 "compiler/EaseaLex.l"
{
  bDisplayFunction=0;
  if (bVERBOSE) printf("*** No display function was found. ***\n");
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bNotFinishedYet=1;
 }
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1919 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1921 "compiler/EaseaLex.l"
{
  //DEBUG_PRT_PRT("LDFLAGS is beg: %s",yytext); 
  bWithinMAKEFILEOPTION=1;
  return MAKEFILE_OPTION;
 }
	YY_BREAK
/****************************************
  * Looks for Makefile options (like 
  * LDFLAGS+= or CPPFLAGS...)
  ****************************************/
case 257:
YY_RULE_SETUP
#line 1933 "compiler/EaseaLex.l"
{
  if( bWithinMAKEFILEOPTION ){
    //DEBUG_PRT_PRT("end of makefile options");
    yyin = fpTemplateFile;
    yypop_buffer_state();
    bWithinMAKEFILEOPTION = 0;
    BEGIN TEMPLATE_ANALYSIS;
    return END_OF_FUNCTION;
  }
 }
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1944 "compiler/EaseaLex.l"
{
  if( bWithinMAKEFILEOPTION ){
    putc(yytext[0],fpOutputFile);
    }
 }
	YY_BREAK
/*
 This rule is matched by the previous one
 <COPY_MAKEFILE_OPTION>\n {
  //if( bWithinMAKEFILEOPTION );
 }
 */
case YY_STATE_EOF(COPY_MAKEFILE_OPTION):
#line 1957 "compiler/EaseaLex.l"
{ 
  //DEBUG_PRT_PRT("No makefile options defined.");

  yyin = fpTemplateFile;
  yypop_buffer_state();
  bWithinMAKEFILEOPTION = 0;
  BEGIN TEMPLATE_ANALYSIS;

  return MAKEFILE_OPTION;
 }
	YY_BREAK
/****************************************
  *  Looks for standard and user functions in the .ez file
  ****************************************/
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 1971 "compiler/EaseaLex.l"
{
  bWithinInitialiser=1;
  BEGIN COPY_USER_FUNCTION;
  BEGIN TEMPLATE_ANALYSIS;
  return USER_CTOR;
 }
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 1977 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 1978 "compiler/EaseaLex.l"
{
  bWithinXover=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY_USER_FUNCTION;
  return USER_XOVER;
 }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1985 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 1986 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 1987 "compiler/EaseaLex.l"
{
  bWithinMutator=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  BEGIN COPY_USER_FUNCTION;
  return USER_MUTATOR;
 }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1994 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1995 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 1997 "compiler/EaseaLex.l"
{
  BEGIN COPY_USER_FUNCTION;            
  bWithinEvaluator=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  return USER_EVALUATOR;
 }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2004 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 2005 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 2008 "compiler/EaseaLex.l"
{
  BEGIN COPY_USER_FUNCTION;
  bWithinOptimiser=1;
  if( bLINE_NUM_EZ_FILE )
    fprintf(fpOutputFile,"#line %d \"%s.ez\"\n",lineCounter, sRAW_PROJECT_NAME);
  return USER_OPTIMISER;
 }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2015 "compiler/EaseaLex.l"
{}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 2016 "compiler/EaseaLex.l"
{lineCounter++;}
	YY_BREAK
/****************************************
  *  Basic copy to .cpp file with major changes
  ****************************************/
/*blah blah on a line containing sth else*/
case 273:
YY_RULE_SETUP
#line 2023 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/*blah blah on its own on a single line*/
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 2025 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} 
	YY_BREAK
/* blah blah on a line containing sth else */
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 2027 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/* blah blah with nothing before the comment */
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 2029 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}
	YY_BREAK
/*local genome name*/
case 277:
YY_RULE_SETUP
#line 2031 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome");}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2032 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2033 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2035 "compiler/EaseaLex.l"
{bWaitingToClosePopulation=true;
    fprintf(fpOutputFile,"((IndividualImpl*)pPopulation[");
 }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 2038 "compiler/EaseaLex.l"
{
  if (!bWaitingToClosePopulation) fprintf(fpOutputFile,"]");
  else {
    fprintf(fpOutputFile,"])"); 
    bWaitingToClosePopulation=false;
  }
 }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2046 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else {
      fprintf(fpOutputFile,"(*EZ_current_generation)");}} // local genome name
	YY_BREAK
case 283:
/* rule 283 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 17);
(yy_c_buf_p) = yy_cp = yy_bp + 17;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2050 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else {
      fprintf(fpOutputFile,"(*EZ_current_generation)");}} // local genome name
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2054 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
 /*local genome name*/
  else {fprintf(fpOutputFile,"(*EZ_NB_GEN)"); }} 
	YY_BREAK
case 285:
/* rule 285 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2057 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
 /*local genome name*/
  else {fprintf(fpOutputFile,"(*EZ_NB_GEN)"); }} 
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 2060 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");}
	YY_BREAK
/*local genome name*/
case 287:
/* rule 287 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2062 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2063 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"ARCH_SIZE");}
	YY_BREAK
/*local genome name*/
case 289:
/* rule 289 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2065 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"ARCH_SIZE");}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2066 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else {fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
 }
	YY_BREAK
/* local genome name*/
case 291:
/* rule 291 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2072 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else {fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
    }
 }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 2077 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"XOVER_PROB");
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");     
    }
 }
	YY_BREAK
/*local genome name*/
case 293:
/* rule 293 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2084 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"XOVER_PROB");
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");     
    }
 }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2090 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC"); //local genome name
    }
	YY_BREAK
case 295:
/* rule 295 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2092 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC"); //local genome name
    }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2094 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE"); // local genome name
    } 
	YY_BREAK
case 297:
/* rule 297 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2096 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMISE"); // local genome name
    } 
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2098 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE"); // local genome name
    }
	YY_BREAK
case 299:
/* rule 299 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2100 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MINIMIZE"); // local genome name
    }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 2102 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE"); // local genome name
    }
	YY_BREAK
case 301:
/* rule 301 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2104 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMISE"); // local genome name
    }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 2106 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE"); // local genome name
    }
	YY_BREAK
case 303:
/* rule 303 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2108 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"MAXIMIZE"); // local genome name
    }
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 2111 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n    hint -> You must have meant \"NB_GEN=...\" rather than \"currentGeneration=...\"\n",sEZ_FILE_NAME,yylineno);
  exit(1);
 } 
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 2116 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*EZ_NB_GEN)=");
    }} // local genome name
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 2120 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    } // local genome name
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 2122 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    } // local genome name
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 2124 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*pEZ_MUT_PROB)=");
    }
 } // local genome name
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 2129 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
  else {
      fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)=");
    }
 } // local genome name
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 2134 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    } // local genome name
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 2136 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 2138 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 2140 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 2142 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"%s",yytext);
    }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 2144 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 2145 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 2146 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 2148 "compiler/EaseaLex.l"
{ // local random name
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 2150 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 2152 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 2153 "compiler/EaseaLex.l"
{
  if(bBeginGenerationFunction || bEndGenerationFunction || bGenerationFunctionBeforeReplacement){
    fprintf(fpOutputFile,"pPopulation)");
  }
  else fprintf(fpOutputFile,"pPopulation");
 }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 2159 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"((IndividualImpl*)bBest)");
 }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 2162 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  fprintf(fpOutputFile,"}");} // Back to the template file
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 2167 "compiler/EaseaLex.l"
{if (bWaitingForSemiColon){
    bWaitingForSemiColon=0;
    if (bFinishMINIMISE) {fprintf(fpOutputFile,");\n  if (MINIMISE) g.minimize() else g.maximize();\n"); bFinishMINIMISE=0;}
    if (bFinishMINIMIZE) {fprintf(fpOutputFile,");\n  if (MINIMIZE) g.minimize() else g.maximize();\n"); bFinishMINIMISE=0;}
    if ((bFinishNB_GEN)&&(OPERATING_SYSTEM==UNIX))
      {fprintf(fpOutputFile,"));\n  if ( (EZ_daFITNESS = (double *) realloc(EZ_daFITNESS, ((*EZ_NB_GEN) +1)* sizeof (double) )) == NULL){\n");
	fprintf(fpOutputFile,"    fprintf(stderr,\"Not enough memory... bailing out.\");\n    exit(1);");}
    else if (bFinishNB_GEN) {fprintf(fpOutputFile,"));"); bFinishNB_GEN=0;}
    else fprintf(fpOutputFile,"));");
  }
  else fprintf(fpOutputFile,";");}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 2178 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"(*evoluationaryAlgorithm).");}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 2179 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"(*evoluationaryAlgorithm).");}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 2180 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
  *  Basic copy to .cpp file with minor changes
  ****************************************/
/* takes care of C++-like comments */
case 328:
YY_RULE_SETUP
#line 2187 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}         // blah blah on a line containing sth else
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 2188 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} // blah blah on its own on a single line
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 2189 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);printf("%s\n",yytext);}  /* blah blah on a line containing sth else */
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 2190 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);}  /* blah blah on a line containing sth else */
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 2191 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,yytext);} /* blah blah with nothing before the comment */
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 2193 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"Genome.");
 }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 2197 "compiler/EaseaLex.l"
{
  if( bWithinCUDA_Evaluator && TARGET==CUDA && TARGET_FLAVOR==CUDA_FLAVOR_MO ){
    fprintf(fpOutputFile,"(f[0])");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 2205 "compiler/EaseaLex.l"
{
  if( bWithinCUDA_Evaluator &&  TARGET==CUDA && TARGET_FLAVOR==CUDA_FLAVOR_MO ){
    fprintf(fpOutputFile,"(f[1])");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 2214 "compiler/EaseaLex.l"
{
  if( ((bWithinEvaluator || bWithinOptimiser) && !bWithinCUDA_Evaluator) && ( TARGET==STD || TARGET==CUDA )){
    fprintf(fpOutputFile,"");
  }
  else
    fprintf(fpOutputFile,"%s",yytext);
 }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 2223 "compiler/EaseaLex.l"
{

  if(bWithinOptimiser || bWithinEvaluator || bWithinMutator || bWithinDisplayFunction){ 
    if( bWithinCUDA_Evaluator)
      fprintf(fpOutputFile, "(*INDIVIDUAL_ACCESS(devBuffer,id))");
    else fprintf(fpOutputFile, "(*this)");
  }

  else fprintf(fpOutputFile,"Genome");} // local genome name
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 2233 "compiler/EaseaLex.l"
{(bDoubleQuotes ? bDoubleQuotes=0:bDoubleQuotes=1); fprintf(fpOutputFile,"\"");}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 2234 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"\\\"");}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 2236 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else switch  (TARGET) {
    case STD : fprintf(fpOutputFile,"(*EZ_current_generation)"); break;
    }} // local genome name
	YY_BREAK
case 341:
/* rule 341 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 17);
(yy_c_buf_p) = yy_cp = yy_bp + 17;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2240 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"currentGeneration");
  else switch  (TARGET) {
    case STD : fprintf(fpOutputFile,"(*EZ_current_generation)"); break;
    }} // local genome name
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 2244 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 343:
/* rule 343 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2246 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"NB_GEN");
  else fprintf(fpOutputFile,"(*EZ_NB_GEN)");} // local genome name
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 2248 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 345:
/* rule 345 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2250 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"POP_SIZE");
  else fprintf(fpOutputFile,"EZ_POP_SIZE");} // local genome name
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 2252 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"ARCH_SIZE");
  else fprintf(fpOutputFile,"EZ_ARCH_SIZE");} // local genome name
	YY_BREAK
case 347:
/* rule 347 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2254 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"ARCH_SIZE");
  else fprintf(fpOutputFile,"EZ_ARCH_SIZE");} // local genome name
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 2256 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else if( TARGET==CUDA || TARGET==STD)
    fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
  else fprintf(fpOutputFile,"EZ_MUT_PROB");
 } // local genome name
	YY_BREAK
case 349:
/* rule 349 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2262 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) fprintf(fpOutputFile,"MUT_PROB");
  else if( TARGET==CUDA || TARGET==STD)
    fprintf(fpOutputFile,"(*pEZ_MUT_PROB)");
  else fprintf(fpOutputFile,"EZ_MUT_PROB");
 } // local genome name
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 2268 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");} // local genome name
	YY_BREAK
case 351:
/* rule 351 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2274 "compiler/EaseaLex.l"
{
  if (bDoubleQuotes) 
    fprintf(fpOutputFile,"XOVER_PROB");
  else if( TARGET==CUDA || TARGET==STD )
    fprintf(fpOutputFile,"(*pEZ_XOVER_PROB)");
  else fprintf(fpOutputFile,"EZ_XOVER_PROB");} // local genome name
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 2280 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 353:
/* rule 353 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 2282 "compiler/EaseaLex.l"
{if (bDoubleQuotes) fprintf(fpOutputFile,"REPL_PERC");
  else fprintf(fpOutputFile,"EZ_REPL_PERC");} // local genome name
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 2285 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The current generation number cannot be changed (not an l-value).\n",sEZ_FILE_NAME,yylineno); exit(1);}
	YY_BREAK
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 2286 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The number of generations can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 2287 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 2288 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The size of the archive population can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 2290 "compiler/EaseaLex.l"
{
  fprintf(stderr,"\n%s - Error line %d: The mutation probability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); 
  exit (1);
}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 2295 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The crossover proability can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 2296 "compiler/EaseaLex.l"
{fprintf(stderr,"\n%s - Error line %d: The replacement percentage can only be changed within the generation function.\n",sEZ_FILE_NAME,yylineno); exit (1);}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 2297 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"false");} // local name
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 2298 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"true");} // local name
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 2299 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,yytext);}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 2301 "compiler/EaseaLex.l"
{ // local random name
  fprintf(fpOutputFile,"globalRandomGenerator->tossCoin");}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 2303 "compiler/EaseaLex.l"
{
  fprintf(fpOutputFile,"globalRandomGenerator->random");}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 2305 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"child1");
 }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 2307 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"child2");
 }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 2309 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"parent1");
 }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 2311 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"parent2");
 }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 2313 "compiler/EaseaLex.l"
{fprintf(fpOutputFile,"genome._evaluated");} // local name
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 2314 "compiler/EaseaLex.l"
{if (bWithinEvaluator) {
    if( TARGET==CUDA || TARGET==STD) {
      if( bWithinCUDA_Evaluator ){
	fprintf(fpOutputFile,"return "); 
	//bWithinCUDA_Evaluator = 0;
      }
      else
	fprintf(fpOutputFile,"return fitness = "); 
      bCatchNextSemiColon=false;
    }
    //bWithinEvaluator=0;
  }
  else if ((bWithinMutator)) {
    fprintf(fpOutputFile,"return ");
    bCatchNextSemiColon=true;
  }
  else fprintf(fpOutputFile,"return"); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 2331 "compiler/EaseaLex.l"
{if (!bCatchNextSemiColon) fprintf(fpOutputFile,";");
  else if (bWithinMutator){fprintf(fpOutputFile,">0?true:false;");/* bWithinMutator=false;*/}
  else fprintf(fpOutputFile,"));");
  bCatchNextSemiColon=false;
 }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 2336 "compiler/EaseaLex.l"
{rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
  bWithinInitialiser=bWithinXover=bWithinMutator=bWithinEvaluator=bWithinOptimiser=bWithinCUDA_Evaluator=0;
  if (bWithinDisplayFunction){
    bWithinDisplayFunction=0; // display function
  }
  else return END_OF_FUNCTION;} // Back to the template file
	YY_BREAK
case 374:
/* rule 374 can match eol */
YY_RULE_SETUP
#line 2345 "compiler/EaseaLex.l"
{putc(yytext[0],fpOutputFile);}                                      
	YY_BREAK
/****************************************
   Looks for run parameters in the .ez file
  ****************************************/
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 2351 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("Analysing parameters...\n");
  BEGIN GET_PARAMETERS;
 }
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 2355 "compiler/EaseaLex.l"
{/*putc(yytext[0],fpOutputFile);*/}                                      
	YY_BREAK
/* takes care of C++-like comments */
case 377:
YY_RULE_SETUP
#line 2358 "compiler/EaseaLex.l"
;         // blah blah on a line containing sth else
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 2359 "compiler/EaseaLex.l"
; // blah blah on its own on a single line
	YY_BREAK
case 379:
/* rule 379 can match eol */
YY_RULE_SETUP
#line 2360 "compiler/EaseaLex.l"
;  /* blah blah on a line containing sth else */
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 2361 "compiler/EaseaLex.l"
; /* blah blah with nothing before the comment */
	YY_BREAK
/* gobbles up white spaces, tabs or carriage returns */
case 381:
YY_RULE_SETUP
#line 2363 "compiler/EaseaLex.l"
{ /* do nothing */ }
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 2364 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 2365 "compiler/EaseaLex.l"
{ /*return '\n';*/ }
	YY_BREAK
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 2367 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tNb of Gen...\n");return NB_GEN;}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 2368 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tTime Limit...\n");return TIME_LIMIT;}
	YY_BREAK
case 386:
/* rule 386 can match eol */
YY_RULE_SETUP
#line 2369 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tPop Size...\n");return POP_SIZE;}
	YY_BREAK
case 387:
/* rule 387 can match eol */
YY_RULE_SETUP
#line 2370 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tArch Size...\n");return ARCH_SIZE;}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 2371 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tElite Size...\n");return ELITE;}
	YY_BREAK
case 389:
/* rule 389 can match eol */
YY_RULE_SETUP
#line 2372 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSelection Operator...\n");return SELECTOR;}
	YY_BREAK
case 390:
/* rule 390 can match eol */
YY_RULE_SETUP
#line 2373 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSel Genitors...\n");}
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 2374 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tMut Prob...\n");return MUT_PROB;}
	YY_BREAK
case 392:
/* rule 392 can match eol */
YY_RULE_SETUP
#line 2375 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tXov Prob...\n");return XOVER_PROB;}
	YY_BREAK
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 2376 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tOff Size...\n");return OFFSPRING;}
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 2378 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPrint Stats...\n");return PRINT_STATS;}
	YY_BREAK
case 395:
/* rule 395 can match eol */
YY_RULE_SETUP
#line 2379 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPlot Stats with gnuplot...\n");return PLOT_STATS;}
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 2380 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tPrint Stats to csv File...\n");return GENERATE_CSV_FILE;}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 2381 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tGenerate Gnuplot Script...\n");return GENERATE_GNUPLOT_SCRIPT;}
	YY_BREAK
case 398:
/* rule 398 can match eol */
YY_RULE_SETUP
#line 2382 "compiler/EaseaLex.l"
{if (bVERBOSE) printf("\tGenerate R Script...\n");return GENERATE_R_SCRIPT;}
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 2384 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tSave population...\n"); return SAVE_POPULATION;}
	YY_BREAK
case 400:
/* rule 400 can match eol */
YY_RULE_SETUP
#line 2385 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tStart from file...\n"); return START_FROM_FILE;}
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 2387 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("\tReduce Parents Operator...\n");
  bIsParentReduce = true;
  return RED_PAR;
 }
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 2392 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSurv Par...\n");return SURVPAR;}
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 2394 "compiler/EaseaLex.l"
{
  if (bVERBOSE) printf ("\tReduce Offspring Operator...\n");
  bIsOffspringReduce = true;
  return RED_OFF;
 }
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 2399 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tSurv Off...\n");return SURVOFF;}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 2402 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tFinal Reduce Operator...\n");return RED_FINAL;/* DISCARD; */}
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 2405 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tElitism...\n");return ELITISM;}
	YY_BREAK
case 407:
/* rule 407 can match eol */
YY_RULE_SETUP
#line 2406 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tMinMax...\n");return MINIMAXI;}
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 2407 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tNb of Optimisation It...\n");return NB_OPT_IT;}
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 2408 "compiler/EaseaLex.l"
{if (bVERBOSE) printf ("\tBaldwinism...\n");return BALDWINISM;}
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 2411 "compiler/EaseaLex.l"
{if(bVERBOSE) printf ("\tRemote Island Model...\n"); return REMOTE_ISLAND_MODEL;}
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 2412 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tIP File...\n"); return IP_FILE;}
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 2413 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tMigration Probability...\n"); return MIGRATION_PROBABILITY;}
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 2414 "compiler/EaseaLex.l"
{if(bVERBOSE) printf("\tServer port...\n"); return SERVER_PORT;}
	YY_BREAK
/* number */
case 414:
YY_RULE_SETUP
#line 2418 "compiler/EaseaLex.l"
{ yylval.dValue = myStrtod(); return NUMBER2; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 2419 "compiler/EaseaLex.l"
{yylval.dValue=atof(yytext); return NUMBER2;}
	YY_BREAK
/* identifier */
case 416:
YY_RULE_SETUP
#line 2422 "compiler/EaseaLex.l"
{
  yylval.pSymbol = new CSymbol(yytext);
  return IDENTIFIER2;}
	YY_BREAK
/* end of .ez file : resume tpl analysis */
/* switch back to .tpl file and analyser */
case 417:
YY_RULE_SETUP
#line 2427 "compiler/EaseaLex.l"
{
  rewind(fpGenomeFile);
  yyin = fpTemplateFile;
  yypop_buffer_state();
  BEGIN TEMPLATE_ANALYSIS;
 }
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 2434 "compiler/EaseaLex.l"
{
  lineCounter++;
 }
	YY_BREAK
case 419:
/* rule 419 can match eol */
YY_RULE_SETUP
#line 2438 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMax init tree depth...\n");
  return MAX_INIT_TREE_D;
 }            
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 2443 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMin init tree depth...\n");
  return MIN_INIT_TREE_D;
 }            
	YY_BREAK
case 421:
/* rule 421 can match eol */
YY_RULE_SETUP
#line 2448 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tMax tree depth...\n");
  return MAX_TREE_D;
 }            
	YY_BREAK
case 422:
/* rule 422 can match eol */
YY_RULE_SETUP
#line 2453 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tNo of GPUs...\n");
  return NB_GPU;
 }            
	YY_BREAK
case 423:
/* rule 423 can match eol */
YY_RULE_SETUP
#line 2458 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tProgramm length buffer...\n");
  return PRG_BUF_SIZE;
 }            
	YY_BREAK
case 424:
/* rule 424 can match eol */
YY_RULE_SETUP
#line 2463 "compiler/EaseaLex.l"
{
  if( bVERBOSE ) printf("\tNo of fitness cases...\n");
  return NO_FITNESS_CASES;
 }            
	YY_BREAK
/****************************************
 * all other characters
 *****************************************/
case 425:
YY_RULE_SETUP
#line 2473 "compiler/EaseaLex.l"
{return  (char)yytext[0];}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 2476 "compiler/EaseaLex.l"
ECHO;
	YY_BREAK
#line 7786 "compiler/EaseaLex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(GENOME_ANALYSIS):
			case YY_STATE_EOF(TEMPLATE_ANALYSIS):
			case YY_STATE_EOF(MACRO_IDENTIFIER):
			case YY_STATE_EOF(MACRO_DEFINITION):
			case YY_STATE_EOF(ANALYSE_USER_CLASSES):
			case YY_STATE_EOF(COPY):
			case YY_STATE_EOF(COPY_INITIALISER):
			case YY_STATE_EOF(COPY_CROSSOVER):
			case YY_STATE_EOF(COPY_MUTATOR):
			case YY_STATE_EOF(COPY_EVALUATOR):
			case YY_STATE_EOF(COPY_OPTIMISER):
			case YY_STATE_EOF(COPY_USER_FUNCTION):
			case YY_STATE_EOF(COPY_USER_GENERATION):
			case YY_STATE_EOF(PARAMETERS_ANALYSIS):
			case YY_STATE_EOF(GET_PARAMETERS):
			case YY_STATE_EOF(GET_METHODS):
			case YY_STATE_EOF(GP_RULE_ANALYSIS):
			case YY_STATE_EOF(GP_COPY_OPCODE_CODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3442 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3442 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3441);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2476 "compiler/EaseaLex.l"


		       /////////////////////////////////////////////////////////////////////////////

inline char  mytolower(char c) {
  return ((c>=65)&&(c<=90)) ? c+=32:c;
}

inline int mystricmp(const char *string1, const char *string2){
  int i;
  for (i=0; string1[i]&&string2[i];i++){
    if (mytolower(string1[i])<mytolower(string2[i])) return -(i+1);
    if (mytolower(string1[i])>mytolower(string2[i])) return i+1;
  }
  if (string2[i]) return  -(i+1);
  if (string1[i]) return  i+1;
  return 0;
}                                  

inline int isLetter(char c){ 
  if (((c>=65)&&(c<=90))||((c>=97)&&(c<=122))) return 1;
  if ((c==45)||(c==46)||(c==95)) return 1;
  return 0;
}

inline int isFigure(char c){ 
  if ((c>=48)&&(c<=57)) return 1;
  return 0;
}

/////////////////////////////////////////////////////////////////////////////
// EASEALexer commands

int CEASEALexer_create(CSymbolTable* pSymTable)
{ 
  int i;
  char sTemp[1000];
#if defined UNIX_OS
  OPERATING_SYSTEM=UNIX;
#elif defined WIN32 //WINDOWS_OS
  OPERATING_SYSTEM=WINDOWS;
//#else
//  OPERATING_SYSTEM=OTHER_SYSTEM;
#endif
  //assert(pParser != NULL);
  //assert(pSymTable != NULL);
  
  pSymbolTable = pSymTable;
  //if (!yycreate(pParser)) return 0;    

  if (bVERBOSE) {
	printf("\n                                                                   ");
  	printf("\n                                   E A S E A                   (v1.0.3)");
  	printf("\n                              ___________________     ");
 	printf("\n                                                                    ");
	printf("\n		Stochastic Optimisation and Nature Inspired Computing");
	printf("\nLaboratoire des Sciences de l'Image, de l'Informatique et de la Teledetection");
	printf("\n			Universite de Strasbourg - France");
	printf("\n		Ogier Maitre - Frederic Kruger - Pierre Collet");
 	printf("\n                                                                    ");
  	printf("\n                              ___________________     ");
 	printf("\n                                                                    ");
  }
  
  if (sRAW_PROJECT_NAME[0]==0){
    printf("\nInsert a .ez file name or a local project name: ");
    scanf("%s",sRAW_PROJECT_NAME);
  }                         
  if (bVERBOSE) printf("\n");
  
  if (TARGET==0) {
 /*     printf("\nPlease select a target library (GALib STD or CUDA): "); */
 /*     scanf("%s",sTemp); */
 /*     else if (!mystricmp(sTemp,"cuda")) TARGET=CUDA; */
 /*     else if (!mystricmp(sTemp,"std")) TARGET=STD; */
 /*     else return 0; */
    TARGET = STD;
  }

  /////////////////////////////////////////////////////////  
  //strcpy(sTemp,"e:\\lutton\\easea\\debug");pour tester sous windows
  if ((sEZ_PATH==NULL)||(sEZ_PATH[0]==0)) {
    if (getenv("EZ_PATH")==NULL){
      //strcpy(sEZ_PATH,"./tpl/");	
      strcpy(sEZ_PATH,"./");	
    }else
      strcpy(sEZ_PATH,getenv("EZ_PATH"));
  }

  strcpy(sTPL_DIR,sEZ_PATH);
  strcat(sTPL_DIR,"tpl/");
  
 
  switch (OPERATING_SYSTEM) {
  case UNIX : if (sEZ_PATH[strlen(sEZ_PATH)-1] != '/') strcat (sEZ_PATH,"./"); break;
  case WINDOWS : if (sEZ_PATH[strlen(sEZ_PATH)-1] != '\\') strcat (sEZ_PATH,"\\"); break;
  case UNKNOWN_OS : fprintf(fpOutputFile,"UNKNOWN_OS"); break;
  }
  //strcpy(sTemp,sEZ_PATH);
  strcpy(sTemp,sTPL_DIR);

  if (TARGET==CUDA){
    if(TARGET_FLAVOR == CUDA_FLAVOR_SO )
      strcat(sTemp,"CUDA.tpl");
    else if(TARGET_FLAVOR == CMAES )
      strcat(sTemp,"CMAES_CUDA.tpl");
/*    else if (TARGET_FLAVOR == NSGAII)
	strcat(sTemp,"NSGAII.tpl");*/
    else if( TARGET_FLAVOR == FLAVOR_GP )
      strcat(sTemp,"CUDA_GP.tpl");
    else if(TARGET_FLAVOR == MEMETIC )
      strcat(sTemp,"CUDA_MEM.tpl");
    else 
      strcat(sTemp,"CUDA_MO.tpl");
    printf("tpl file : %s\n",sTemp);
    if (!(yyin = fpTemplateFile = fopen(sTemp, "r"))){
      fprintf(stderr,"\n*** Could not open %s.\n",sTemp);
      fprintf(stderr,"*** Please modify the EZ_PATH environment variable.\n");
      exit(1);
    } }

  if (TARGET==STD){
    if(TARGET_FLAVOR == STD_FLAVOR_SO)
      strcat(sTemp,"STD.tpl");
    else if (TARGET_FLAVOR == CMAES)
      strcat(sTemp,"CMAES.tpl");
    else if (TARGET_FLAVOR == FLAVOR_GP)
      strcat(sTemp,"GP.tpl");
    else if (TARGET_FLAVOR == NSGAII){
	strcat(sTemp, "NSGAII.tpl");
	std::cout << "STD:NSGAII" << std::endl;
    }
    else if (TARGET_FLAVOR == ASREA){
	strcat(sTemp, "ASREA.tpl");
	std::cout << "STD:ASREA" << std::endl;
    }
    else if (TARGET_FLAVOR == MEMETIC )
      strcat(sTemp,"STD_MEM.tpl");
    //else if (TARGET_FLAVOR == STD_FLAVOR_GP )
   //   strcat(sTemp,"GP.tpl");
    else
      strcat(sTemp,"STD_MO.tpl");
    if (!(yyin = fpTemplateFile = fopen(sTemp, "r"))){
      fprintf(stderr,"\n*** Could not open %s.\n",sTemp);
      fprintf(stderr,"*** Please modify the EZ_PATH environment variable.\n");
      exit(1);
    }
  }
  
  if ((sRAW_PROJECT_NAME[0]=='"')&&(OPERATING_SYSTEM!=WINDOWS)){
    strcpy(sRAW_PROJECT_NAME,&(sRAW_PROJECT_NAME[1]));
    sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-1]=0;
  }
  if (strlen(sRAW_PROJECT_NAME)>3) 
    if (!mystricmp(".EZ",&(sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-3])))
      sRAW_PROJECT_NAME[strlen(sRAW_PROJECT_NAME)-3]=0;

  strcpy(sEZ_FILE_NAME, sRAW_PROJECT_NAME);
  strcat(sEZ_FILE_NAME,".ez");

  for (i=strlen(sRAW_PROJECT_NAME)-1;isFigure(sRAW_PROJECT_NAME[i]) || isLetter(sRAW_PROJECT_NAME[i]);i--);
  strcpy (sPROJECT_NAME,&(sRAW_PROJECT_NAME[i+1]));
  
  for(i=0;i<(int)strlen(sPROJECT_NAME);i++) sLOWER_CASE_PROJECT_NAME[i]=mytolower(sPROJECT_NAME[i]);
  
  if ((!isLetter(sPROJECT_NAME[0]))&&(sPROJECT_NAME[0]!='"')&&(sPROJECT_NAME[0]!='/')&&(sPROJECT_NAME[0]!='\\')) {
    fprintf(stderr,"\n*** Project names starting with non-letters are invalid.\n*** Please choose another name.\n"); return 0;}
                                                                           
  if (!(fpGenomeFile = fopen(sEZ_FILE_NAME, "r"))){
    fprintf(stderr,"\n*** Could not open %s\n",sEZ_FILE_NAME); return 0;}
 
  return 1;
}


/////////////////////////////////////////////////////////////////////////////
// calc_lexer attribute commands

double myStrtod(){
  errno = 0;    // clear error flag
  char* endp;
  double d = strtod(yytext, &endp);
  if ((d == +HUGE_VAL || d == -HUGE_VAL) && errno == ERANGE)
  {
    printf("number too large\n");
  }
  return d;
}                               

